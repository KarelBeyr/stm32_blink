
Blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c70  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f08  08001f08  00002f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f18  08001f18  00002f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001f1c  08001f1c  00002f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08001f20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001f30  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001f30  00003030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000070c9  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000126f  00000000  00000000  0000a107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000618  00000000  00000000  0000b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000478  00000000  00000000  0000b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034d6f  00000000  00000000  0000be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000742e  00000000  00000000  00040b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150732  00000000  00000000  00047fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001986d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000170c  00000000  00000000  0019871c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005f  00000000  00000000  00199e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001ef0 	.word	0x08001ef0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001ef0 	.word	0x08001ef0

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002dc:	f000 f8dc 	bl	8000498 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fa3a 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f81a 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f882 	bl	80003f0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) // Button pressed
 80002ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002f0:	4808      	ldr	r0, [pc, #32]	@ (8000314 <main+0x3c>)
 80002f2:	f000 fddb 	bl	8000eac <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d105      	bne.n	8000308 <main+0x30>
	  {
		  HAL_GPIO_WritePin(GPIOD,  GPIO_PIN_3, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2108      	movs	r1, #8
 8000300:	4805      	ldr	r0, [pc, #20]	@ (8000318 <main+0x40>)
 8000302:	f000 fdeb 	bl	8000edc <HAL_GPIO_WritePin>
 8000306:	e7f1      	b.n	80002ec <main+0x14>
	    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3); // Toggle LED
	    //HAL_Delay(200); // Debounce delay
	  } else {
		  HAL_GPIO_WritePin(GPIOD,  GPIO_PIN_3, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <main+0x40>)
 800030e:	f000 fde5 	bl	8000edc <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) // Button pressed
 8000312:	e7eb      	b.n	80002ec <main+0x14>
 8000314:	58020800 	.word	0x58020800
 8000318:	58020c00 	.word	0x58020c00

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b09c      	sub	sp, #112	@ 0x70
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000326:	224c      	movs	r2, #76	@ 0x4c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fdb4 	bl	8001e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2220      	movs	r2, #32
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fdae 	bl	8001e98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800033c:	2002      	movs	r0, #2
 800033e:	f000 fde7 	bl	8000f10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000342:	2300      	movs	r3, #0
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	4b28      	ldr	r3, [pc, #160]	@ (80003e8 <SystemClock_Config+0xcc>)
 8000348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800034a:	4a27      	ldr	r2, [pc, #156]	@ (80003e8 <SystemClock_Config+0xcc>)
 800034c:	f023 0301 	bic.w	r3, r3, #1
 8000350:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000352:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <SystemClock_Config+0xcc>)
 8000354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <SystemClock_Config+0xd0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000364:	4a21      	ldr	r2, [pc, #132]	@ (80003ec <SystemClock_Config+0xd0>)
 8000366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <SystemClock_Config+0xd0>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000378:	bf00      	nop
 800037a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <SystemClock_Config+0xd0>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000386:	d1f8      	bne.n	800037a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800038c:	2301      	movs	r3, #1
 800038e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2340      	movs	r3, #64	@ 0x40
 8000392:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000394:	2300      	movs	r3, #0
 8000396:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fdf1 	bl	8000f84 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003a8:	f000 f8a2 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	233f      	movs	r3, #63	@ 0x3f
 80003ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fa31 	bl	8001838 <HAL_RCC_ClockConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003dc:	f000 f888 	bl	80004f0 <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3770      	adds	r7, #112	@ 0x70
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	58000400 	.word	0x58000400
 80003ec:	58024800 	.word	0x58024800

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000406:	4b21      	ldr	r3, [pc, #132]	@ (800048c <MX_GPIO_Init+0x9c>)
 8000408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800040c:	4a1f      	ldr	r2, [pc, #124]	@ (800048c <MX_GPIO_Init+0x9c>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000416:	4b1d      	ldr	r3, [pc, #116]	@ (800048c <MX_GPIO_Init+0x9c>)
 8000418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <MX_GPIO_Init+0x9c>)
 8000426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800042a:	4a18      	ldr	r2, [pc, #96]	@ (800048c <MX_GPIO_Init+0x9c>)
 800042c:	f043 0304 	orr.w	r3, r3, #4
 8000430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_GPIO_Init+0x9c>)
 8000436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800043a:	f003 0304 	and.w	r3, r3, #4
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2108      	movs	r1, #8
 8000446:	4812      	ldr	r0, [pc, #72]	@ (8000490 <MX_GPIO_Init+0xa0>)
 8000448:	f000 fd48 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800044c:	2308      	movs	r3, #8
 800044e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4619      	mov	r1, r3
 8000462:	480b      	ldr	r0, [pc, #44]	@ (8000490 <MX_GPIO_Init+0xa0>)
 8000464:	f000 fb72 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800046c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	@ (8000494 <MX_GPIO_Init+0xa4>)
 800047e:	f000 fb65 	bl	8000b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000482:	bf00      	nop
 8000484:	3720      	adds	r7, #32
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	58024400 	.word	0x58024400
 8000490:	58020c00 	.word	0x58020c00
 8000494:	58020800 	.word	0x58020800

08000498 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800049e:	463b      	mov	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004aa:	f000 fad7 	bl	8000a5c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ae:	2301      	movs	r3, #1
 80004b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004ba:	231f      	movs	r3, #31
 80004bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004be:	2387      	movs	r3, #135	@ 0x87
 80004c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004c6:	2300      	movs	r3, #0
 80004c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004da:	463b      	mov	r3, r7
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 faf5 	bl	8000acc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004e2:	2004      	movs	r0, #4
 80004e4:	f000 fad2 	bl	8000a8c <HAL_MPU_Enable>

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_MspInit+0x30>)
 8000504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000508:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_MspInit+0x30>)
 800050a:	f043 0302 	orr.w	r3, r3, #2
 800050e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_MspInit+0x30>)
 8000514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	58024400 	.word	0x58024400

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <NMI_Handler+0x4>

08000538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <UsageFault_Handler+0x4>

08000558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f000 f959 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000594:	4b43      	ldr	r3, [pc, #268]	@ (80006a4 <SystemInit+0x114>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059a:	4a42      	ldr	r2, [pc, #264]	@ (80006a4 <SystemInit+0x114>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005a4:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <SystemInit+0x118>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 030f 	and.w	r3, r3, #15
 80005ac:	2b06      	cmp	r3, #6
 80005ae:	d807      	bhi.n	80005c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005b0:	4b3d      	ldr	r3, [pc, #244]	@ (80006a8 <SystemInit+0x118>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f023 030f 	bic.w	r3, r3, #15
 80005b8:	4a3b      	ldr	r2, [pc, #236]	@ (80006a8 <SystemInit+0x118>)
 80005ba:	f043 0307 	orr.w	r3, r3, #7
 80005be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005c0:	4b3a      	ldr	r3, [pc, #232]	@ (80006ac <SystemInit+0x11c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a39      	ldr	r2, [pc, #228]	@ (80006ac <SystemInit+0x11c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <SystemInit+0x11c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005d2:	4b36      	ldr	r3, [pc, #216]	@ (80006ac <SystemInit+0x11c>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4935      	ldr	r1, [pc, #212]	@ (80006ac <SystemInit+0x11c>)
 80005d8:	4b35      	ldr	r3, [pc, #212]	@ (80006b0 <SystemInit+0x120>)
 80005da:	4013      	ands	r3, r2
 80005dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005de:	4b32      	ldr	r3, [pc, #200]	@ (80006a8 <SystemInit+0x118>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f003 0308 	and.w	r3, r3, #8
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005ea:	4b2f      	ldr	r3, [pc, #188]	@ (80006a8 <SystemInit+0x118>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f023 030f 	bic.w	r3, r3, #15
 80005f2:	4a2d      	ldr	r2, [pc, #180]	@ (80006a8 <SystemInit+0x118>)
 80005f4:	f043 0307 	orr.w	r3, r3, #7
 80005f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <SystemInit+0x11c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <SystemInit+0x11c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <SystemInit+0x11c>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <SystemInit+0x11c>)
 800060e:	4a29      	ldr	r2, [pc, #164]	@ (80006b4 <SystemInit+0x124>)
 8000610:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <SystemInit+0x11c>)
 8000614:	4a28      	ldr	r2, [pc, #160]	@ (80006b8 <SystemInit+0x128>)
 8000616:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000618:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <SystemInit+0x11c>)
 800061a:	4a28      	ldr	r2, [pc, #160]	@ (80006bc <SystemInit+0x12c>)
 800061c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <SystemInit+0x11c>)
 8000620:	2200      	movs	r2, #0
 8000622:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <SystemInit+0x11c>)
 8000626:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <SystemInit+0x12c>)
 8000628:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800062a:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <SystemInit+0x11c>)
 800062c:	2200      	movs	r2, #0
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000630:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <SystemInit+0x11c>)
 8000632:	4a22      	ldr	r2, [pc, #136]	@ (80006bc <SystemInit+0x12c>)
 8000634:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <SystemInit+0x11c>)
 8000638:	2200      	movs	r2, #0
 800063a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <SystemInit+0x11c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1a      	ldr	r2, [pc, #104]	@ (80006ac <SystemInit+0x11c>)
 8000642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000646:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <SystemInit+0x11c>)
 800064a:	2200      	movs	r2, #0
 800064c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <SystemInit+0x130>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <SystemInit+0x134>)
 8000654:	4013      	ands	r3, r2
 8000656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800065a:	d202      	bcs.n	8000662 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <SystemInit+0x138>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <SystemInit+0x11c>)
 8000664:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800066c:	2b00      	cmp	r3, #0
 800066e:	d113      	bne.n	8000698 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <SystemInit+0x11c>)
 8000672:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000676:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <SystemInit+0x11c>)
 8000678:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800067c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x13c>)
 8000682:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000686:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <SystemInit+0x11c>)
 800068a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800068e:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <SystemInit+0x11c>)
 8000690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000694:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00
 80006a8:	52002000 	.word	0x52002000
 80006ac:	58024400 	.word	0x58024400
 80006b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006b4:	02020200 	.word	0x02020200
 80006b8:	01ff0000 	.word	0x01ff0000
 80006bc:	01010280 	.word	0x01010280
 80006c0:	5c001000 	.word	0x5c001000
 80006c4:	ffff0000 	.word	0xffff0000
 80006c8:	51008108 	.word	0x51008108
 80006cc:	52004000 	.word	0x52004000

080006d0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <ExitRun0Mode+0x2c>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <ExitRun0Mode+0x2c>)
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80006e0:	bf00      	nop
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <ExitRun0Mode+0x2c>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f9      	beq.n	80006e2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	58024800 	.word	0x58024800

08000700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000700:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800073c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000704:	f7ff ffe4 	bl	80006d0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000708:	f7ff ff42 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	@ (8000740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	@ (8000744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	@ (8000750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f001 fbb9 	bl	8001ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000736:	f7ff fdcf 	bl	80002d8 <main>
  bx  lr
 800073a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800073c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000740:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000744:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000748:	08001f20 	.word	0x08001f20
  ldr r2, =_sbss
 800074c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000750:	24000030 	.word	0x24000030

08000754 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC3_IRQHandler>
	...

08000758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075e:	2003      	movs	r0, #3
 8000760:	f000 f94a 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000764:	f001 fa1e 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8000768:	4602      	mov	r2, r0
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <HAL_Init+0x68>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	f003 030f 	and.w	r3, r3, #15
 8000774:	4913      	ldr	r1, [pc, #76]	@ (80007c4 <HAL_Init+0x6c>)
 8000776:	5ccb      	ldrb	r3, [r1, r3]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	fa22 f303 	lsr.w	r3, r2, r3
 8000780:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <HAL_Init+0x68>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <HAL_Init+0x6c>)
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	f003 031f 	and.w	r3, r3, #31
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	fa22 f303 	lsr.w	r3, r2, r3
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <HAL_Init+0x70>)
 800079a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800079c:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <HAL_Init+0x74>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 f814 	bl	80007d0 <HAL_InitTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e002      	b.n	80007b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007b2:	f7ff fea3 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	58024400 	.word	0x58024400
 80007c4:	08001f08 	.word	0x08001f08
 80007c8:	24000004 	.word	0x24000004
 80007cc:	24000000 	.word	0x24000000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_InitTick+0x60>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e021      	b.n	8000828 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_InitTick+0x64>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_InitTick+0x60>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f921 	bl	8000a42 <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 f8f9 	bl	8000a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <HAL_InitTick+0x68>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400000c 	.word	0x2400000c
 8000834:	24000000 	.word	0x24000000
 8000838:	24000008 	.word	0x24000008

0800083c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2400000c 	.word	0x2400000c
 8000860:	2400002c 	.word	0x2400002c

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2400002c 	.word	0x2400002c

0800087c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <HAL_GetREVID+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	0c1b      	lsrs	r3, r3, #16
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	5c001000 	.word	0x5c001000

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <__NVIC_SetPriorityGrouping+0x40>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <__NVIC_SetPriorityGrouping+0x40>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00
 80008d8:	05fa0000 	.word	0x05fa0000

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	@ (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	@ (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	@ 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	@ 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff47 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb2 	bl	80009b4 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a60:	f3bf 8f5f 	dmb	sy
}
 8000a64:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <HAL_MPU_Disable+0x28>)
 8000a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6a:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_MPU_Disable+0x28>)
 8000a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a70:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_MPU_Disable+0x2c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	e000ed90 	.word	0xe000ed90

08000a8c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <HAL_MPU_Enable+0x38>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_MPU_Enable+0x3c>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <HAL_MPU_Enable+0x3c>)
 8000aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aa8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000aaa:	f3bf 8f4f 	dsb	sy
}
 8000aae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab0:	f3bf 8f6f 	isb	sy
}
 8000ab4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed90 	.word	0xe000ed90
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	785a      	ldrb	r2, [r3, #1]
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <HAL_MPU_ConfigRegion+0x7c>)
 8000ada:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_MPU_ConfigRegion+0x7c>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	@ (8000b48 <HAL_MPU_ConfigRegion+0x7c>)
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ae8:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <HAL_MPU_ConfigRegion+0x7c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7b1b      	ldrb	r3, [r3, #12]
 8000af4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7adb      	ldrb	r3, [r3, #11]
 8000afa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a9b      	ldrb	r3, [r3, #10]
 8000b02:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7b5b      	ldrb	r3, [r3, #13]
 8000b0a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7b9b      	ldrb	r3, [r3, #14]
 8000b12:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7bdb      	ldrb	r3, [r3, #15]
 8000b1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7a5b      	ldrb	r3, [r3, #9]
 8000b22:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7a1b      	ldrb	r3, [r3, #8]
 8000b2a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b2c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b36:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b38:	6113      	str	r3, [r2, #16]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed90 	.word	0xe000ed90

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	@ 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b5a:	4b89      	ldr	r3, [pc, #548]	@ (8000d80 <HAL_GPIO_Init+0x234>)
 8000b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b5e:	e194      	b.n	8000e8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8186 	beq.w	8000e84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d005      	beq.n	8000b90 <HAL_GPIO_Init+0x44>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d130      	bne.n	8000bf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	091b      	lsrs	r3, r3, #4
 8000bdc:	f003 0201 	and.w	r2, r3, #1
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d017      	beq.n	8000c2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d123      	bne.n	8000c82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	08da      	lsrs	r2, r3, #3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	69b9      	ldr	r1, [r7, #24]
 8000c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0203 	and.w	r2, r3, #3
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80e0 	beq.w	8000e84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <HAL_GPIO_Init+0x238>)
 8000cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cca:	4a2e      	ldr	r2, [pc, #184]	@ (8000d84 <HAL_GPIO_Init+0x238>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <HAL_GPIO_Init+0x238>)
 8000cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce2:	4a29      	ldr	r2, [pc, #164]	@ (8000d88 <HAL_GPIO_Init+0x23c>)
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <HAL_GPIO_Init+0x240>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d052      	beq.n	8000db4 <HAL_GPIO_Init+0x268>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <HAL_GPIO_Init+0x244>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d031      	beq.n	8000d7a <HAL_GPIO_Init+0x22e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a1e      	ldr	r2, [pc, #120]	@ (8000d94 <HAL_GPIO_Init+0x248>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d02b      	beq.n	8000d76 <HAL_GPIO_Init+0x22a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a1d      	ldr	r2, [pc, #116]	@ (8000d98 <HAL_GPIO_Init+0x24c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d025      	beq.n	8000d72 <HAL_GPIO_Init+0x226>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a1c      	ldr	r2, [pc, #112]	@ (8000d9c <HAL_GPIO_Init+0x250>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d01f      	beq.n	8000d6e <HAL_GPIO_Init+0x222>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <HAL_GPIO_Init+0x254>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d019      	beq.n	8000d6a <HAL_GPIO_Init+0x21e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <HAL_GPIO_Init+0x258>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d013      	beq.n	8000d66 <HAL_GPIO_Init+0x21a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a19      	ldr	r2, [pc, #100]	@ (8000da8 <HAL_GPIO_Init+0x25c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d00d      	beq.n	8000d62 <HAL_GPIO_Init+0x216>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <HAL_GPIO_Init+0x260>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d007      	beq.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <HAL_GPIO_Init+0x264>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d101      	bne.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d56:	2309      	movs	r3, #9
 8000d58:	e02d      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	e02b      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d5e:	2308      	movs	r3, #8
 8000d60:	e029      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d62:	2307      	movs	r3, #7
 8000d64:	e027      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d66:	2306      	movs	r3, #6
 8000d68:	e025      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	e023      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e021      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d72:	2303      	movs	r3, #3
 8000d74:	e01f      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e01d      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e01b      	b.n	8000db6 <HAL_GPIO_Init+0x26a>
 8000d7e:	bf00      	nop
 8000d80:	58000080 	.word	0x58000080
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58000400 	.word	0x58000400
 8000d8c:	58020000 	.word	0x58020000
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58020800 	.word	0x58020800
 8000d98:	58020c00 	.word	0x58020c00
 8000d9c:	58021000 	.word	0x58021000
 8000da0:	58021400 	.word	0x58021400
 8000da4:	58021800 	.word	0x58021800
 8000da8:	58021c00 	.word	0x58021c00
 8000dac:	58022000 	.word	0x58022000
 8000db0:	58022400 	.word	0x58022400
 8000db4:	2300      	movs	r3, #0
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	f002 0203 	and.w	r2, r2, #3
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc6:	4938      	ldr	r1, [pc, #224]	@ (8000ea8 <HAL_GPIO_Init+0x35c>)
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3301      	adds	r3, #1
 8000e88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f47f ae63 	bne.w	8000b60 <HAL_GPIO_Init+0x14>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3724      	adds	r7, #36	@ 0x24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	58000400 	.word	0x58000400

08000eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e001      	b.n	8000ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eec:	787b      	ldrb	r3, [r7, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000ef8:	e003      	b.n	8000f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	041a      	lsls	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_PWREx_ConfigSupply+0x70>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00a      	beq.n	8000f3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <HAL_PWREx_ConfigSupply+0x70>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d001      	beq.n	8000f36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e01f      	b.n	8000f76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e01d      	b.n	8000f76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_PWREx_ConfigSupply+0x70>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f023 0207 	bic.w	r2, r3, #7
 8000f42:	490f      	ldr	r1, [pc, #60]	@ (8000f80 <HAL_PWREx_ConfigSupply+0x70>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000f4a:	f7ff fc8b 	bl	8000864 <HAL_GetTick>
 8000f4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f50:	e009      	b.n	8000f66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f52:	f7ff fc87 	bl	8000864 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f60:	d901      	bls.n	8000f66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e007      	b.n	8000f76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_PWREx_ConfigSupply+0x70>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f72:	d1ee      	bne.n	8000f52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	58024800 	.word	0x58024800

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f000 bc48 	b.w	8001828 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 8088 	beq.w	80010b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fa6:	4b99      	ldr	r3, [pc, #612]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fb0:	4b96      	ldr	r3, [pc, #600]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb8:	2b10      	cmp	r3, #16
 8000fba:	d007      	beq.n	8000fcc <HAL_RCC_OscConfig+0x48>
 8000fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fbe:	2b18      	cmp	r3, #24
 8000fc0:	d111      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x62>
 8000fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d10c      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d06d      	beq.n	80010b4 <HAL_RCC_OscConfig+0x130>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d169      	bne.n	80010b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f000 bc21 	b.w	8001828 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fee:	d106      	bne.n	8000ffe <HAL_RCC_OscConfig+0x7a>
 8000ff0:	4b86      	ldr	r3, [pc, #536]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a85      	ldr	r2, [pc, #532]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e02e      	b.n	800105c <HAL_RCC_OscConfig+0xd8>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x9c>
 8001006:	4b81      	ldr	r3, [pc, #516]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a80      	ldr	r2, [pc, #512]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 800100c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b7e      	ldr	r3, [pc, #504]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7d      	ldr	r2, [pc, #500]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001018:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e01d      	b.n	800105c <HAL_RCC_OscConfig+0xd8>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0xc0>
 800102a:	4b78      	ldr	r3, [pc, #480]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a77      	ldr	r2, [pc, #476]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b75      	ldr	r3, [pc, #468]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a74      	ldr	r2, [pc, #464]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xd8>
 8001044:	4b71      	ldr	r3, [pc, #452]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a70      	ldr	r2, [pc, #448]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b6e      	ldr	r3, [pc, #440]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a6d      	ldr	r2, [pc, #436]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001064:	f7ff fbfe 	bl	8000864 <HAL_GetTick>
 8001068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fbfa 	bl	8000864 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	@ 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e3d4      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800107e:	4b63      	ldr	r3, [pc, #396]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0xe8>
 800108a:	e014      	b.n	80010b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fbea 	bl	8000864 <HAL_GetTick>
 8001090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fbe6 	bl	8000864 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	@ 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e3c0      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010a6:	4b59      	ldr	r3, [pc, #356]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x110>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 80ca 	beq.w	8001258 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c4:	4b51      	ldr	r3, [pc, #324]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010ce:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80010d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <HAL_RCC_OscConfig+0x166>
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	2b18      	cmp	r3, #24
 80010de:	d156      	bne.n	800118e <HAL_RCC_OscConfig+0x20a>
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d151      	bne.n	800118e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ea:	4b48      	ldr	r3, [pc, #288]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_RCC_OscConfig+0x17e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e392      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001102:	4b42      	ldr	r3, [pc, #264]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0219 	bic.w	r2, r3, #25
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	493f      	ldr	r1, [pc, #252]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fba6 	bl	8000864 <HAL_GetTick>
 8001118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fba2 	bl	8000864 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e37c      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800112e:	4b37      	ldr	r3, [pc, #220]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	f7ff fb9f 	bl	800087c <HAL_GetREVID>
 800113e:	4603      	mov	r3, r0
 8001140:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001144:	4293      	cmp	r3, r2
 8001146:	d817      	bhi.n	8001178 <HAL_RCC_OscConfig+0x1f4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2b40      	cmp	r3, #64	@ 0x40
 800114e:	d108      	bne.n	8001162 <HAL_RCC_OscConfig+0x1de>
 8001150:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001158:	4a2c      	ldr	r2, [pc, #176]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 800115a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001160:	e07a      	b.n	8001258 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	031b      	lsls	r3, r3, #12
 8001170:	4926      	ldr	r1, [pc, #152]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001176:	e06f      	b.n	8001258 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	061b      	lsls	r3, r3, #24
 8001186:	4921      	ldr	r1, [pc, #132]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118c:	e064      	b.n	8001258 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d047      	beq.n	8001226 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 0219 	bic.w	r2, r3, #25
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	491a      	ldr	r1, [pc, #104]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fb5c 	bl	8000864 <HAL_GetTick>
 80011ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fb58 	bl	8000864 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e332      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	f7ff fb55 	bl	800087c <HAL_GetREVID>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80011d8:	4293      	cmp	r3, r2
 80011da:	d819      	bhi.n	8001210 <HAL_RCC_OscConfig+0x28c>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b40      	cmp	r3, #64	@ 0x40
 80011e2:	d108      	bne.n	80011f6 <HAL_RCC_OscConfig+0x272>
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f2:	6053      	str	r3, [r2, #4]
 80011f4:	e030      	b.n	8001258 <HAL_RCC_OscConfig+0x2d4>
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	031b      	lsls	r3, r3, #12
 8001204:	4901      	ldr	r1, [pc, #4]	@ (800120c <HAL_RCC_OscConfig+0x288>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
 800120a:	e025      	b.n	8001258 <HAL_RCC_OscConfig+0x2d4>
 800120c:	58024400 	.word	0x58024400
 8001210:	4b9a      	ldr	r3, [pc, #616]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	4997      	ldr	r1, [pc, #604]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
 8001224:	e018      	b.n	8001258 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b95      	ldr	r3, [pc, #596]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a94      	ldr	r2, [pc, #592]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff fb17 	bl	8000864 <HAL_GetTick>
 8001236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fb13 	bl	8000864 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e2ed      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800124c:	4b8b      	ldr	r3, [pc, #556]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a9 	beq.w	80013b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001266:	4b85      	ldr	r3, [pc, #532]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800126e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001270:	4b82      	ldr	r3, [pc, #520]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d007      	beq.n	800128c <HAL_RCC_OscConfig+0x308>
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b18      	cmp	r3, #24
 8001280:	d13a      	bne.n	80012f8 <HAL_RCC_OscConfig+0x374>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d135      	bne.n	80012f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800128c:	4b7b      	ldr	r3, [pc, #492]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x320>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b80      	cmp	r3, #128	@ 0x80
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e2c1      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012a4:	f7ff faea 	bl	800087c <HAL_GetREVID>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d817      	bhi.n	80012e2 <HAL_RCC_OscConfig+0x35e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	2b20      	cmp	r3, #32
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x348>
 80012ba:	4b70      	ldr	r3, [pc, #448]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80012c2:	4a6e      	ldr	r2, [pc, #440]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80012c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012ca:	e075      	b.n	80013b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012cc:	4b6b      	ldr	r3, [pc, #428]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	069b      	lsls	r3, r3, #26
 80012da:	4968      	ldr	r1, [pc, #416]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012e0:	e06a      	b.n	80013b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012e2:	4b66      	ldr	r3, [pc, #408]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	061b      	lsls	r3, r3, #24
 80012f0:	4962      	ldr	r1, [pc, #392]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012f6:	e05f      	b.n	80013b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d042      	beq.n	8001386 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001300:	4b5e      	ldr	r3, [pc, #376]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a5d      	ldr	r2, [pc, #372]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff faaa 	bl	8000864 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001314:	f7ff faa6 	bl	8000864 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e280      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001326:	4b55      	ldr	r3, [pc, #340]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001332:	f7ff faa3 	bl	800087c <HAL_GetREVID>
 8001336:	4603      	mov	r3, r0
 8001338:	f241 0203 	movw	r2, #4099	@ 0x1003
 800133c:	4293      	cmp	r3, r2
 800133e:	d817      	bhi.n	8001370 <HAL_RCC_OscConfig+0x3ec>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	2b20      	cmp	r3, #32
 8001346:	d108      	bne.n	800135a <HAL_RCC_OscConfig+0x3d6>
 8001348:	4b4c      	ldr	r3, [pc, #304]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001350:	4a4a      	ldr	r2, [pc, #296]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001352:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001356:	6053      	str	r3, [r2, #4]
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0x434>
 800135a:	4b48      	ldr	r3, [pc, #288]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	069b      	lsls	r3, r3, #26
 8001368:	4944      	ldr	r1, [pc, #272]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
 800136e:	e023      	b.n	80013b8 <HAL_RCC_OscConfig+0x434>
 8001370:	4b42      	ldr	r3, [pc, #264]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	493f      	ldr	r1, [pc, #252]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001380:	4313      	orrs	r3, r2
 8001382:	60cb      	str	r3, [r1, #12]
 8001384:	e018      	b.n	80013b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001386:	4b3d      	ldr	r3, [pc, #244]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3c      	ldr	r2, [pc, #240]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800138c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fa67 	bl	8000864 <HAL_GetTick>
 8001396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800139a:	f7ff fa63 	bl	8000864 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e23d      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013ac:	4b33      	ldr	r3, [pc, #204]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d036      	beq.n	8001432 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d019      	beq.n	8001400 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013d0:	4a2a      	ldr	r2, [pc, #168]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fa44 	bl	8000864 <HAL_GetTick>
 80013dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fa40 	bl	8000864 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e21a      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x45c>
 80013fe:	e018      	b.n	8001432 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001404:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fa2a 	bl	8000864 <HAL_GetTick>
 8001410:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fa26 	bl	8000864 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e200      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d039      	beq.n	80014b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d01c      	beq.n	8001480 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800144c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001450:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001452:	f7ff fa07 	bl	8000864 <HAL_GetTick>
 8001456:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800145a:	f7ff fa03 	bl	8000864 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1dd      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_RCC_OscConfig+0x4f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x4d6>
 8001478:	e01b      	b.n	80014b2 <HAL_RCC_OscConfig+0x52e>
 800147a:	bf00      	nop
 800147c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001480:	4b9b      	ldr	r3, [pc, #620]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a9a      	ldr	r2, [pc, #616]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800148a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800148c:	f7ff f9ea 	bl	8000864 <HAL_GetTick>
 8001490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001494:	f7ff f9e6 	bl	8000864 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1c0      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014a6:	4b92      	ldr	r3, [pc, #584]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8081 	beq.w	80015c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014c0:	4b8c      	ldr	r3, [pc, #560]	@ (80016f4 <HAL_RCC_OscConfig+0x770>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a8b      	ldr	r2, [pc, #556]	@ (80016f4 <HAL_RCC_OscConfig+0x770>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f9ca 	bl	8000864 <HAL_GetTick>
 80014d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7ff f9c6 	bl	8000864 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1a0      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80014e6:	4b83      	ldr	r3, [pc, #524]	@ (80016f4 <HAL_RCC_OscConfig+0x770>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x584>
 80014fa:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fe:	4a7c      	ldr	r2, [pc, #496]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6713      	str	r3, [r2, #112]	@ 0x70
 8001506:	e02d      	b.n	8001564 <HAL_RCC_OscConfig+0x5e0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x5a6>
 8001510:	4b77      	ldr	r3, [pc, #476]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a76      	ldr	r2, [pc, #472]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
 800151c:	4b74      	ldr	r3, [pc, #464]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001520:	4a73      	ldr	r2, [pc, #460]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001522:	f023 0304 	bic.w	r3, r3, #4
 8001526:	6713      	str	r3, [r2, #112]	@ 0x70
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x5e0>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x5c8>
 8001532:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	4a6e      	ldr	r2, [pc, #440]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	@ 0x70
 800153e:	4b6c      	ldr	r3, [pc, #432]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	4a6b      	ldr	r2, [pc, #428]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	@ 0x70
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x5e0>
 800154c:	4b68      	ldr	r3, [pc, #416]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a67      	ldr	r2, [pc, #412]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70
 8001558:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155c:	4a64      	ldr	r2, [pc, #400]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff f97a 	bl	8000864 <HAL_GetTick>
 8001570:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff f976 	bl	8000864 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e14e      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800158a:	4b59      	ldr	r3, [pc, #356]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ee      	beq.n	8001574 <HAL_RCC_OscConfig+0x5f0>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff f964 	bl	8000864 <HAL_GetTick>
 800159c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff f960 	bl	8000864 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e138      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015b6:	4b4e      	ldr	r3, [pc, #312]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ee      	bne.n	80015a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 812d 	beq.w	8001826 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80015cc:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015d4:	2b18      	cmp	r3, #24
 80015d6:	f000 80bd 	beq.w	8001754 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	2b02      	cmp	r3, #2
 80015e0:	f040 809e 	bne.w	8001720 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a41      	ldr	r2, [pc, #260]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80015ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff f938 	bl	8000864 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f934 	bl	8000864 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e10e      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800160a:	4b39      	ldr	r3, [pc, #228]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001616:	4b36      	ldr	r3, [pc, #216]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_RCC_OscConfig+0x774>)
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	430a      	orrs	r2, r1
 800162a:	4931      	ldr	r1, [pc, #196]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	3b01      	subs	r3, #1
 8001636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163e:	3b01      	subs	r3, #1
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	b29b      	uxth	r3, r3
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001658:	3b01      	subs	r3, #1
 800165a:	061b      	lsls	r3, r3, #24
 800165c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001660:	4923      	ldr	r1, [pc, #140]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001662:	4313      	orrs	r3, r2
 8001664:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	4a21      	ldr	r2, [pc, #132]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <HAL_RCC_OscConfig+0x778>)
 8001678:	4013      	ands	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800167e:	00d2      	lsls	r2, r2, #3
 8001680:	491b      	ldr	r1, [pc, #108]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168a:	f023 020c 	bic.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4917      	ldr	r1, [pc, #92]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 8001694:	4313      	orrs	r3, r2
 8001696:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	f023 0202 	bic.w	r2, r3, #2
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	4912      	ldr	r1, [pc, #72]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff f8bd 	bl	8000864 <HAL_GetTick>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ec:	e011      	b.n	8001712 <HAL_RCC_OscConfig+0x78e>
 80016ee:	bf00      	nop
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58024800 	.word	0x58024800
 80016f8:	fffffc0c 	.word	0xfffffc0c
 80016fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff f8b0 	bl	8000864 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e08a      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001712:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x77c>
 800171e:	e082      	b.n	8001826 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a42      	ldr	r2, [pc, #264]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f89a 	bl	8000864 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f896 	bl	8000864 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e070      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001746:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x7b0>
 8001752:	e068      	b.n	8001826 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001754:	4b36      	ldr	r3, [pc, #216]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800175a:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	2b01      	cmp	r3, #1
 8001766:	d031      	beq.n	80017cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0203 	and.w	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d12a      	bne.n	80017cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d122      	bne.n	80017cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001790:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d11a      	bne.n	80017cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0a5b      	lsrs	r3, r3, #9
 800179a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d111      	bne.n	80017cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	0e1b      	lsrs	r3, r3, #24
 80017be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e02b      	b.n	8001828 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 80017d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80017da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d01f      	beq.n	8001826 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017f2:	f7ff f837 	bl	8000864 <HAL_GetTick>
 80017f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80017f8:	bf00      	nop
 80017fa:	f7ff f833 	bl	8000864 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	4293      	cmp	r3, r2
 8001804:	d0f9      	beq.n	80017fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_RCC_OscConfig+0x8b0>)
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001812:	00d2      	lsls	r2, r2, #3
 8001814:	4906      	ldr	r1, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001816:	4313      	orrs	r3, r2
 8001818:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 800181c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_RCC_OscConfig+0x8ac>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3730      	adds	r7, #48	@ 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58024400 	.word	0x58024400
 8001834:	ffff0007 	.word	0xffff0007

08001838 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e19c      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b87      	ldr	r3, [pc, #540]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 020f 	bic.w	r2, r3, #15
 8001862:	4985      	ldr	r1, [pc, #532]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b83      	ldr	r3, [pc, #524]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e184      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001894:	429a      	cmp	r2, r3
 8001896:	d908      	bls.n	80018aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001898:	4b78      	ldr	r3, [pc, #480]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	4975      	ldr	r1, [pc, #468]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d908      	bls.n	80018d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018c6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	496a      	ldr	r1, [pc, #424]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	4b64      	ldr	r3, [pc, #400]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d908      	bls.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018f4:	4b61      	ldr	r3, [pc, #388]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	495e      	ldr	r1, [pc, #376]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001902:	4313      	orrs	r3, r2
 8001904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d010      	beq.n	8001934 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	4b59      	ldr	r3, [pc, #356]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800191e:	429a      	cmp	r2, r3
 8001920:	d908      	bls.n	8001934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001922:	4b56      	ldr	r3, [pc, #344]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4953      	ldr	r1, [pc, #332]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001930:	4313      	orrs	r3, r2
 8001932:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	4b4d      	ldr	r3, [pc, #308]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	429a      	cmp	r2, r3
 800194e:	d908      	bls.n	8001962 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001950:	4b4a      	ldr	r3, [pc, #296]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f023 020f 	bic.w	r2, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4947      	ldr	r1, [pc, #284]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800195e:	4313      	orrs	r3, r2
 8001960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d055      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4940      	ldr	r1, [pc, #256]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800197c:	4313      	orrs	r3, r2
 800197e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d107      	bne.n	8001998 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001988:	4b3c      	ldr	r3, [pc, #240]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d121      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0f6      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a0:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0ea      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019b8:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0de      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0d6      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f023 0207 	bic.w	r2, r3, #7
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4925      	ldr	r1, [pc, #148]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ea:	f7fe ff3b 	bl	8000864 <HAL_GetTick>
 80019ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7fe ff37 	bl	8000864 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0be      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d1eb      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d208      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d214      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 020f 	bic.w	r2, r3, #15
 8001a5e:	4906      	ldr	r1, [pc, #24]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e086      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
 8001a78:	52002000 	.word	0x52002000
 8001a7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d208      	bcs.n	8001aae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	4939      	ldr	r1, [pc, #228]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d208      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	492e      	ldr	r1, [pc, #184]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d208      	bcs.n	8001b0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4922      	ldr	r1, [pc, #136]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d208      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b26:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4917      	ldr	r1, [pc, #92]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b38:	f000 f834 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	4912      	ldr	r1, [pc, #72]	@ (8001b94 <HAL_RCC_ClockConfig+0x35c>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <HAL_RCC_ClockConfig+0x35c>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_RCC_ClockConfig+0x360>)
 8001b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x364>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_ClockConfig+0x368>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fe28 	bl	80007d0 <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	58024400 	.word	0x58024400
 8001b94:	08001f08 	.word	0x08001f08
 8001b98:	24000004 	.word	0x24000004
 8001b9c:	24000000 	.word	0x24000000
 8001ba0:	24000008 	.word	0x24000008

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001baa:	4bb3      	ldr	r3, [pc, #716]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bb2:	2b18      	cmp	r3, #24
 8001bb4:	f200 8155 	bhi.w	8001e62 <HAL_RCC_GetSysClockFreq+0x2be>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001c25 	.word	0x08001c25
 8001bc4:	08001e63 	.word	0x08001e63
 8001bc8:	08001e63 	.word	0x08001e63
 8001bcc:	08001e63 	.word	0x08001e63
 8001bd0:	08001e63 	.word	0x08001e63
 8001bd4:	08001e63 	.word	0x08001e63
 8001bd8:	08001e63 	.word	0x08001e63
 8001bdc:	08001e63 	.word	0x08001e63
 8001be0:	08001c4b 	.word	0x08001c4b
 8001be4:	08001e63 	.word	0x08001e63
 8001be8:	08001e63 	.word	0x08001e63
 8001bec:	08001e63 	.word	0x08001e63
 8001bf0:	08001e63 	.word	0x08001e63
 8001bf4:	08001e63 	.word	0x08001e63
 8001bf8:	08001e63 	.word	0x08001e63
 8001bfc:	08001e63 	.word	0x08001e63
 8001c00:	08001c51 	.word	0x08001c51
 8001c04:	08001e63 	.word	0x08001e63
 8001c08:	08001e63 	.word	0x08001e63
 8001c0c:	08001e63 	.word	0x08001e63
 8001c10:	08001e63 	.word	0x08001e63
 8001c14:	08001e63 	.word	0x08001e63
 8001c18:	08001e63 	.word	0x08001e63
 8001c1c:	08001e63 	.word	0x08001e63
 8001c20:	08001c57 	.word	0x08001c57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c24:	4b94      	ldr	r3, [pc, #592]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c30:	4b91      	ldr	r3, [pc, #580]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	4a90      	ldr	r2, [pc, #576]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001c42:	e111      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c44:	4b8d      	ldr	r3, [pc, #564]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c46:	61bb      	str	r3, [r7, #24]
      break;
 8001c48:	e10e      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c4c:	61bb      	str	r3, [r7, #24]
      break;
 8001c4e:	e10b      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001c50:	4b8c      	ldr	r3, [pc, #560]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c52:	61bb      	str	r3, [r7, #24]
      break;
 8001c54:	e108      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c56:	4b88      	ldr	r3, [pc, #544]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001c60:	4b85      	ldr	r3, [pc, #532]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c6c:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001c76:	4b80      	ldr	r3, [pc, #512]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80e1 	beq.w	8001e5c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	f000 8083 	beq.w	8001da8 <HAL_RCC_GetSysClockFreq+0x204>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f200 80a1 	bhi.w	8001dec <HAL_RCC_GetSysClockFreq+0x248>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x114>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d056      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001cb6:	e099      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02d      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	4a6b      	ldr	r2, [pc, #428]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cee:	4b62      	ldr	r3, [pc, #392]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d02:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001d1e:	e087      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001e8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d32:	4b51      	ldr	r3, [pc, #324]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d46:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d62:	e065      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d76:	4b40      	ldr	r3, [pc, #256]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d8a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001da6:	e043      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001e94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dba:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dea:	e021      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e12:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	0a5b      	lsrs	r3, r3, #9
 8001e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001e5a:	e005      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
      break;
 8001e60:	e002      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001e62:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e64:	61bb      	str	r3, [r7, #24]
      break;
 8001e66:	bf00      	nop
  }

  return sysclockfreq;
 8001e68:	69bb      	ldr	r3, [r7, #24]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	03d09000 	.word	0x03d09000
 8001e80:	003d0900 	.word	0x003d0900
 8001e84:	017d7840 	.word	0x017d7840
 8001e88:	46000000 	.word	0x46000000
 8001e8c:	4c742400 	.word	0x4c742400
 8001e90:	4a742400 	.word	0x4a742400
 8001e94:	4bbebc20 	.word	0x4bbebc20

08001e98 <memset>:
 8001e98:	4402      	add	r2, r0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <memset+0xa>
 8001ea0:	4770      	bx	lr
 8001ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ea6:	e7f9      	b.n	8001e9c <memset+0x4>

08001ea8 <__libc_init_array>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8001ee0 <__libc_init_array+0x38>)
 8001eac:	4c0d      	ldr	r4, [pc, #52]	@ (8001ee4 <__libc_init_array+0x3c>)
 8001eae:	1b64      	subs	r4, r4, r5
 8001eb0:	10a4      	asrs	r4, r4, #2
 8001eb2:	2600      	movs	r6, #0
 8001eb4:	42a6      	cmp	r6, r4
 8001eb6:	d109      	bne.n	8001ecc <__libc_init_array+0x24>
 8001eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8001ee8 <__libc_init_array+0x40>)
 8001eba:	4c0c      	ldr	r4, [pc, #48]	@ (8001eec <__libc_init_array+0x44>)
 8001ebc:	f000 f818 	bl	8001ef0 <_init>
 8001ec0:	1b64      	subs	r4, r4, r5
 8001ec2:	10a4      	asrs	r4, r4, #2
 8001ec4:	2600      	movs	r6, #0
 8001ec6:	42a6      	cmp	r6, r4
 8001ec8:	d105      	bne.n	8001ed6 <__libc_init_array+0x2e>
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed0:	4798      	blx	r3
 8001ed2:	3601      	adds	r6, #1
 8001ed4:	e7ee      	b.n	8001eb4 <__libc_init_array+0xc>
 8001ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eda:	4798      	blx	r3
 8001edc:	3601      	adds	r6, #1
 8001ede:	e7f2      	b.n	8001ec6 <__libc_init_array+0x1e>
 8001ee0:	08001f18 	.word	0x08001f18
 8001ee4:	08001f18 	.word	0x08001f18
 8001ee8:	08001f18 	.word	0x08001f18
 8001eec:	08001f1c 	.word	0x08001f1c

08001ef0 <_init>:
 8001ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef2:	bf00      	nop
 8001ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef6:	bc08      	pop	{r3}
 8001ef8:	469e      	mov	lr, r3
 8001efa:	4770      	bx	lr

08001efc <_fini>:
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	bf00      	nop
 8001f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f02:	bc08      	pop	{r3}
 8001f04:	469e      	mov	lr, r3
 8001f06:	4770      	bx	lr

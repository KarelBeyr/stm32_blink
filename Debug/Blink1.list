
Blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005f58  08005f58  00006f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005fdc  08005fdc  00006fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08005fe0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000020c  24000064  08006044  00007064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000270  08006044  00007270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f7c1  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001dd0  00000000  00000000  00016853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a48  00000000  00000000  00018628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007e5  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003633b  00000000  00000000  00019855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e267  00000000  00000000  0004fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158f34  00000000  00000000  0005ddf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b6d2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ef8  00000000  00000000  001b6d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001b9c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005f40 	.word	0x08005f40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08005f40 	.word	0x08005f40

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b0:	f000 f9a6 	bl	8000a00 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fbac 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f82a 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f8de 	bl	800087c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 f890 	bl	80007e4 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dutyCycle < pwmWidth)
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <main+0x58>)
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <main+0x5c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d20d      	bcs.n	80006ec <main+0x40>
	  {
  	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2108      	movs	r1, #8
 80006d4:	480d      	ldr	r0, [pc, #52]	@ (800070c <main+0x60>)
 80006d6:	f000 ff95 	bl	8001604 <HAL_GPIO_WritePin>
	    HAL_Delay(pwmWidth - dutyCycle);
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <main+0x5c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <main+0x58>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fc24 	bl	8000f34 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2108      	movs	r1, #8
 80006f0:	4806      	ldr	r0, [pc, #24]	@ (800070c <main+0x60>)
 80006f2:	f000 ff87 	bl	8001604 <HAL_GPIO_WritePin>
	  HAL_Delay(dutyCycle);
 80006f6:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <main+0x58>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fc1a 	bl	8000f34 <HAL_Delay>
	  if (dutyCycle < pwmWidth)
 8000700:	e7e0      	b.n	80006c4 <main+0x18>
 8000702:	bf00      	nop
 8000704:	24000088 	.word	0x24000088
 8000708:	24000000 	.word	0x24000000
 800070c:	58020c00 	.word	0x58020c00

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	@ 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071a:	224c      	movs	r2, #76	@ 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 ff90 	bl	8005644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 ff8a 	bl	8005644 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000730:	2002      	movs	r0, #2
 8000732:	f000 ff9b 	bl	800166c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <SystemClock_Config+0xcc>)
 800073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073e:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <SystemClock_Config+0xcc>)
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000746:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <SystemClock_Config+0xcc>)
 8000748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <SystemClock_Config+0xd0>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076c:	bf00      	nop
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800077a:	d1f8      	bne.n	800076e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000780:	2301      	movs	r3, #1
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2340      	movs	r3, #64	@ 0x40
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffa5 	bl	80016e0 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800079c:	f000 f95c 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	233f      	movs	r3, #63	@ 0x3f
 80007a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b4:	2340      	movs	r3, #64	@ 0x40
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fbe5 	bl	8001f94 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d0:	f000 f942 	bl	8000a58 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3770      	adds	r7, #112	@ 0x70
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58000400 	.word	0x58000400
 80007e0:	58024800 	.word	0x58024800

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 80007ea:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <MX_USART3_UART_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 800082e:	f003 fd69 	bl	8004304 <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f90e 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000840:	f004 fdff 	bl	8005442 <HAL_UARTEx_SetTxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f905 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000852:	f004 fe34 	bl	80054be <HAL_UARTEx_SetRxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f8fc 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_USART3_UART_Init+0x90>)
 8000862:	f004 fdb5 	bl	80053d0 <HAL_UARTEx_DisableFifoMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f8f4 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2400008c 	.word	0x2400008c
 8000878:	40004800 	.word	0x40004800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_GPIO_Init+0xcc>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a2b      	ldr	r2, [pc, #172]	@ (8000948 <MX_GPIO_Init+0xcc>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	4a24      	ldr	r2, [pc, #144]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_GPIO_Init+0xcc>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2108      	movs	r1, #8
 80008f0:	4816      	ldr	r0, [pc, #88]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008f2:	f000 fe87 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f6:	2308      	movs	r3, #8
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	480f      	ldr	r0, [pc, #60]	@ (800094c <MX_GPIO_Init+0xd0>)
 800090e:	f000 fcc9 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4809      	ldr	r0, [pc, #36]	@ (8000950 <MX_GPIO_Init+0xd4>)
 800092a:	f000 fcbb 	bl	80012a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2028      	movs	r0, #40	@ 0x28
 8000934:	f000 fc09 	bl	800114a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000938:	2028      	movs	r0, #40	@ 0x28
 800093a:	f000 fc20 	bl	800117e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	58024400 	.word	0x58024400
 800094c:	58020c00 	.word	0x58020c00
 8000950:	58020800 	.word	0x58020800

08000954 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	@ 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000964:	d13c      	bne.n	80009e0 <HAL_GPIO_EXTI_Callback+0x8c>
  {
	//debounce logic
	uint32_t now = HAL_GetTick();
 8000966:	f000 fad9 	bl	8000f1c <HAL_GetTick>
 800096a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (now - last_debounce_time < 50)
 800096c:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x94>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b31      	cmp	r3, #49	@ 0x31
 8000976:	d932      	bls.n	80009de <HAL_GPIO_EXTI_Callback+0x8a>
	{
	 return;
	}
	last_debounce_time = now;
 8000978:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x94>)
 800097a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097c:	6013      	str	r3, [r2, #0]

	//logic to reset UI so that we start counting from zero if more than 2000ms user didn't press a button
	if (now - last_prg_time > 2000)
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x98>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800098a:	d902      	bls.n	8000992 <HAL_GPIO_EXTI_Callback+0x3e>
	{
	  dutyCycle = 0;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
	}
	dutyCycle++;
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800099c:	701a      	strb	r2, [r3, #0]
	if (dutyCycle > pwmWidth)
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d903      	bls.n	80009b2 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		dutyCycle = pwmWidth;
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	}
	last_prg_time = now;
 80009b2:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x98>)
 80009b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b6:	6013      	str	r3, [r2, #0]

    // Send duty cycle over UART
    char msg[32];
    int len = snprintf(msg, sizeof(msg), "Duty: %d\r\n", dutyCycle);
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	f107 0008 	add.w	r0, r7, #8
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009c2:	2120      	movs	r1, #32
 80009c4:	f004 fe08 	bl	80055d8 <sniprintf>
 80009c8:	62b8      	str	r0, [r7, #40]	@ 0x28
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80009ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	f107 0108 	add.w	r1, r7, #8
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80009d8:	f003 fce4 	bl	80043a4 <HAL_UART_Transmit>
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_EXTI_Callback+0x8c>
	 return;
 80009de:	bf00      	nop

    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
  }
}
 80009e0:	3730      	adds	r7, #48	@ 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	24000080 	.word	0x24000080
 80009ec:	24000084 	.word	0x24000084
 80009f0:	24000088 	.word	0x24000088
 80009f4:	24000000 	.word	0x24000000
 80009f8:	08005f58 	.word	0x08005f58
 80009fc:	2400008c 	.word	0x2400008c

08000a00 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a12:	f000 fbcf 	bl	80011b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a22:	231f      	movs	r3, #31
 8000a24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a26:	2387      	movs	r3, #135	@ 0x87
 8000a28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a42:	463b      	mov	r3, r7
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fbed 	bl	8001224 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a4a:	2004      	movs	r0, #4
 8000a4c:	f000 fbca 	bl	80011e4 <HAL_MPU_Enable>

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a70:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	58024400 	.word	0x58024400

08000a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	22c0      	movs	r2, #192	@ 0xc0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fdc3 	bl	8005644 <memset>
  if(huart->Instance==USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a27      	ldr	r2, [pc, #156]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d146      	bne.n	8000b56 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac8:	f04f 0202 	mov.w	r2, #2
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fde4 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000aea:	f7ff ffb5 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aee:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000af6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000afa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b44:	2307      	movs	r3, #7
 8000b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_UART_MspInit+0xd0>)
 8000b52:	f000 fba7 	bl	80012a4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	37e8      	adds	r7, #232	@ 0xe8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004800 	.word	0x40004800
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58020400 	.word	0x58020400

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f997 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bd2:	f000 fd30 	bl	8001636 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f004 fd22 	bl	8005654 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24080000 	.word	0x24080000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	24000120 	.word	0x24000120
 8000c44:	24000270 	.word	0x24000270

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <SystemInit+0x114>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	4a42      	ldr	r2, [pc, #264]	@ (8000d5c <SystemInit+0x114>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c5c:	4b40      	ldr	r3, [pc, #256]	@ (8000d60 <SystemInit+0x118>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 030f 	and.w	r3, r3, #15
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d807      	bhi.n	8000c78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c68:	4b3d      	ldr	r3, [pc, #244]	@ (8000d60 <SystemInit+0x118>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 030f 	bic.w	r3, r3, #15
 8000c70:	4a3b      	ldr	r2, [pc, #236]	@ (8000d60 <SystemInit+0x118>)
 8000c72:	f043 0307 	orr.w	r3, r3, #7
 8000c76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c78:	4b3a      	ldr	r3, [pc, #232]	@ (8000d64 <SystemInit+0x11c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a39      	ldr	r2, [pc, #228]	@ (8000d64 <SystemInit+0x11c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c84:	4b37      	ldr	r3, [pc, #220]	@ (8000d64 <SystemInit+0x11c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c8a:	4b36      	ldr	r3, [pc, #216]	@ (8000d64 <SystemInit+0x11c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4935      	ldr	r1, [pc, #212]	@ (8000d64 <SystemInit+0x11c>)
 8000c90:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <SystemInit+0x120>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c96:	4b32      	ldr	r3, [pc, #200]	@ (8000d60 <SystemInit+0x118>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <SystemInit+0x118>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 030f 	bic.w	r3, r3, #15
 8000caa:	4a2d      	ldr	r2, [pc, #180]	@ (8000d60 <SystemInit+0x118>)
 8000cac:	f043 0307 	orr.w	r3, r3, #7
 8000cb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <SystemInit+0x11c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <SystemInit+0x11c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <SystemInit+0x11c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <SystemInit+0x11c>)
 8000cc6:	4a29      	ldr	r2, [pc, #164]	@ (8000d6c <SystemInit+0x124>)
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cca:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <SystemInit+0x11c>)
 8000ccc:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <SystemInit+0x128>)
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <SystemInit+0x11c>)
 8000cd2:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <SystemInit+0x12c>)
 8000cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <SystemInit+0x11c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <SystemInit+0x11c>)
 8000cde:	4a25      	ldr	r2, [pc, #148]	@ (8000d74 <SystemInit+0x12c>)
 8000ce0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <SystemInit+0x11c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <SystemInit+0x11c>)
 8000cea:	4a22      	ldr	r2, [pc, #136]	@ (8000d74 <SystemInit+0x12c>)
 8000cec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <SystemInit+0x11c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <SystemInit+0x11c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d64 <SystemInit+0x11c>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <SystemInit+0x11c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <SystemInit+0x130>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <SystemInit+0x134>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d12:	d202      	bcs.n	8000d1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <SystemInit+0x138>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <SystemInit+0x11c>)
 8000d1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d113      	bne.n	8000d50 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <SystemInit+0x11c>)
 8000d2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <SystemInit+0x11c>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <SystemInit+0x13c>)
 8000d3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <SystemInit+0x11c>)
 8000d42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <SystemInit+0x11c>)
 8000d48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	52002000 	.word	0x52002000
 8000d64:	58024400 	.word	0x58024400
 8000d68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d6c:	02020200 	.word	0x02020200
 8000d70:	01ff0000 	.word	0x01ff0000
 8000d74:	01010280 	.word	0x01010280
 8000d78:	5c001000 	.word	0x5c001000
 8000d7c:	ffff0000 	.word	0xffff0000
 8000d80:	51008108 	.word	0x51008108
 8000d84:	52004000 	.word	0x52004000

08000d88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <ExitRun0Mode+0x2c>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <ExitRun0Mode+0x2c>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d98:	bf00      	nop
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <ExitRun0Mode+0x2c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	58024800 	.word	0x58024800

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000df4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000dbc:	f7ff ffe4 	bl	8000d88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff ff42 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f004 fc39 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fc5d 	bl	80006ac <main>
  bx  lr
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dfc:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000e00:	08005fe0 	.word	0x08005fe0
  ldr r2, =_sbss
 8000e04:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000e08:	24000270 	.word	0x24000270

08000e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC3_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f98c 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e1c:	f001 fa70 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	4913      	ldr	r1, [pc, #76]	@ (8000e7c <HAL_Init+0x6c>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <HAL_Init+0x68>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	4a0e      	ldr	r2, [pc, #56]	@ (8000e7c <HAL_Init+0x6c>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	4a0b      	ldr	r2, [pc, #44]	@ (8000e80 <HAL_Init+0x70>)
 8000e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e54:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <HAL_Init+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 f814 	bl	8000e88 <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e002      	b.n	8000e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6a:	f7ff fdfb 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	08005f64 	.word	0x08005f64
 8000e80:	24000008 	.word	0x24000008
 8000e84:	24000004 	.word	0x24000004

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_InitTick+0x60>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e021      	b.n	8000ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_InitTick+0x64>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f971 	bl	800119a <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f93b 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_InitTick+0x68>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24000010 	.word	0x24000010
 8000eec:	24000004 	.word	0x24000004
 8000ef0:	2400000c 	.word	0x2400000c

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	24000010 	.word	0x24000010
 8000f18:	24000124 	.word	0x24000124

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	24000124 	.word	0x24000124

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24000010 	.word	0x24000010

08000f7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetREVID+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	0c1b      	lsrs	r3, r3, #16
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	5c001000 	.word	0x5c001000

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	05fa0000 	.word	0x05fa0000

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	@ (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff29 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff40 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff33 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa4 	bl	80010f0 <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011b8:	f3bf 8f5f 	dmb	sy
}
 80011bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <HAL_MPU_Disable+0x28>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <HAL_MPU_Disable+0x28>)
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011ca:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_MPU_Disable+0x2c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	e000ed90 	.word	0xe000ed90

080011e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_MPU_Enable+0x38>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_MPU_Enable+0x3c>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <HAL_MPU_Enable+0x3c>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001200:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001202:	f3bf 8f4f 	dsb	sy
}
 8001206:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001208:	f3bf 8f6f 	isb	sy
}
 800120c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed90 	.word	0xe000ed90
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	785a      	ldrb	r2, [r3, #1]
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001232:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <HAL_MPU_ConfigRegion+0x7c>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001240:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7adb      	ldrb	r3, [r3, #11]
 8001252:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001254:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7a9b      	ldrb	r3, [r3, #10]
 800125a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800125c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7b5b      	ldrb	r3, [r3, #13]
 8001262:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001264:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7b9b      	ldrb	r3, [r3, #14]
 800126a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800126c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7bdb      	ldrb	r3, [r3, #15]
 8001272:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001274:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7a5b      	ldrb	r3, [r3, #9]
 800127a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800127c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a1b      	ldrb	r3, [r3, #8]
 8001282:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001284:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800128e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001290:	6113      	str	r3, [r2, #16]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed90 	.word	0xe000ed90

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012b2:	4b89      	ldr	r3, [pc, #548]	@ (80014d8 <HAL_GPIO_Init+0x234>)
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012b6:	e194      	b.n	80015e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8186 	beq.w	80015dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <HAL_GPIO_Init+0x44>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b03      	cmp	r3, #3
 8001354:	d017      	beq.n	8001386 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d123      	bne.n	80013da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	69b9      	ldr	r1, [r7, #24]
 80013d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0203 	and.w	r2, r3, #3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80e0 	beq.w	80015dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x238>)
 800141e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001422:	4a2e      	ldr	r2, [pc, #184]	@ (80014dc <HAL_GPIO_Init+0x238>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_GPIO_Init+0x238>)
 800142e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a29      	ldr	r2, [pc, #164]	@ (80014e0 <HAL_GPIO_Init+0x23c>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <HAL_GPIO_Init+0x240>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d052      	beq.n	800150c <HAL_GPIO_Init+0x268>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1f      	ldr	r2, [pc, #124]	@ (80014e8 <HAL_GPIO_Init+0x244>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d031      	beq.n	80014d2 <HAL_GPIO_Init+0x22e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <HAL_GPIO_Init+0x248>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d02b      	beq.n	80014ce <HAL_GPIO_Init+0x22a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <HAL_GPIO_Init+0x24c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d025      	beq.n	80014ca <HAL_GPIO_Init+0x226>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <HAL_GPIO_Init+0x250>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01f      	beq.n	80014c6 <HAL_GPIO_Init+0x222>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <HAL_GPIO_Init+0x254>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x21e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a1a      	ldr	r2, [pc, #104]	@ (80014fc <HAL_GPIO_Init+0x258>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x21a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_GPIO_Init+0x25c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x216>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <HAL_GPIO_Init+0x260>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x212>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <HAL_GPIO_Init+0x264>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x20e>
 80014ae:	2309      	movs	r3, #9
 80014b0:	e02d      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014b2:	230a      	movs	r3, #10
 80014b4:	e02b      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014b6:	2308      	movs	r3, #8
 80014b8:	e029      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e027      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014be:	2306      	movs	r3, #6
 80014c0:	e025      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e023      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e021      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e01f      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e01d      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e01b      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014d6:	bf00      	nop
 80014d8:	58000080 	.word	0x58000080
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58000400 	.word	0x58000400
 80014e4:	58020000 	.word	0x58020000
 80014e8:	58020400 	.word	0x58020400
 80014ec:	58020800 	.word	0x58020800
 80014f0:	58020c00 	.word	0x58020c00
 80014f4:	58021000 	.word	0x58021000
 80014f8:	58021400 	.word	0x58021400
 80014fc:	58021800 	.word	0x58021800
 8001500:	58021c00 	.word	0x58021c00
 8001504:	58022000 	.word	0x58022000
 8001508:	58022400 	.word	0x58022400
 800150c:	2300      	movs	r3, #0
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151e:	4938      	ldr	r1, [pc, #224]	@ (8001600 <HAL_GPIO_Init+0x35c>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001552:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	3301      	adds	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f ae63 	bne.w	80012b8 <HAL_GPIO_Init+0x14>
  }
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3724      	adds	r7, #36	@ 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	58000400 	.word	0x58000400

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001644:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f979 	bl	8000954 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_PWREx_ConfigSupply+0x70>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b04      	cmp	r3, #4
 800167e:	d00a      	beq.n	8001696 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_PWREx_ConfigSupply+0x70>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e01f      	b.n	80016d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e01d      	b.n	80016d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_PWREx_ConfigSupply+0x70>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	490f      	ldr	r1, [pc, #60]	@ (80016dc <HAL_PWREx_ConfigSupply+0x70>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016a6:	f7ff fc39 	bl	8000f1c <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ac:	e009      	b.n	80016c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016ae:	f7ff fc35 	bl	8000f1c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016bc:	d901      	bls.n	80016c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e007      	b.n	80016d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_PWREx_ConfigSupply+0x70>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ce:	d1ee      	bne.n	80016ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	58024800 	.word	0x58024800

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f000 bc48 	b.w	8001f84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8088 	beq.w	8001812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001702:	4b99      	ldr	r3, [pc, #612]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800170c:	4b96      	ldr	r3, [pc, #600]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001714:	2b10      	cmp	r3, #16
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x48>
 8001718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171a:	2b18      	cmp	r3, #24
 800171c:	d111      	bne.n	8001742 <HAL_RCC_OscConfig+0x62>
 800171e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	4b8f      	ldr	r3, [pc, #572]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d06d      	beq.n	8001810 <HAL_RCC_OscConfig+0x130>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d169      	bne.n	8001810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	f000 bc21 	b.w	8001f84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x7a>
 800174c:	4b86      	ldr	r3, [pc, #536]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a85      	ldr	r2, [pc, #532]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e02e      	b.n	80017b8 <HAL_RCC_OscConfig+0xd8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x9c>
 8001762:	4b81      	ldr	r3, [pc, #516]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a80      	ldr	r2, [pc, #512]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b7e      	ldr	r3, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7d      	ldr	r2, [pc, #500]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xd8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xc0>
 8001786:	4b78      	ldr	r3, [pc, #480]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a77      	ldr	r2, [pc, #476]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a74      	ldr	r2, [pc, #464]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xd8>
 80017a0:	4b71      	ldr	r3, [pc, #452]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a70      	ldr	r2, [pc, #448]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6d      	ldr	r2, [pc, #436]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbac 	bl	8000f1c <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fba8 	bl	8000f1c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e3d4      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe8>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb98 	bl	8000f1c <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fb94 	bl	8000f1c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e3c0      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001802:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x110>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80ca 	beq.w	80019b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001820:	4b51      	ldr	r3, [pc, #324]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001828:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800182a:	4b4f      	ldr	r3, [pc, #316]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_RCC_OscConfig+0x166>
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	2b18      	cmp	r3, #24
 800183a:	d156      	bne.n	80018ea <HAL_RCC_OscConfig+0x20a>
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d151      	bne.n	80018ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001846:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x17e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e392      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800185e:	4b42      	ldr	r3, [pc, #264]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0219 	bic.w	r2, r3, #25
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	493f      	ldr	r1, [pc, #252]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb54 	bl	8000f1c <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fb50 	bl	8000f1c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e37c      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	f7ff fb71 	bl	8000f7c <HAL_GetREVID>
 800189a:	4603      	mov	r3, r0
 800189c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d817      	bhi.n	80018d4 <HAL_RCC_OscConfig+0x1f4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b40      	cmp	r3, #64	@ 0x40
 80018aa:	d108      	bne.n	80018be <HAL_RCC_OscConfig+0x1de>
 80018ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018bc:	e07a      	b.n	80019b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	031b      	lsls	r3, r3, #12
 80018cc:	4926      	ldr	r1, [pc, #152]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d2:	e06f      	b.n	80019b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	4921      	ldr	r1, [pc, #132]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e8:	e064      	b.n	80019b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d047      	beq.n	8001982 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0219 	bic.w	r2, r3, #25
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	491a      	ldr	r1, [pc, #104]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fb0a 	bl	8000f1c <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fb06 	bl	8000f1c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e332      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	f7ff fb27 	bl	8000f7c <HAL_GetREVID>
 800192e:	4603      	mov	r3, r0
 8001930:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001934:	4293      	cmp	r3, r2
 8001936:	d819      	bhi.n	800196c <HAL_RCC_OscConfig+0x28c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b40      	cmp	r3, #64	@ 0x40
 800193e:	d108      	bne.n	8001952 <HAL_RCC_OscConfig+0x272>
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194e:	6053      	str	r3, [r2, #4]
 8001950:	e030      	b.n	80019b4 <HAL_RCC_OscConfig+0x2d4>
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	4901      	ldr	r1, [pc, #4]	@ (8001968 <HAL_RCC_OscConfig+0x288>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
 8001966:	e025      	b.n	80019b4 <HAL_RCC_OscConfig+0x2d4>
 8001968:	58024400 	.word	0x58024400
 800196c:	4b9a      	ldr	r3, [pc, #616]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	4997      	ldr	r1, [pc, #604]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b95      	ldr	r3, [pc, #596]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a94      	ldr	r2, [pc, #592]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff fac5 	bl	8000f1c <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fac1 	bl	8000f1c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e2ed      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a8:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a9 	beq.w	8001b14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c2:	4b85      	ldr	r3, [pc, #532]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019cc:	4b82      	ldr	r3, [pc, #520]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d007      	beq.n	80019e8 <HAL_RCC_OscConfig+0x308>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b18      	cmp	r3, #24
 80019dc:	d13a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x374>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d135      	bne.n	8001a54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019e8:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x320>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b80      	cmp	r3, #128	@ 0x80
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2c1      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a00:	f7ff fabc 	bl	8000f7c <HAL_GetREVID>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d817      	bhi.n	8001a3e <HAL_RCC_OscConfig+0x35e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x348>
 8001a16:	4b70      	ldr	r3, [pc, #448]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a26:	e075      	b.n	8001b14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a28:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	069b      	lsls	r3, r3, #26
 8001a36:	4968      	ldr	r1, [pc, #416]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a3c:	e06a      	b.n	8001b14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a3e:	4b66      	ldr	r3, [pc, #408]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	4962      	ldr	r1, [pc, #392]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a52:	e05f      	b.n	8001b14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d042      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa58 	bl	8000f1c <HAL_GetTick>
 8001a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a70:	f7ff fa54 	bl	8000f1c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e280      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a82:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a8e:	f7ff fa75 	bl	8000f7c <HAL_GetREVID>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d817      	bhi.n	8001acc <HAL_RCC_OscConfig+0x3ec>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d108      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3d6>
 8001aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001aac:	4a4a      	ldr	r2, [pc, #296]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ab2:	6053      	str	r3, [r2, #4]
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0x434>
 8001ab6:	4b48      	ldr	r3, [pc, #288]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	069b      	lsls	r3, r3, #26
 8001ac4:	4944      	ldr	r1, [pc, #272]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
 8001aca:	e023      	b.n	8001b14 <HAL_RCC_OscConfig+0x434>
 8001acc:	4b42      	ldr	r3, [pc, #264]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	493f      	ldr	r1, [pc, #252]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa15 	bl	8000f1c <HAL_GetTick>
 8001af2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001af6:	f7ff fa11 	bl	8000f1c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e23d      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b08:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d036      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d019      	beq.n	8001b5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff f9f2 	bl	8000f1c <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f9ee 	bl	8000f1c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e21a      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x45c>
 8001b5a:	e018      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b60:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f9d8 	bl	8000f1c <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff f9d4 	bl	8000f1c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e200      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d039      	beq.n	8001c0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f9b5 	bl	8000f1c <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb6:	f7ff f9b1 	bl	8000f1c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1dd      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x4d6>
 8001bd4:	e01b      	b.n	8001c0e <HAL_RCC_OscConfig+0x52e>
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bdc:	4b9b      	ldr	r3, [pc, #620]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a9a      	ldr	r2, [pc, #616]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001be2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f998 	bl	8000f1c <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf0:	f7ff f994 	bl	8000f1c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1c0      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c02:	4b92      	ldr	r3, [pc, #584]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8081 	beq.w	8001d1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e50 <HAL_RCC_OscConfig+0x770>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a8b      	ldr	r2, [pc, #556]	@ (8001e50 <HAL_RCC_OscConfig+0x770>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c28:	f7ff f978 	bl	8000f1c <HAL_GetTick>
 8001c2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7ff f974 	bl	8000f1c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1a0      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c42:	4b83      	ldr	r3, [pc, #524]	@ (8001e50 <HAL_RCC_OscConfig+0x770>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x584>
 8001c56:	4b7d      	ldr	r3, [pc, #500]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x5e0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5a6>
 8001c6c:	4b77      	ldr	r3, [pc, #476]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c70:	4a76      	ldr	r2, [pc, #472]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c78:	4b74      	ldr	r3, [pc, #464]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a73      	ldr	r2, [pc, #460]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	e01c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x5e0>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5c8>
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a6e      	ldr	r2, [pc, #440]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a6b      	ldr	r2, [pc, #428]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x5e0>
 8001ca8:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	4a67      	ldr	r2, [pc, #412]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb4:	4b65      	ldr	r3, [pc, #404]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a64      	ldr	r2, [pc, #400]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f928 	bl	8000f1c <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f924 	bl	8000f1c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e14e      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce6:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0ee      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x5f0>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f912 	bl	8000f1c <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f90e 	bl	8000f1c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e138      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d12:	4b4e      	ldr	r3, [pc, #312]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ee      	bne.n	8001cfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 812d 	beq.w	8001f82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d28:	4b48      	ldr	r3, [pc, #288]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d30:	2b18      	cmp	r3, #24
 8001d32:	f000 80bd 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 809e 	bne.w	8001e7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b42      	ldr	r3, [pc, #264]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a41      	ldr	r2, [pc, #260]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f8e6 	bl	8000f1c <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f8e2 	bl	8000f1c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e10e      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d66:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d72:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d76:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <HAL_RCC_OscConfig+0x774>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	430a      	orrs	r2, r1
 8001d86:	4931      	ldr	r1, [pc, #196]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	3b01      	subs	r3, #1
 8001d92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	3b01      	subs	r3, #1
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001dbc:	4923      	ldr	r1, [pc, #140]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd2:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_RCC_OscConfig+0x778>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dda:	00d2      	lsls	r2, r2, #3
 8001ddc:	491b      	ldr	r1, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	f023 020c 	bic.w	r2, r3, #12
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4917      	ldr	r1, [pc, #92]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001df4:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	f023 0202 	bic.w	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e00:	4912      	ldr	r1, [pc, #72]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f86b 	bl	8000f1c <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e48:	e011      	b.n	8001e6e <HAL_RCC_OscConfig+0x78e>
 8001e4a:	bf00      	nop
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58024800 	.word	0x58024800
 8001e54:	fffffc0c 	.word	0xfffffc0c
 8001e58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f85e 	bl	8000f1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e08a      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x77c>
 8001e7a:	e082      	b.n	8001f82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a42      	ldr	r2, [pc, #264]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f848 	bl	8000f1c <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff f844 	bl	8000f1c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e070      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7b0>
 8001eae:	e068      	b.n	8001f82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001eb0:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eb6:	4b35      	ldr	r3, [pc, #212]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d031      	beq.n	8001f28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0203 	and.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d12a      	bne.n	8001f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d122      	bne.n	8001f28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d11a      	bne.n	8001f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0a5b      	lsrs	r3, r3, #9
 8001ef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d111      	bne.n	8001f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d108      	bne.n	8001f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0e1b      	lsrs	r3, r3, #24
 8001f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e02b      	b.n	8001f84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d01f      	beq.n	8001f82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f4e:	f7fe ffe5 	bl	8000f1c <HAL_GetTick>
 8001f52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f54:	bf00      	nop
 8001f56:	f7fe ffe1 	bl	8000f1c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d0f9      	beq.n	8001f56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_RCC_OscConfig+0x8b0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f6e:	00d2      	lsls	r2, r2, #3
 8001f70:	4906      	ldr	r1, [pc, #24]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_RCC_OscConfig+0x8ac>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3730      	adds	r7, #48	@ 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	ffff0007 	.word	0xffff0007

08001f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e19c      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b8a      	ldr	r3, [pc, #552]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b87      	ldr	r3, [pc, #540]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 020f 	bic.w	r2, r3, #15
 8001fbe:	4985      	ldr	r1, [pc, #532]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b83      	ldr	r3, [pc, #524]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e184      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d908      	bls.n	8002006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ff4:	4b78      	ldr	r3, [pc, #480]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4975      	ldr	r1, [pc, #468]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002002:	4313      	orrs	r3, r2
 8002004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	4b70      	ldr	r3, [pc, #448]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800201e:	429a      	cmp	r2, r3
 8002020:	d908      	bls.n	8002034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002022:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	496a      	ldr	r1, [pc, #424]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002030:	4313      	orrs	r3, r2
 8002032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	4b64      	ldr	r3, [pc, #400]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800204c:	429a      	cmp	r2, r3
 800204e:	d908      	bls.n	8002062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002050:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	495e      	ldr	r1, [pc, #376]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800205e:	4313      	orrs	r3, r2
 8002060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800207a:	429a      	cmp	r2, r3
 800207c:	d908      	bls.n	8002090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800207e:	4b56      	ldr	r3, [pc, #344]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4953      	ldr	r1, [pc, #332]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800208c:	4313      	orrs	r3, r2
 800208e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4b4d      	ldr	r3, [pc, #308]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d908      	bls.n	80020be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b4a      	ldr	r3, [pc, #296]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f023 020f 	bic.w	r2, r3, #15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4947      	ldr	r1, [pc, #284]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d055      	beq.n	8002176 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020ca:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4940      	ldr	r1, [pc, #256]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e4:	4b3c      	ldr	r3, [pc, #240]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d121      	bne.n	8002134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0f6      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020fc:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d115      	bne.n	8002134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0ea      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002114:	4b30      	ldr	r3, [pc, #192]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0de      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002124:	4b2c      	ldr	r3, [pc, #176]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0d6      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002134:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f023 0207 	bic.w	r2, r3, #7
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4925      	ldr	r1, [pc, #148]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002142:	4313      	orrs	r3, r2
 8002144:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002146:	f7fe fee9 	bl	8000f1c <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	e00a      	b.n	8002164 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7fe fee5 	bl	8000f1c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0be      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002164:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	429a      	cmp	r2, r3
 8002174:	d1eb      	bne.n	800214e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	429a      	cmp	r2, r3
 8002190:	d208      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f023 020f 	bic.w	r2, r3, #15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	490e      	ldr	r1, [pc, #56]	@ (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d214      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 020f 	bic.w	r2, r3, #15
 80021ba:	4906      	ldr	r1, [pc, #24]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <HAL_RCC_ClockConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e086      	b.n	80022e2 <HAL_RCC_ClockConfig+0x34e>
 80021d4:	52002000 	.word	0x52002000
 80021d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d208      	bcs.n	800220a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021f8:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4939      	ldr	r1, [pc, #228]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002206:	4313      	orrs	r3, r2
 8002208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002222:	429a      	cmp	r2, r3
 8002224:	d208      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	492e      	ldr	r1, [pc, #184]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002234:	4313      	orrs	r3, r2
 8002236:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002250:	429a      	cmp	r2, r3
 8002252:	d208      	bcs.n	8002266 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4922      	ldr	r1, [pc, #136]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002262:	4313      	orrs	r3, r2
 8002264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800227e:	429a      	cmp	r2, r3
 8002280:	d208      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4917      	ldr	r1, [pc, #92]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 8002290:	4313      	orrs	r3, r2
 8002292:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002294:	f000 f834 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	4912      	ldr	r1, [pc, #72]	@ (80022f0 <HAL_RCC_ClockConfig+0x35c>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_RCC_ClockConfig+0x358>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <HAL_RCC_ClockConfig+0x35c>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <HAL_RCC_ClockConfig+0x360>)
 80022ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022cc:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <HAL_RCC_ClockConfig+0x364>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <HAL_RCC_ClockConfig+0x368>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fdd6 	bl	8000e88 <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	58024400 	.word	0x58024400
 80022f0:	08005f64 	.word	0x08005f64
 80022f4:	24000008 	.word	0x24000008
 80022f8:	24000004 	.word	0x24000004
 80022fc:	2400000c 	.word	0x2400000c

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002306:	4bb3      	ldr	r3, [pc, #716]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800230e:	2b18      	cmp	r3, #24
 8002310:	f200 8155 	bhi.w	80025be <HAL_RCC_GetSysClockFreq+0x2be>
 8002314:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	08002381 	.word	0x08002381
 8002320:	080025bf 	.word	0x080025bf
 8002324:	080025bf 	.word	0x080025bf
 8002328:	080025bf 	.word	0x080025bf
 800232c:	080025bf 	.word	0x080025bf
 8002330:	080025bf 	.word	0x080025bf
 8002334:	080025bf 	.word	0x080025bf
 8002338:	080025bf 	.word	0x080025bf
 800233c:	080023a7 	.word	0x080023a7
 8002340:	080025bf 	.word	0x080025bf
 8002344:	080025bf 	.word	0x080025bf
 8002348:	080025bf 	.word	0x080025bf
 800234c:	080025bf 	.word	0x080025bf
 8002350:	080025bf 	.word	0x080025bf
 8002354:	080025bf 	.word	0x080025bf
 8002358:	080025bf 	.word	0x080025bf
 800235c:	080023ad 	.word	0x080023ad
 8002360:	080025bf 	.word	0x080025bf
 8002364:	080025bf 	.word	0x080025bf
 8002368:	080025bf 	.word	0x080025bf
 800236c:	080025bf 	.word	0x080025bf
 8002370:	080025bf 	.word	0x080025bf
 8002374:	080025bf 	.word	0x080025bf
 8002378:	080025bf 	.word	0x080025bf
 800237c:	080023b3 	.word	0x080023b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002380:	4b94      	ldr	r3, [pc, #592]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800238c:	4b91      	ldr	r3, [pc, #580]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	4a90      	ldr	r2, [pc, #576]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800239e:	e111      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023a0:	4b8d      	ldr	r3, [pc, #564]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023a2:	61bb      	str	r3, [r7, #24]
      break;
 80023a4:	e10e      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023a6:	4b8d      	ldr	r3, [pc, #564]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023a8:	61bb      	str	r3, [r7, #24]
      break;
 80023aa:	e10b      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023ac:	4b8c      	ldr	r3, [pc, #560]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023ae:	61bb      	str	r3, [r7, #24]
      break;
 80023b0:	e108      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023b2:	4b88      	ldr	r3, [pc, #544]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023bc:	4b85      	ldr	r3, [pc, #532]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023c8:	4b82      	ldr	r3, [pc, #520]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023d2:	4b80      	ldr	r3, [pc, #512]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80e1 	beq.w	80025b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	f000 8083 	beq.w	8002504 <HAL_RCC_GetSysClockFreq+0x204>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b02      	cmp	r3, #2
 8002402:	f200 80a1 	bhi.w	8002548 <HAL_RCC_GetSysClockFreq+0x248>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x114>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d056      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002412:	e099      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002414:	4b6f      	ldr	r3, [pc, #444]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02d      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002420:	4b6c      	ldr	r3, [pc, #432]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	4a6b      	ldr	r2, [pc, #428]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244a:	4b62      	ldr	r3, [pc, #392]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245a:	ed97 6a02 	vldr	s12, [r7, #8]
 800245e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800246e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800247a:	e087      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002486:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800248a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800248e:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800249e:	ed97 6a02 	vldr	s12, [r7, #8]
 80024a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024be:	e065      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80025ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80024ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d2:	4b40      	ldr	r3, [pc, #256]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002502:	e043      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800250e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80025f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002516:	4b2f      	ldr	r3, [pc, #188]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002526:	ed97 6a02 	vldr	s12, [r7, #8]
 800252a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800252e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800253a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800253e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002546:	e021      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255a:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256a:	ed97 6a02 	vldr	s12, [r7, #8]
 800256e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800257a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800257e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800258a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	0a5b      	lsrs	r3, r3, #9
 8002592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002596:	3301      	adds	r3, #1
 8002598:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80025a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b0:	ee17 3a90 	vmov	r3, s15
 80025b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025b6:	e005      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
      break;
 80025bc:	e002      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025c0:	61bb      	str	r3, [r7, #24]
      break;
 80025c2:	bf00      	nop
  }

  return sysclockfreq;
 80025c4:	69bb      	ldr	r3, [r7, #24]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	@ 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400
 80025d8:	03d09000 	.word	0x03d09000
 80025dc:	003d0900 	.word	0x003d0900
 80025e0:	017d7840 	.word	0x017d7840
 80025e4:	46000000 	.word	0x46000000
 80025e8:	4c742400 	.word	0x4c742400
 80025ec:	4a742400 	.word	0x4a742400
 80025f0:	4bbebc20 	.word	0x4bbebc20

080025f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025fa:	f7ff fe81 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x50>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490f      	ldr	r1, [pc, #60]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x54>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x50>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	4a09      	ldr	r2, [pc, #36]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x54>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a07      	ldr	r2, [pc, #28]	@ (800264c <HAL_RCC_GetHCLKFreq+0x58>)
 8002630:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002632:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_RCC_GetHCLKFreq+0x58>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400
 8002648:	08005f64 	.word	0x08005f64
 800264c:	24000008 	.word	0x24000008
 8002650:	24000004 	.word	0x24000004

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002658:	f7ff ffcc 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	@ (800267c <HAL_RCC_GetPCLK1Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	58024400 	.word	0x58024400
 800267c:	08005f64 	.word	0x08005f64

08002680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002684:	f7ff ffb6 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	58024400 	.word	0x58024400
 80026a8:	08005f64 	.word	0x08005f64

080026ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0ca      	sub	sp, #296	@ 0x128
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80026d0:	2500      	movs	r5, #0
 80026d2:	ea54 0305 	orrs.w	r3, r4, r5
 80026d6:	d049      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80026e2:	d02f      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80026e8:	d828      	bhi.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ee:	d01a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026f4:	d822      	bhi.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026fe:	d007      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002700:	e01c      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002702:	4bb8      	ldr	r3, [pc, #736]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	4ab7      	ldr	r2, [pc, #732]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800270e:	e01a      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002714:	3308      	adds	r3, #8
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f001 fc8f 	bl	800403c <RCCEx_PLL2_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002724:	e00f      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272a:	3328      	adds	r3, #40	@ 0x28
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fd36 	bl	80041a0 <RCCEx_PLL3_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800274e:	4ba5      	ldr	r3, [pc, #660]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002752:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800275c:	4aa1      	ldr	r2, [pc, #644]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275e:	430b      	orrs	r3, r1
 8002760:	6513      	str	r3, [r2, #80]	@ 0x50
 8002762:	e003      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002778:	f04f 0900 	mov.w	r9, #0
 800277c:	ea58 0309 	orrs.w	r3, r8, r9
 8002780:	d047      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	2b04      	cmp	r3, #4
 800278a:	d82a      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800278c:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027a9 	.word	0x080027a9
 8002798:	080027b7 	.word	0x080027b7
 800279c:	080027cd 	.word	0x080027cd
 80027a0:	080027eb 	.word	0x080027eb
 80027a4:	080027eb 	.word	0x080027eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a8:	4b8e      	ldr	r3, [pc, #568]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	4a8d      	ldr	r2, [pc, #564]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027b4:	e01a      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ba:	3308      	adds	r3, #8
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fc3c 	bl	800403c <RCCEx_PLL2_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ca:	e00f      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d0:	3328      	adds	r3, #40	@ 0x28
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fce3 	bl	80041a0 <RCCEx_PLL3_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027e0:	e004      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027e8:	e000      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b7b      	ldr	r3, [pc, #492]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f8:	f023 0107 	bic.w	r1, r3, #7
 80027fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	4a78      	ldr	r2, [pc, #480]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002804:	430b      	orrs	r3, r1
 8002806:	6513      	str	r3, [r2, #80]	@ 0x50
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800280e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800281e:	f04f 0b00 	mov.w	fp, #0
 8002822:	ea5a 030b 	orrs.w	r3, sl, fp
 8002826:	d04c      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002832:	d030      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002838:	d829      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800283a:	2bc0      	cmp	r3, #192	@ 0xc0
 800283c:	d02d      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800283e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002840:	d825      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002842:	2b80      	cmp	r3, #128	@ 0x80
 8002844:	d018      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002846:	2b80      	cmp	r3, #128	@ 0x80
 8002848:	d821      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800284e:	2b40      	cmp	r3, #64	@ 0x40
 8002850:	d007      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002852:	e01c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b63      	ldr	r3, [pc, #396]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	4a62      	ldr	r2, [pc, #392]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002860:	e01c      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002866:	3308      	adds	r3, #8
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fbe6 	bl	800403c <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800287c:	3328      	adds	r3, #40	@ 0x28
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fc8d 	bl	80041a0 <RCCEx_PLL3_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002894:	e002      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800289a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800289c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028a4:	4b4f      	ldr	r3, [pc, #316]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80028ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	4a4c      	ldr	r2, [pc, #304]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80028b8:	e003      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80028ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80028d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80028dc:	460b      	mov	r3, r1
 80028de:	4313      	orrs	r3, r2
 80028e0:	d053      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ee:	d035      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80028f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028f4:	d82e      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80028fa:	d031      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80028fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002900:	d828      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002906:	d01a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800290c:	d822      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002916:	d007      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002918:	e01c      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291a:	4b32      	ldr	r3, [pc, #200]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	4a31      	ldr	r2, [pc, #196]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002926:	e01c      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292c:	3308      	adds	r3, #8
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fb83 	bl	800403c <RCCEx_PLL2_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800293c:	e011      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800293e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002942:	3328      	adds	r3, #40	@ 0x28
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f001 fc2a 	bl	80041a0 <RCCEx_PLL3_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002952:	e006      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800295a:	e002      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800297a:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800297c:	430b      	orrs	r3, r1
 800297e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002980:	e003      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002996:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80029a4:	460b      	mov	r3, r1
 80029a6:	4313      	orrs	r3, r2
 80029a8:	d056      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80029b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029b6:	d038      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029bc:	d831      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029c2:	d034      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80029c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029c8:	d82b      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029ce:	d01d      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029d4:	d825      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80029da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029e0:	e01f      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029e2:	bf00      	nop
 80029e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4ba2      	ldr	r3, [pc, #648]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029f4:	e01c      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fa:	3308      	adds	r3, #8
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fb1c 	bl	800403c <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a10:	3328      	adds	r3, #40	@ 0x28
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fbc3 	bl	80041a0 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a20:	e006      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a38:	4b8e      	ldr	r3, [pc, #568]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a48:	4a8a      	ldr	r2, [pc, #552]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002a64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002a6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002a72:	460b      	mov	r3, r1
 8002a74:	4313      	orrs	r3, r2
 8002a76:	d03a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	2b30      	cmp	r3, #48	@ 0x30
 8002a80:	d01f      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a82:	2b30      	cmp	r3, #48	@ 0x30
 8002a84:	d819      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d815      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d111      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a96:	4b77      	ldr	r3, [pc, #476]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9a:	4a76      	ldr	r2, [pc, #472]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002aa2:	e011      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 fac5 	bl	800403c <RCCEx_PLL2_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ab8:	e006      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ac0:	e002      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ad0:	4b68      	ldr	r3, [pc, #416]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	4a65      	ldr	r2, [pc, #404]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae4:	e003      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002afa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002b04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	d051      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b18:	d035      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b1e:	d82e      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b24:	d031      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b2a:	d828      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b30:	d01a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b36:	d822      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b40:	d007      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b42:	e01c      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b44:	4b4b      	ldr	r3, [pc, #300]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	4a4a      	ldr	r2, [pc, #296]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b50:	e01c      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b56:	3308      	adds	r3, #8
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fa6e 	bl	800403c <RCCEx_PLL2_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b66:	e011      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6c:	3328      	adds	r3, #40	@ 0x28
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 fb15 	bl	80041a0 <RCCEx_PLL3_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b94:	4b37      	ldr	r3, [pc, #220]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba2:	4a34      	ldr	r2, [pc, #208]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ba8:	e003      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002bc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	d056      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bdc:	d033      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002bde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be2:	d82c      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002be4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002be8:	d02f      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bee:	d826      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bf4:	d02b      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002bf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bfa:	d820      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c00:	d012      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c06:	d81a      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c10:	d115      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c16:	3308      	adds	r3, #8
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fa0e 	bl	800403c <RCCEx_PLL2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c26:	e015      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	3328      	adds	r3, #40	@ 0x28
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fab5 	bl	80041a0 <RCCEx_PLL3_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c44:	e006      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c6a:	4a02      	ldr	r2, [pc, #8]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	d055      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cac:	d033      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb2:	d82c      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb8:	d02f      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cbe:	d826      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cc4:	d02b      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cca:	d820      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd0:	d012      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd6:	d81a      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ce0:	d115      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f9a6 	bl	800403c <RCCEx_PLL2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cf6:	e015      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	3328      	adds	r3, #40	@ 0x28
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 fa4d 	bl	80041a0 <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d2c:	4ba3      	ldr	r3, [pc, #652]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d3c:	4a9f      	ldr	r2, [pc, #636]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d66:	460b      	mov	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	d037      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d76:	d00e      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d7c:	d816      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d86:	d111      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d88:	4b8c      	ldr	r3, [pc, #560]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	4a8b      	ldr	r2, [pc, #556]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d94:	e00f      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 f94c 	bl	800403c <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002daa:	e004      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a7b      	ldr	r2, [pc, #492]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002df2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	d039      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d81c      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e06:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e49 	.word	0x08002e49
 8002e10:	08002e1d 	.word	0x08002e1d
 8002e14:	08002e2b 	.word	0x08002e2b
 8002e18:	08002e49 	.word	0x08002e49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	4a66      	ldr	r2, [pc, #408]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e28:	e00f      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2e:	3308      	adds	r3, #8
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f902 	bl	800403c <RCCEx_PLL2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e3e:	e004      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e46:	e000      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e52:	4b5a      	ldr	r3, [pc, #360]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	f023 0103 	bic.w	r1, r3, #3
 8002e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e60:	4a56      	ldr	r2, [pc, #344]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e66:	e003      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f000 809f 	beq.w	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e92:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe f83d 	bl	8000f1c <HAL_GetTick>
 8002ea2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe f838 	bl	8000f1c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	@ 0x64
 8002eb6:	d903      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ed      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d179      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ed4:	4b39      	ldr	r3, [pc, #228]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ee0:	4053      	eors	r3, r2
 8002ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eea:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef6:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f02:	4b2e      	ldr	r3, [pc, #184]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f22:	d118      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fd fffa 	bl	8000f1c <HAL_GetTick>
 8002f28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2c:	e00d      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fd fff5 	bl	8000f1c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d903      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002f48:	e005      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0eb      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d129      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f6e:	d10e      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f80:	091a      	lsrs	r2, r3, #4
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6113      	str	r3, [r2, #16]
 8002f8c:	e005      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f98:	6113      	str	r3, [r2, #16]
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb0:	e00e      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58024800 	.word	0x58024800
 8002fc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f002 0301 	and.w	r3, r2, #1
 8002fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fe6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f000 8089 	beq.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff8:	2b28      	cmp	r3, #40	@ 0x28
 8002ffa:	d86b      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	080030dd 	.word	0x080030dd
 8003008:	080030d5 	.word	0x080030d5
 800300c:	080030d5 	.word	0x080030d5
 8003010:	080030d5 	.word	0x080030d5
 8003014:	080030d5 	.word	0x080030d5
 8003018:	080030d5 	.word	0x080030d5
 800301c:	080030d5 	.word	0x080030d5
 8003020:	080030d5 	.word	0x080030d5
 8003024:	080030a9 	.word	0x080030a9
 8003028:	080030d5 	.word	0x080030d5
 800302c:	080030d5 	.word	0x080030d5
 8003030:	080030d5 	.word	0x080030d5
 8003034:	080030d5 	.word	0x080030d5
 8003038:	080030d5 	.word	0x080030d5
 800303c:	080030d5 	.word	0x080030d5
 8003040:	080030d5 	.word	0x080030d5
 8003044:	080030bf 	.word	0x080030bf
 8003048:	080030d5 	.word	0x080030d5
 800304c:	080030d5 	.word	0x080030d5
 8003050:	080030d5 	.word	0x080030d5
 8003054:	080030d5 	.word	0x080030d5
 8003058:	080030d5 	.word	0x080030d5
 800305c:	080030d5 	.word	0x080030d5
 8003060:	080030d5 	.word	0x080030d5
 8003064:	080030dd 	.word	0x080030dd
 8003068:	080030d5 	.word	0x080030d5
 800306c:	080030d5 	.word	0x080030d5
 8003070:	080030d5 	.word	0x080030d5
 8003074:	080030d5 	.word	0x080030d5
 8003078:	080030d5 	.word	0x080030d5
 800307c:	080030d5 	.word	0x080030d5
 8003080:	080030d5 	.word	0x080030d5
 8003084:	080030dd 	.word	0x080030dd
 8003088:	080030d5 	.word	0x080030d5
 800308c:	080030d5 	.word	0x080030d5
 8003090:	080030d5 	.word	0x080030d5
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030d5 	.word	0x080030d5
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080030dd 	.word	0x080030dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ac:	3308      	adds	r3, #8
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 ffc3 	bl	800403c <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030bc:	e00f      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c2:	3328      	adds	r3, #40	@ 0x28
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 f86a 	bl	80041a0 <RCCEx_PLL3_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80030dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030e6:	4bbf      	ldr	r3, [pc, #764]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f4:	4abb      	ldr	r2, [pc, #748]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 0302 	and.w	r3, r2, #2
 8003110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800311a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d041      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800312a:	2b05      	cmp	r3, #5
 800312c:	d824      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800312e:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003181 	.word	0x08003181
 8003138:	0800314d 	.word	0x0800314d
 800313c:	08003163 	.word	0x08003163
 8003140:	08003181 	.word	0x08003181
 8003144:	08003181 	.word	0x08003181
 8003148:	08003181 	.word	0x08003181
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003150:	3308      	adds	r3, #8
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 ff71 	bl	800403c <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003160:	e00f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f001 f818 	bl	80041a0 <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800318a:	4b96      	ldr	r3, [pc, #600]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	f023 0107 	bic.w	r1, r3, #7
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003198:	4a92      	ldr	r2, [pc, #584]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6553      	str	r3, [r2, #84]	@ 0x54
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f002 0304 	and.w	r3, r2, #4
 80031b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4313      	orrs	r3, r2
 80031c6:	d044      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d825      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80031d4:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003229 	.word	0x08003229
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	0800320b 	.word	0x0800320b
 80031e8:	08003229 	.word	0x08003229
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003229 	.word	0x08003229
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f8:	3308      	adds	r3, #8
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 ff1d 	bl	800403c <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003208:	e00f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320e:	3328      	adds	r3, #40	@ 0x28
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ffc4 	bl	80041a0 <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003232:	4b6c      	ldr	r3, [pc, #432]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f023 0107 	bic.w	r1, r3, #7
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	4a68      	ldr	r2, [pc, #416]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6593      	str	r3, [r2, #88]	@ 0x58
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800324e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f002 0320 	and.w	r3, r2, #32
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800326c:	460b      	mov	r3, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	d055      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800327e:	d033      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003284:	d82c      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328a:	d02f      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d826      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003292:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003296:	d02b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003298:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800329c:	d820      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800329e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a2:	d012      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80032a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a8:	d81a      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80032ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032b2:	d115      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	3308      	adds	r3, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 febd 	bl	800403c <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	3328      	adds	r3, #40	@ 0x28
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 ff64 	bl	80041a0 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032de:	e00a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032e6:	e006      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032e8:	bf00      	nop
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032ec:	bf00      	nop
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330e:	4a35      	ldr	r2, [pc, #212]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6553      	str	r3, [r2, #84]	@ 0x54
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d058      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003346:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800334a:	d033      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800334c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003350:	d82c      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003356:	d02f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335c:	d826      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800335e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003362:	d02b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003368:	d820      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800336e:	d012      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003374:	d81a      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d022      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337e:	d115      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	3308      	adds	r3, #8
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fe57 	bl	800403c <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003394:	e015      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	3328      	adds	r3, #40	@ 0x28
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fefe 	bl	80041a0 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033aa:	e00a      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b2:	e006      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033b4:	bf00      	nop
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033da:	4a02      	ldr	r2, [pc, #8]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033dc:	430b      	orrs	r3, r1
 80033de:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e0:	e006      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003406:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d055      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003418:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800341c:	d033      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800341e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003422:	d82c      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003428:	d02f      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342e:	d826      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003430:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003434:	d02b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003436:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800343a:	d820      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003440:	d012      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003446:	d81a      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d022      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003450:	d115      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	3308      	adds	r3, #8
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fdee 	bl	800403c <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003466:	e015      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	3328      	adds	r3, #40	@ 0x28
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fe95 	bl	80041a0 <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800349c:	4ba1      	ldr	r3, [pc, #644]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034ac:	4a9d      	ldr	r2, [pc, #628]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 0308 	and.w	r3, r2, #8
 80034c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d01e      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe54 	bl	80041a0 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003504:	4b87      	ldr	r3, [pc, #540]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003514:	4a83      	ldr	r2, [pc, #524]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f002 0310 	and.w	r3, r2, #16
 8003526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003530:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003534:	460b      	mov	r3, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	d01e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003546:	d10c      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fe25 	bl	80041a0 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003562:	4b70      	ldr	r3, [pc, #448]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003572:	4a6c      	ldr	r2, [pc, #432]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003584:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800358e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d03e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a4:	d022      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80035a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035aa:	d81b      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d00b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80035b6:	e015      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	3308      	adds	r3, #8
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fd3b 	bl	800403c <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035cc:	e00f      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	3328      	adds	r3, #40	@ 0x28
 80035d4:	2102      	movs	r1, #2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fde2 	bl	80041a0 <RCCEx_PLL3_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035e2:	e004      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003606:	4a47      	ldr	r2, [pc, #284]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003608:	430b      	orrs	r3, r1
 800360a:	6593      	str	r3, [r2, #88]	@ 0x58
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003622:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003624:	2300      	movs	r3, #0
 8003626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800363e:	d01f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003644:	d818      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800364c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003650:	d007      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4a32      	ldr	r2, [pc, #200]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003660:	e00f      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	3328      	adds	r3, #40	@ 0x28
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fd98 	bl	80041a0 <RCCEx_PLL3_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003676:	e004      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368a:	4b26      	ldr	r3, [pc, #152]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6553      	str	r3, [r2, #84]	@ 0x54
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80036b8:	2300      	movs	r3, #0
 80036ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80036bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036c0:	460b      	mov	r3, r1
 80036c2:	4313      	orrs	r3, r2
 80036c4:	d034      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036e4:	e00e      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	3308      	adds	r3, #8
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fca4 	bl	800403c <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	4a02      	ldr	r2, [pc, #8]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371c:	430b      	orrs	r3, r1
 800371e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003722:	bf00      	nop
 8003724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800373c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800373e:	2300      	movs	r3, #0
 8003740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003742:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d00c      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fd23 	bl	80041a0 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003772:	663b      	str	r3, [r7, #96]	@ 0x60
 8003774:	2300      	movs	r3, #0
 8003776:	667b      	str	r3, [r7, #100]	@ 0x64
 8003778:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d038      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800378e:	d018      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003794:	d811      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800379a:	d014      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800379c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a0:	d80b      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80037a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037aa:	d106      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4bc3      	ldr	r3, [pc, #780]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	4ac2      	ldr	r2, [pc, #776]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c0:	e004      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d4:	4bb9      	ldr	r3, [pc, #740]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e4:	4ab5      	ldr	r2, [pc, #724]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003802:	2300      	movs	r3, #0
 8003804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003810:	4baa      	ldr	r3, [pc, #680]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	4aa7      	ldr	r2, [pc, #668]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003830:	653b      	str	r3, [r7, #80]	@ 0x50
 8003832:	2300      	movs	r3, #0
 8003834:	657b      	str	r3, [r7, #84]	@ 0x54
 8003836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003840:	4b9e      	ldr	r3, [pc, #632]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003850:	4a9a      	ldr	r2, [pc, #616]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003864:	2300      	movs	r3, #0
 8003866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003868:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003872:	4b92      	ldr	r3, [pc, #584]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003880:	4a8e      	ldr	r2, [pc, #568]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003892:	643b      	str	r3, [r7, #64]	@ 0x40
 8003894:	2300      	movs	r3, #0
 8003896:	647b      	str	r3, [r7, #68]	@ 0x44
 8003898:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a2:	4b86      	ldr	r3, [pc, #536]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	4a85      	ldr	r2, [pc, #532]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038ac:	6113      	str	r3, [r2, #16]
 80038ae:	4b83      	ldr	r3, [pc, #524]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b0:	6919      	ldr	r1, [r3, #16]
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038ba:	4a80      	ldr	r2, [pc, #512]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80038cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038ce:	2300      	movs	r3, #0
 80038d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038dc:	4b77      	ldr	r3, [pc, #476]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	4a74      	ldr	r2, [pc, #464]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
 8003902:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800390c:	4b6b      	ldr	r3, [pc, #428]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003910:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391c:	4a67      	ldr	r2, [pc, #412]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	2100      	movs	r1, #0
 800392c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003934:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d011      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003942:	3308      	adds	r3, #8
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fb78 	bl	800403c <RCCEx_PLL2_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	2100      	movs	r1, #0
 800396c:	6239      	str	r1, [r7, #32]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
 8003974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003978:	460b      	mov	r3, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	d011      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	3308      	adds	r3, #8
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fb58 	bl	800403c <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	2100      	movs	r1, #0
 80039ac:	61b9      	str	r1, [r7, #24]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d011      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	3308      	adds	r3, #8
 80039c4:	2102      	movs	r1, #2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb38 	bl	800403c <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	2100      	movs	r1, #0
 80039ec:	6139      	str	r1, [r7, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d011      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	3328      	adds	r3, #40	@ 0x28
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fbca 	bl	80041a0 <RCCEx_PLL3_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	d011      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a42:	3328      	adds	r3, #40	@ 0x28
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fbaa 	bl	80041a0 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	3328      	adds	r3, #40	@ 0x28
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb8a 	bl	80041a0 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003aa2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abc:	58024400 	.word	0x58024400

08003ac0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ac4:	f7fe fd96 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4904      	ldr	r1, [pc, #16]	@ (8003ae8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	08005f64 	.word	0x08005f64

08003aec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	@ 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003af4:	4ba1      	ldr	r3, [pc, #644]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003afe:	4b9f      	ldr	r3, [pc, #636]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	0b1b      	lsrs	r3, r3, #12
 8003b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b16:	4b99      	ldr	r3, [pc, #612]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8111 	beq.w	8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f000 8083 	beq.w	8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f200 80a1 	bhi.w	8003c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d056      	beq.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b56:	e099      	b.n	8003c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b58:	4b88      	ldr	r3, [pc, #544]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02d      	beq.n	8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b64:	4b85      	ldr	r3, [pc, #532]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	4a84      	ldr	r2, [pc, #528]	@ (8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bbe:	e087      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c02:	e065      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b59      	ldr	r3, [pc, #356]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c46:	e043      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b48      	ldr	r3, [pc, #288]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8a:	e021      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b37      	ldr	r3, [pc, #220]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf6:	ee17 2a90 	vmov	r2, s15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d24:	ee17 2a90 	vmov	r2, s15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d2c:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	0e1b      	lsrs	r3, r3, #24
 8003d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d52:	ee17 2a90 	vmov	r2, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d5a:	e008      	b.n	8003d6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
}
 8003d6e:	bf00      	nop
 8003d70:	3724      	adds	r7, #36	@ 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	03d09000 	.word	0x03d09000
 8003d84:	46000000 	.word	0x46000000
 8003d88:	4c742400 	.word	0x4c742400
 8003d8c:	4a742400 	.word	0x4a742400
 8003d90:	4bbebc20 	.word	0x4bbebc20

08003d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d9c:	4ba1      	ldr	r3, [pc, #644]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003da6:	4b9f      	ldr	r3, [pc, #636]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	0d1b      	lsrs	r3, r3, #20
 8003dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003db2:	4b9c      	ldr	r3, [pc, #624]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003dbe:	4b99      	ldr	r3, [pc, #612]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	08db      	lsrs	r3, r3, #3
 8003dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8111 	beq.w	8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	f000 8083 	beq.w	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f200 80a1 	bhi.w	8003f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d056      	beq.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dfe:	e099      	b.n	8003f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e00:	4b88      	ldr	r3, [pc, #544]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d02d      	beq.n	8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e0c:	4b85      	ldr	r3, [pc, #532]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	08db      	lsrs	r3, r3, #3
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	4a84      	ldr	r2, [pc, #528]	@ (8004028 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b7b      	ldr	r3, [pc, #492]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e66:	e087      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eaa:	e065      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ebe:	4b59      	ldr	r3, [pc, #356]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eee:	e043      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f02:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f32:	e021      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f46:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f78:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	0a5b      	lsrs	r3, r3, #9
 8003f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9e:	ee17 2a90 	vmov	r2, s15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fcc:	ee17 2a90 	vmov	r2, s15
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	0e1b      	lsrs	r3, r3, #24
 8003fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffa:	ee17 2a90 	vmov	r2, s15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
}
 8004016:	bf00      	nop
 8004018:	3724      	adds	r7, #36	@ 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
 8004028:	03d09000 	.word	0x03d09000
 800402c:	46000000 	.word	0x46000000
 8004030:	4c742400 	.word	0x4c742400
 8004034:	4a742400 	.word	0x4a742400
 8004038:	4bbebc20 	.word	0x4bbebc20

0800403c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800404a:	4b53      	ldr	r3, [pc, #332]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b03      	cmp	r3, #3
 8004054:	d101      	bne.n	800405a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e099      	b.n	800418e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800405a:	4b4f      	ldr	r3, [pc, #316]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004060:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004066:	f7fc ff59 	bl	8000f1c <HAL_GetTick>
 800406a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800406c:	e008      	b.n	8004080 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800406e:	f7fc ff55 	bl	8000f1c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e086      	b.n	800418e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004080:	4b45      	ldr	r3, [pc, #276]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800408c:	4b42      	ldr	r3, [pc, #264]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	031b      	lsls	r3, r3, #12
 800409a:	493f      	ldr	r1, [pc, #252]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800409c:	4313      	orrs	r3, r2
 800409e:	628b      	str	r3, [r1, #40]	@ 0x28
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	025b      	lsls	r3, r3, #9
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040d0:	4931      	ldr	r1, [pc, #196]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040d6:	4b30      	ldr	r3, [pc, #192]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	492d      	ldr	r1, [pc, #180]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f023 0220 	bic.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4928      	ldr	r1, [pc, #160]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <RCCEx_PLL2_Config+0x160>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	69d2      	ldr	r2, [r2, #28]
 8004112:	00d2      	lsls	r2, r2, #3
 8004114:	4920      	ldr	r1, [pc, #128]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800411a:	4b1f      	ldr	r3, [pc, #124]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	4a1e      	ldr	r2, [pc, #120]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004120:	f043 0310 	orr.w	r3, r3, #16
 8004124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800412c:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	4a19      	ldr	r2, [pc, #100]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004132:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004138:	e00f      	b.n	800415a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004140:	4b15      	ldr	r3, [pc, #84]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a14      	ldr	r2, [pc, #80]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800414c:	e005      	b.n	800415a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800414e:	4b12      	ldr	r3, [pc, #72]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004154:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004158:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800415a:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a0e      	ldr	r2, [pc, #56]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004160:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004166:	f7fc fed9 	bl	8000f1c <HAL_GetTick>
 800416a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800416c:	e008      	b.n	8004180 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800416e:	f7fc fed5 	bl	8000f1c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	58024400 	.word	0x58024400
 800419c:	ffff0007 	.word	0xffff0007

080041a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ae:	4b53      	ldr	r3, [pc, #332]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d101      	bne.n	80041be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e099      	b.n	80042f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041be:	4b4f      	ldr	r3, [pc, #316]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4e      	ldr	r2, [pc, #312]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ca:	f7fc fea7 	bl	8000f1c <HAL_GetTick>
 80041ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041d2:	f7fc fea3 	bl	8000f1c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e086      	b.n	80042f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041e4:	4b45      	ldr	r3, [pc, #276]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041f0:	4b42      	ldr	r3, [pc, #264]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	493f      	ldr	r1, [pc, #252]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	628b      	str	r3, [r1, #40]	@ 0x28
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	3b01      	subs	r3, #1
 800420a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	3b01      	subs	r3, #1
 8004214:	025b      	lsls	r3, r3, #9
 8004216:	b29b      	uxth	r3, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	3b01      	subs	r3, #1
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	3b01      	subs	r3, #1
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004234:	4931      	ldr	r1, [pc, #196]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800423a:	4b30      	ldr	r3, [pc, #192]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	492d      	ldr	r1, [pc, #180]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	4928      	ldr	r1, [pc, #160]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800425e:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800426a:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800426c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426e:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <RCCEx_PLL3_Config+0x160>)
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	69d2      	ldr	r2, [r2, #28]
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	4920      	ldr	r1, [pc, #128]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800427e:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004290:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4a19      	ldr	r2, [pc, #100]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004296:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800429a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800429c:	e00f      	b.n	80042be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042a4:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a14      	ldr	r2, [pc, #80]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042b0:	e005      	b.n	80042be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fc fe27 	bl	8000f1c <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042d2:	f7fc fe23 	bl	8000f1c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e006      	b.n	80042f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	58024400 	.word	0x58024400
 8004300:	ffff0007 	.word	0xffff0007

08004304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e042      	b.n	800439c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fc fbb5 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	@ 0x24
 8004332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fe1e 	bl	8004f90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8b3 	bl	80044c0 <UART_SetConfig>
 800435a:	4603      	mov	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e01b      	b.n	800439c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fe9d 	bl	80050d4 <UART_CheckIdleState>
 800439a:	4603      	mov	r3, r0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	@ 0x28
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d17b      	bne.n	80044b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_Transmit+0x26>
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e074      	b.n	80044b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2221      	movs	r2, #33	@ 0x21
 80043da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043de:	f7fc fd9d 	bl	8000f1c <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fc:	d108      	bne.n	8004410 <HAL_UART_Transmit+0x6c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e003      	b.n	8004418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004418:	e030      	b.n	800447c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 feff 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e03d      	b.n	80044b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004450:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	3302      	adds	r3, #2
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e007      	b.n	800446a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	3301      	adds	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1c8      	bne.n	800441a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	2140      	movs	r1, #64	@ 0x40
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fec8 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e006      	b.n	80044b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c4:	b092      	sub	sp, #72	@ 0x48
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	431a      	orrs	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4bbe      	ldr	r3, [pc, #760]	@ (80047e8 <UART_SetConfig+0x328>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4ab3      	ldr	r2, [pc, #716]	@ (80047ec <UART_SetConfig+0x32c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004528:	4313      	orrs	r3, r2
 800452a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	4baf      	ldr	r3, [pc, #700]	@ (80047f0 <UART_SetConfig+0x330>)
 8004534:	4013      	ands	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800453c:	430b      	orrs	r3, r1
 800453e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	f023 010f 	bic.w	r1, r3, #15
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4aa6      	ldr	r2, [pc, #664]	@ (80047f4 <UART_SetConfig+0x334>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d177      	bne.n	8004650 <UART_SetConfig+0x190>
 8004560:	4ba5      	ldr	r3, [pc, #660]	@ (80047f8 <UART_SetConfig+0x338>)
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004568:	2b28      	cmp	r3, #40	@ 0x28
 800456a:	d86d      	bhi.n	8004648 <UART_SetConfig+0x188>
 800456c:	a201      	add	r2, pc, #4	@ (adr r2, 8004574 <UART_SetConfig+0xb4>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004619 	.word	0x08004619
 8004578:	08004649 	.word	0x08004649
 800457c:	08004649 	.word	0x08004649
 8004580:	08004649 	.word	0x08004649
 8004584:	08004649 	.word	0x08004649
 8004588:	08004649 	.word	0x08004649
 800458c:	08004649 	.word	0x08004649
 8004590:	08004649 	.word	0x08004649
 8004594:	08004621 	.word	0x08004621
 8004598:	08004649 	.word	0x08004649
 800459c:	08004649 	.word	0x08004649
 80045a0:	08004649 	.word	0x08004649
 80045a4:	08004649 	.word	0x08004649
 80045a8:	08004649 	.word	0x08004649
 80045ac:	08004649 	.word	0x08004649
 80045b0:	08004649 	.word	0x08004649
 80045b4:	08004629 	.word	0x08004629
 80045b8:	08004649 	.word	0x08004649
 80045bc:	08004649 	.word	0x08004649
 80045c0:	08004649 	.word	0x08004649
 80045c4:	08004649 	.word	0x08004649
 80045c8:	08004649 	.word	0x08004649
 80045cc:	08004649 	.word	0x08004649
 80045d0:	08004649 	.word	0x08004649
 80045d4:	08004631 	.word	0x08004631
 80045d8:	08004649 	.word	0x08004649
 80045dc:	08004649 	.word	0x08004649
 80045e0:	08004649 	.word	0x08004649
 80045e4:	08004649 	.word	0x08004649
 80045e8:	08004649 	.word	0x08004649
 80045ec:	08004649 	.word	0x08004649
 80045f0:	08004649 	.word	0x08004649
 80045f4:	08004639 	.word	0x08004639
 80045f8:	08004649 	.word	0x08004649
 80045fc:	08004649 	.word	0x08004649
 8004600:	08004649 	.word	0x08004649
 8004604:	08004649 	.word	0x08004649
 8004608:	08004649 	.word	0x08004649
 800460c:	08004649 	.word	0x08004649
 8004610:	08004649 	.word	0x08004649
 8004614:	08004641 	.word	0x08004641
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461e:	e222      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004620:	2304      	movs	r3, #4
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e21e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004628:	2308      	movs	r3, #8
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e21a      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004630:	2310      	movs	r3, #16
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e216      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004638:	2320      	movs	r3, #32
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463e:	e212      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004640:	2340      	movs	r3, #64	@ 0x40
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004646:	e20e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004648:	2380      	movs	r3, #128	@ 0x80
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464e:	e20a      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a69      	ldr	r2, [pc, #420]	@ (80047fc <UART_SetConfig+0x33c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d130      	bne.n	80046bc <UART_SetConfig+0x1fc>
 800465a:	4b67      	ldr	r3, [pc, #412]	@ (80047f8 <UART_SetConfig+0x338>)
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	2b05      	cmp	r3, #5
 8004664:	d826      	bhi.n	80046b4 <UART_SetConfig+0x1f4>
 8004666:	a201      	add	r2, pc, #4	@ (adr r2, 800466c <UART_SetConfig+0x1ac>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	08004685 	.word	0x08004685
 8004670:	0800468d 	.word	0x0800468d
 8004674:	08004695 	.word	0x08004695
 8004678:	0800469d 	.word	0x0800469d
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046ad 	.word	0x080046ad
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e1ec      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e1e8      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e1e4      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e1e0      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80046a4:	2320      	movs	r3, #32
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e1dc      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80046ac:	2340      	movs	r3, #64	@ 0x40
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e1d8      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e1d4      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004800 <UART_SetConfig+0x340>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d130      	bne.n	8004728 <UART_SetConfig+0x268>
 80046c6:	4b4c      	ldr	r3, [pc, #304]	@ (80047f8 <UART_SetConfig+0x338>)
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d826      	bhi.n	8004720 <UART_SetConfig+0x260>
 80046d2:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <UART_SetConfig+0x218>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046f1 	.word	0x080046f1
 80046dc:	080046f9 	.word	0x080046f9
 80046e0:	08004701 	.word	0x08004701
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004719 	.word	0x08004719
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e1b6      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e1b2      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e1ae      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470e:	e1aa      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004710:	2320      	movs	r3, #32
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004716:	e1a6      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004718:	2340      	movs	r3, #64	@ 0x40
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471e:	e1a2      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004726:	e19e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a35      	ldr	r2, [pc, #212]	@ (8004804 <UART_SetConfig+0x344>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d130      	bne.n	8004794 <UART_SetConfig+0x2d4>
 8004732:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <UART_SetConfig+0x338>)
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	2b05      	cmp	r3, #5
 800473c:	d826      	bhi.n	800478c <UART_SetConfig+0x2cc>
 800473e:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <UART_SetConfig+0x284>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	0800475d 	.word	0x0800475d
 8004748:	08004765 	.word	0x08004765
 800474c:	0800476d 	.word	0x0800476d
 8004750:	08004775 	.word	0x08004775
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004785 	.word	0x08004785
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004762:	e180      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004764:	2304      	movs	r3, #4
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476a:	e17c      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800476c:	2308      	movs	r3, #8
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004772:	e178      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477a:	e174      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800477c:	2320      	movs	r3, #32
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004782:	e170      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004784:	2340      	movs	r3, #64	@ 0x40
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478a:	e16c      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004792:	e168      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1b      	ldr	r2, [pc, #108]	@ (8004808 <UART_SetConfig+0x348>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d142      	bne.n	8004824 <UART_SetConfig+0x364>
 800479e:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <UART_SetConfig+0x338>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d838      	bhi.n	800481c <UART_SetConfig+0x35c>
 80047aa:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <UART_SetConfig+0x2f0>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	08004815 	.word	0x08004815
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ce:	e14a      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d6:	e146      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047de:	e142      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e6:	e13e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80047e8:	cfff69f3 	.word	0xcfff69f3
 80047ec:	58000c00 	.word	0x58000c00
 80047f0:	11fff4ff 	.word	0x11fff4ff
 80047f4:	40011000 	.word	0x40011000
 80047f8:	58024400 	.word	0x58024400
 80047fc:	40004400 	.word	0x40004400
 8004800:	40004800 	.word	0x40004800
 8004804:	40004c00 	.word	0x40004c00
 8004808:	40005000 	.word	0x40005000
 800480c:	2320      	movs	r3, #32
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004812:	e128      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004814:	2340      	movs	r3, #64	@ 0x40
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e124      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e120      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4acb      	ldr	r2, [pc, #812]	@ (8004b58 <UART_SetConfig+0x698>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d176      	bne.n	800491c <UART_SetConfig+0x45c>
 800482e:	4bcb      	ldr	r3, [pc, #812]	@ (8004b5c <UART_SetConfig+0x69c>)
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004836:	2b28      	cmp	r3, #40	@ 0x28
 8004838:	d86c      	bhi.n	8004914 <UART_SetConfig+0x454>
 800483a:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <UART_SetConfig+0x380>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	080048e5 	.word	0x080048e5
 8004844:	08004915 	.word	0x08004915
 8004848:	08004915 	.word	0x08004915
 800484c:	08004915 	.word	0x08004915
 8004850:	08004915 	.word	0x08004915
 8004854:	08004915 	.word	0x08004915
 8004858:	08004915 	.word	0x08004915
 800485c:	08004915 	.word	0x08004915
 8004860:	080048ed 	.word	0x080048ed
 8004864:	08004915 	.word	0x08004915
 8004868:	08004915 	.word	0x08004915
 800486c:	08004915 	.word	0x08004915
 8004870:	08004915 	.word	0x08004915
 8004874:	08004915 	.word	0x08004915
 8004878:	08004915 	.word	0x08004915
 800487c:	08004915 	.word	0x08004915
 8004880:	080048f5 	.word	0x080048f5
 8004884:	08004915 	.word	0x08004915
 8004888:	08004915 	.word	0x08004915
 800488c:	08004915 	.word	0x08004915
 8004890:	08004915 	.word	0x08004915
 8004894:	08004915 	.word	0x08004915
 8004898:	08004915 	.word	0x08004915
 800489c:	08004915 	.word	0x08004915
 80048a0:	080048fd 	.word	0x080048fd
 80048a4:	08004915 	.word	0x08004915
 80048a8:	08004915 	.word	0x08004915
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004915 	.word	0x08004915
 80048b4:	08004915 	.word	0x08004915
 80048b8:	08004915 	.word	0x08004915
 80048bc:	08004915 	.word	0x08004915
 80048c0:	08004905 	.word	0x08004905
 80048c4:	08004915 	.word	0x08004915
 80048c8:	08004915 	.word	0x08004915
 80048cc:	08004915 	.word	0x08004915
 80048d0:	08004915 	.word	0x08004915
 80048d4:	08004915 	.word	0x08004915
 80048d8:	08004915 	.word	0x08004915
 80048dc:	08004915 	.word	0x08004915
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ea:	e0bc      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f2:	e0b8      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fa:	e0b4      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004902:	e0b0      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004904:	2320      	movs	r3, #32
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490a:	e0ac      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800490c:	2340      	movs	r3, #64	@ 0x40
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004912:	e0a8      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491a:	e0a4      	b.n	8004a66 <UART_SetConfig+0x5a6>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a8f      	ldr	r2, [pc, #572]	@ (8004b60 <UART_SetConfig+0x6a0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d130      	bne.n	8004988 <UART_SetConfig+0x4c8>
 8004926:	4b8d      	ldr	r3, [pc, #564]	@ (8004b5c <UART_SetConfig+0x69c>)
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	2b05      	cmp	r3, #5
 8004930:	d826      	bhi.n	8004980 <UART_SetConfig+0x4c0>
 8004932:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <UART_SetConfig+0x478>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004951 	.word	0x08004951
 800493c:	08004959 	.word	0x08004959
 8004940:	08004961 	.word	0x08004961
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	2300      	movs	r3, #0
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e086      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e082      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004966:	e07e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496e:	e07a      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004970:	2320      	movs	r3, #32
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e076      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004978:	2340      	movs	r3, #64	@ 0x40
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e072      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e06e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a75      	ldr	r2, [pc, #468]	@ (8004b64 <UART_SetConfig+0x6a4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d130      	bne.n	80049f4 <UART_SetConfig+0x534>
 8004992:	4b72      	ldr	r3, [pc, #456]	@ (8004b5c <UART_SetConfig+0x69c>)
 8004994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	2b05      	cmp	r3, #5
 800499c:	d826      	bhi.n	80049ec <UART_SetConfig+0x52c>
 800499e:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <UART_SetConfig+0x4e4>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049bd 	.word	0x080049bd
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	080049cd 	.word	0x080049cd
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e050      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049c4:	2304      	movs	r3, #4
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e04c      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049cc:	2308      	movs	r3, #8
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e048      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049d4:	2310      	movs	r3, #16
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e044      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049dc:	2320      	movs	r3, #32
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e040      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049e4:	2340      	movs	r3, #64	@ 0x40
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e03c      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049ec:	2380      	movs	r3, #128	@ 0x80
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e038      	b.n	8004a66 <UART_SetConfig+0x5a6>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5b      	ldr	r2, [pc, #364]	@ (8004b68 <UART_SetConfig+0x6a8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d130      	bne.n	8004a60 <UART_SetConfig+0x5a0>
 80049fe:	4b57      	ldr	r3, [pc, #348]	@ (8004b5c <UART_SetConfig+0x69c>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d826      	bhi.n	8004a58 <UART_SetConfig+0x598>
 8004a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a10 <UART_SetConfig+0x550>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a29 	.word	0x08004a29
 8004a14:	08004a31 	.word	0x08004a31
 8004a18:	08004a39 	.word	0x08004a39
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e01a      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e016      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e012      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a46:	e00e      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a48:	2320      	movs	r3, #32
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4e:	e00a      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a50:	2340      	movs	r3, #64	@ 0x40
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a56:	e006      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5e:	e002      	b.n	8004a66 <UART_SetConfig+0x5a6>
 8004a60:	2380      	movs	r3, #128	@ 0x80
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004b68 <UART_SetConfig+0x6a8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	f040 80f8 	bne.w	8004c62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	dc46      	bgt.n	8004b08 <UART_SetConfig+0x648>
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	f2c0 8082 	blt.w	8004b84 <UART_SetConfig+0x6c4>
 8004a80:	3b02      	subs	r3, #2
 8004a82:	2b1e      	cmp	r3, #30
 8004a84:	d87e      	bhi.n	8004b84 <UART_SetConfig+0x6c4>
 8004a86:	a201      	add	r2, pc, #4	@ (adr r2, 8004a8c <UART_SetConfig+0x5cc>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004b0f 	.word	0x08004b0f
 8004a90:	08004b85 	.word	0x08004b85
 8004a94:	08004b17 	.word	0x08004b17
 8004a98:	08004b85 	.word	0x08004b85
 8004a9c:	08004b85 	.word	0x08004b85
 8004aa0:	08004b85 	.word	0x08004b85
 8004aa4:	08004b27 	.word	0x08004b27
 8004aa8:	08004b85 	.word	0x08004b85
 8004aac:	08004b85 	.word	0x08004b85
 8004ab0:	08004b85 	.word	0x08004b85
 8004ab4:	08004b85 	.word	0x08004b85
 8004ab8:	08004b85 	.word	0x08004b85
 8004abc:	08004b85 	.word	0x08004b85
 8004ac0:	08004b85 	.word	0x08004b85
 8004ac4:	08004b37 	.word	0x08004b37
 8004ac8:	08004b85 	.word	0x08004b85
 8004acc:	08004b85 	.word	0x08004b85
 8004ad0:	08004b85 	.word	0x08004b85
 8004ad4:	08004b85 	.word	0x08004b85
 8004ad8:	08004b85 	.word	0x08004b85
 8004adc:	08004b85 	.word	0x08004b85
 8004ae0:	08004b85 	.word	0x08004b85
 8004ae4:	08004b85 	.word	0x08004b85
 8004ae8:	08004b85 	.word	0x08004b85
 8004aec:	08004b85 	.word	0x08004b85
 8004af0:	08004b85 	.word	0x08004b85
 8004af4:	08004b85 	.word	0x08004b85
 8004af8:	08004b85 	.word	0x08004b85
 8004afc:	08004b85 	.word	0x08004b85
 8004b00:	08004b85 	.word	0x08004b85
 8004b04:	08004b77 	.word	0x08004b77
 8004b08:	2b40      	cmp	r3, #64	@ 0x40
 8004b0a:	d037      	beq.n	8004b7c <UART_SetConfig+0x6bc>
 8004b0c:	e03a      	b.n	8004b84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b0e:	f7fe ffd7 	bl	8003ac0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b14:	e03c      	b.n	8004b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe ffe6 	bl	8003aec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b24:	e034      	b.n	8004b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b26:	f107 0318 	add.w	r3, r7, #24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff f932 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b34:	e02c      	b.n	8004b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <UART_SetConfig+0x69c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <UART_SetConfig+0x69c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	08db      	lsrs	r3, r3, #3
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	4a07      	ldr	r2, [pc, #28]	@ (8004b6c <UART_SetConfig+0x6ac>)
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b54:	e01c      	b.n	8004b90 <UART_SetConfig+0x6d0>
 8004b56:	bf00      	nop
 8004b58:	40011400 	.word	0x40011400
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	40007800 	.word	0x40007800
 8004b64:	40007c00 	.word	0x40007c00
 8004b68:	58000c00 	.word	0x58000c00
 8004b6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b9d      	ldr	r3, [pc, #628]	@ (8004de8 <UART_SetConfig+0x928>)
 8004b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b74:	e00c      	b.n	8004b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b76:	4b9d      	ldr	r3, [pc, #628]	@ (8004dec <UART_SetConfig+0x92c>)
 8004b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b7a:	e009      	b.n	8004b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b82:	e005      	b.n	8004b90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 81de 	beq.w	8004f54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	4a94      	ldr	r2, [pc, #592]	@ (8004df0 <UART_SetConfig+0x930>)
 8004b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004baa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d305      	bcc.n	8004bc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d903      	bls.n	8004bd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004bce:	e1c1      	b.n	8004f54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	60fa      	str	r2, [r7, #12]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	4a84      	ldr	r2, [pc, #528]	@ (8004df0 <UART_SetConfig+0x930>)
 8004bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2200      	movs	r2, #0
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bf2:	f7fb fbc5 	bl	8000380 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	020b      	lsls	r3, r1, #8
 8004c08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c0c:	0202      	lsls	r2, r0, #8
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	6849      	ldr	r1, [r1, #4]
 8004c12:	0849      	lsrs	r1, r1, #1
 8004c14:	2000      	movs	r0, #0
 8004c16:	460c      	mov	r4, r1
 8004c18:	4605      	mov	r5, r0
 8004c1a:	eb12 0804 	adds.w	r8, r2, r4
 8004c1e:	eb43 0905 	adc.w	r9, r3, r5
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	469a      	mov	sl, r3
 8004c2a:	4693      	mov	fp, r2
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	465b      	mov	r3, fp
 8004c30:	4640      	mov	r0, r8
 8004c32:	4649      	mov	r1, r9
 8004c34:	f7fb fba4 	bl	8000380 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c46:	d308      	bcc.n	8004c5a <UART_SetConfig+0x79a>
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4e:	d204      	bcs.n	8004c5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c56:	60da      	str	r2, [r3, #12]
 8004c58:	e17c      	b.n	8004f54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c60:	e178      	b.n	8004f54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6a:	f040 80c5 	bne.w	8004df8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004c6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	dc48      	bgt.n	8004d08 <UART_SetConfig+0x848>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	db7b      	blt.n	8004d72 <UART_SetConfig+0x8b2>
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d879      	bhi.n	8004d72 <UART_SetConfig+0x8b2>
 8004c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c84 <UART_SetConfig+0x7c4>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004d0f 	.word	0x08004d0f
 8004c88:	08004d17 	.word	0x08004d17
 8004c8c:	08004d73 	.word	0x08004d73
 8004c90:	08004d73 	.word	0x08004d73
 8004c94:	08004d1f 	.word	0x08004d1f
 8004c98:	08004d73 	.word	0x08004d73
 8004c9c:	08004d73 	.word	0x08004d73
 8004ca0:	08004d73 	.word	0x08004d73
 8004ca4:	08004d2f 	.word	0x08004d2f
 8004ca8:	08004d73 	.word	0x08004d73
 8004cac:	08004d73 	.word	0x08004d73
 8004cb0:	08004d73 	.word	0x08004d73
 8004cb4:	08004d73 	.word	0x08004d73
 8004cb8:	08004d73 	.word	0x08004d73
 8004cbc:	08004d73 	.word	0x08004d73
 8004cc0:	08004d73 	.word	0x08004d73
 8004cc4:	08004d3f 	.word	0x08004d3f
 8004cc8:	08004d73 	.word	0x08004d73
 8004ccc:	08004d73 	.word	0x08004d73
 8004cd0:	08004d73 	.word	0x08004d73
 8004cd4:	08004d73 	.word	0x08004d73
 8004cd8:	08004d73 	.word	0x08004d73
 8004cdc:	08004d73 	.word	0x08004d73
 8004ce0:	08004d73 	.word	0x08004d73
 8004ce4:	08004d73 	.word	0x08004d73
 8004ce8:	08004d73 	.word	0x08004d73
 8004cec:	08004d73 	.word	0x08004d73
 8004cf0:	08004d73 	.word	0x08004d73
 8004cf4:	08004d73 	.word	0x08004d73
 8004cf8:	08004d73 	.word	0x08004d73
 8004cfc:	08004d73 	.word	0x08004d73
 8004d00:	08004d73 	.word	0x08004d73
 8004d04:	08004d65 	.word	0x08004d65
 8004d08:	2b40      	cmp	r3, #64	@ 0x40
 8004d0a:	d02e      	beq.n	8004d6a <UART_SetConfig+0x8aa>
 8004d0c:	e031      	b.n	8004d72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0e:	f7fd fca1 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8004d12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d14:	e033      	b.n	8004d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d16:	f7fd fcb3 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 8004d1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d1c:	e02f      	b.n	8004d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fee2 	bl	8003aec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d2c:	e027      	b.n	8004d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d2e:	f107 0318 	add.w	r3, r7, #24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff f82e 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d3c:	e01f      	b.n	8004d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004df4 <UART_SetConfig+0x934>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <UART_SetConfig+0x934>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	4a24      	ldr	r2, [pc, #144]	@ (8004de8 <UART_SetConfig+0x928>)
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d5c:	e00f      	b.n	8004d7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004d5e:	4b22      	ldr	r3, [pc, #136]	@ (8004de8 <UART_SetConfig+0x928>)
 8004d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d62:	e00c      	b.n	8004d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d64:	4b21      	ldr	r3, [pc, #132]	@ (8004dec <UART_SetConfig+0x92c>)
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d68:	e009      	b.n	8004d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d70:	e005      	b.n	8004d7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80e7 	beq.w	8004f54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <UART_SetConfig+0x930>)
 8004d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d90:	461a      	mov	r2, r3
 8004d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d98:	005a      	lsls	r2, r3, #1
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d916      	bls.n	8004de0 <UART_SetConfig+0x920>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db8:	d212      	bcs.n	8004de0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f023 030f 	bic.w	r3, r3, #15
 8004dc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e0b9      	b.n	8004f54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004de6:	e0b5      	b.n	8004f54 <UART_SetConfig+0xa94>
 8004de8:	03d09000 	.word	0x03d09000
 8004dec:	003d0900 	.word	0x003d0900
 8004df0:	08005f74 	.word	0x08005f74
 8004df4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	dc49      	bgt.n	8004e94 <UART_SetConfig+0x9d4>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db7c      	blt.n	8004efe <UART_SetConfig+0xa3e>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d87a      	bhi.n	8004efe <UART_SetConfig+0xa3e>
 8004e08:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <UART_SetConfig+0x950>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e9b 	.word	0x08004e9b
 8004e14:	08004ea3 	.word	0x08004ea3
 8004e18:	08004eff 	.word	0x08004eff
 8004e1c:	08004eff 	.word	0x08004eff
 8004e20:	08004eab 	.word	0x08004eab
 8004e24:	08004eff 	.word	0x08004eff
 8004e28:	08004eff 	.word	0x08004eff
 8004e2c:	08004eff 	.word	0x08004eff
 8004e30:	08004ebb 	.word	0x08004ebb
 8004e34:	08004eff 	.word	0x08004eff
 8004e38:	08004eff 	.word	0x08004eff
 8004e3c:	08004eff 	.word	0x08004eff
 8004e40:	08004eff 	.word	0x08004eff
 8004e44:	08004eff 	.word	0x08004eff
 8004e48:	08004eff 	.word	0x08004eff
 8004e4c:	08004eff 	.word	0x08004eff
 8004e50:	08004ecb 	.word	0x08004ecb
 8004e54:	08004eff 	.word	0x08004eff
 8004e58:	08004eff 	.word	0x08004eff
 8004e5c:	08004eff 	.word	0x08004eff
 8004e60:	08004eff 	.word	0x08004eff
 8004e64:	08004eff 	.word	0x08004eff
 8004e68:	08004eff 	.word	0x08004eff
 8004e6c:	08004eff 	.word	0x08004eff
 8004e70:	08004eff 	.word	0x08004eff
 8004e74:	08004eff 	.word	0x08004eff
 8004e78:	08004eff 	.word	0x08004eff
 8004e7c:	08004eff 	.word	0x08004eff
 8004e80:	08004eff 	.word	0x08004eff
 8004e84:	08004eff 	.word	0x08004eff
 8004e88:	08004eff 	.word	0x08004eff
 8004e8c:	08004eff 	.word	0x08004eff
 8004e90:	08004ef1 	.word	0x08004ef1
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d02e      	beq.n	8004ef6 <UART_SetConfig+0xa36>
 8004e98:	e031      	b.n	8004efe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9a:	f7fd fbdb 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8004e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ea0:	e033      	b.n	8004f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea2:	f7fd fbed 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 8004ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ea8:	e02f      	b.n	8004f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fe1c 	bl	8003aec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb8:	e027      	b.n	8004f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eba:	f107 0318 	add.w	r3, r7, #24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe ff68 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec8:	e01f      	b.n	8004f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eca:	4b2d      	ldr	r3, [pc, #180]	@ (8004f80 <UART_SetConfig+0xac0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f80 <UART_SetConfig+0xac0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	4a28      	ldr	r2, [pc, #160]	@ (8004f84 <UART_SetConfig+0xac4>)
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ee8:	e00f      	b.n	8004f0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004eea:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <UART_SetConfig+0xac4>)
 8004eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eee:	e00c      	b.n	8004f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ef0:	4b25      	ldr	r3, [pc, #148]	@ (8004f88 <UART_SetConfig+0xac8>)
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ef4:	e009      	b.n	8004f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004efc:	e005      	b.n	8004f0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f08:	bf00      	nop
    }

    if (pclk != 0U)
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d021      	beq.n	8004f54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	4a1d      	ldr	r2, [pc, #116]	@ (8004f8c <UART_SetConfig+0xacc>)
 8004f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	441a      	add	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d909      	bls.n	8004f4e <UART_SetConfig+0xa8e>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f40:	d205      	bcs.n	8004f4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	e002      	b.n	8004f54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f70:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3748      	adds	r7, #72	@ 0x48
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400
 8004f84:	03d09000 	.word	0x03d09000
 8004f88:	003d0900 	.word	0x003d0900
 8004f8c:	08005f74 	.word	0x08005f74

08004f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01a      	beq.n	80050a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800508e:	d10a      	bne.n	80050a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  }
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b098      	sub	sp, #96	@ 0x60
 80050d8:	af02      	add	r7, sp, #8
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050e4:	f7fb ff1a 	bl	8000f1c <HAL_GetTick>
 80050e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d12f      	bne.n	8005158 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005100:	2200      	movs	r2, #0
 8005102:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f88e 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d022      	beq.n	8005158 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005126:	653b      	str	r3, [r7, #80]	@ 0x50
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005130:	647b      	str	r3, [r7, #68]	@ 0x44
 8005132:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800513e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e063      	b.n	8005220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d149      	bne.n	80051fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005166:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516e:	2200      	movs	r2, #0
 8005170:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f857 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d03c      	beq.n	80051fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	623b      	str	r3, [r7, #32]
   return(result);
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d2:	61fa      	str	r2, [r7, #28]
 80051d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	69b9      	ldr	r1, [r7, #24]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	617b      	str	r3, [r7, #20]
   return(result);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e012      	b.n	8005220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3758      	adds	r7, #88	@ 0x58
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005238:	e04f      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d04b      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fb fe6b 	bl	8000f1c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <UART_WaitOnFlagUntilTimeout+0x30>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e04e      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d037      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b80      	cmp	r3, #128	@ 0x80
 800526e:	d034      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d031      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d110      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2208      	movs	r2, #8
 800528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f839 	bl	8005304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2208      	movs	r2, #8
 8005296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e029      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b4:	d111      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f81f 	bl	8005304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e00f      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d0a0      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b095      	sub	sp, #84	@ 0x54
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800532a:	643b      	str	r3, [r7, #64]	@ 0x40
 800532c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e6      	bne.n	800530c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	61fb      	str	r3, [r7, #28]
   return(result);
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <UART_EndRxTransfer+0xc8>)
 8005352:	4013      	ands	r3, r2
 8005354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800535e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d118      	bne.n	80053ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	60bb      	str	r3, [r7, #8]
   return(result);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 0310 	bic.w	r3, r3, #16
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6979      	ldr	r1, [r7, #20]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	613b      	str	r3, [r7, #16]
   return(result);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80053c0:	bf00      	nop
 80053c2:	3754      	adds	r7, #84	@ 0x54
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	effffffe 	.word	0xeffffffe

080053d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e027      	b.n	8005436 <HAL_UARTEx_DisableFifoMode+0x66>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2224      	movs	r2, #36	@ 0x24
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005414:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005456:	2302      	movs	r3, #2
 8005458:	e02d      	b.n	80054b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	@ 0x24
 8005466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f850 	bl	800553c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e02d      	b.n	8005532 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	@ 0x24
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f812 	bl	800553c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800555c:	e031      	b.n	80055c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800555e:	2310      	movs	r3, #16
 8005560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005562:	2310      	movs	r3, #16
 8005564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	0e5b      	lsrs	r3, r3, #25
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	0f5b      	lsrs	r3, r3, #29
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	7b3a      	ldrb	r2, [r7, #12]
 800558a:	4911      	ldr	r1, [pc, #68]	@ (80055d0 <UARTEx_SetNbDataToProcess+0x94>)
 800558c:	5c8a      	ldrb	r2, [r1, r2]
 800558e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005592:	7b3a      	ldrb	r2, [r7, #12]
 8005594:	490f      	ldr	r1, [pc, #60]	@ (80055d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005598:	fb93 f3f2 	sdiv	r3, r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	7b7a      	ldrb	r2, [r7, #13]
 80055a8:	4909      	ldr	r1, [pc, #36]	@ (80055d0 <UARTEx_SetNbDataToProcess+0x94>)
 80055aa:	5c8a      	ldrb	r2, [r1, r2]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055b0:	7b7a      	ldrb	r2, [r7, #13]
 80055b2:	4908      	ldr	r1, [pc, #32]	@ (80055d4 <UARTEx_SetNbDataToProcess+0x98>)
 80055b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	08005f8c 	.word	0x08005f8c
 80055d4:	08005f94 	.word	0x08005f94

080055d8 <sniprintf>:
 80055d8:	b40c      	push	{r2, r3}
 80055da:	b530      	push	{r4, r5, lr}
 80055dc:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <sniprintf+0x68>)
 80055de:	1e0c      	subs	r4, r1, #0
 80055e0:	681d      	ldr	r5, [r3, #0]
 80055e2:	b09d      	sub	sp, #116	@ 0x74
 80055e4:	da08      	bge.n	80055f8 <sniprintf+0x20>
 80055e6:	238b      	movs	r3, #139	@ 0x8b
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f04f 30ff 	mov.w	r0, #4294967295
 80055ee:	b01d      	add	sp, #116	@ 0x74
 80055f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f4:	b002      	add	sp, #8
 80055f6:	4770      	bx	lr
 80055f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80055fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005606:	bf14      	ite	ne
 8005608:	f104 33ff 	addne.w	r3, r4, #4294967295
 800560c:	4623      	moveq	r3, r4
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	9307      	str	r3, [sp, #28]
 8005612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005616:	9002      	str	r0, [sp, #8]
 8005618:	9006      	str	r0, [sp, #24]
 800561a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800561e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005620:	ab21      	add	r3, sp, #132	@ 0x84
 8005622:	a902      	add	r1, sp, #8
 8005624:	4628      	mov	r0, r5
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	f000 f994 	bl	8005954 <_svfiprintf_r>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	bfbc      	itt	lt
 8005630:	238b      	movlt	r3, #139	@ 0x8b
 8005632:	602b      	strlt	r3, [r5, #0]
 8005634:	2c00      	cmp	r4, #0
 8005636:	d0da      	beq.n	80055ee <sniprintf+0x16>
 8005638:	9b02      	ldr	r3, [sp, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e7d6      	b.n	80055ee <sniprintf+0x16>
 8005640:	24000014 	.word	0x24000014

08005644 <memset>:
 8005644:	4402      	add	r2, r0
 8005646:	4603      	mov	r3, r0
 8005648:	4293      	cmp	r3, r2
 800564a:	d100      	bne.n	800564e <memset+0xa>
 800564c:	4770      	bx	lr
 800564e:	f803 1b01 	strb.w	r1, [r3], #1
 8005652:	e7f9      	b.n	8005648 <memset+0x4>

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	@ (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	24000014 	.word	0x24000014

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4d0d      	ldr	r5, [pc, #52]	@ (8005698 <__libc_init_array+0x38>)
 8005664:	4c0d      	ldr	r4, [pc, #52]	@ (800569c <__libc_init_array+0x3c>)
 8005666:	1b64      	subs	r4, r4, r5
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	2600      	movs	r6, #0
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	4d0b      	ldr	r5, [pc, #44]	@ (80056a0 <__libc_init_array+0x40>)
 8005672:	4c0c      	ldr	r4, [pc, #48]	@ (80056a4 <__libc_init_array+0x44>)
 8005674:	f000 fc64 	bl	8005f40 <_init>
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	2600      	movs	r6, #0
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08005fd8 	.word	0x08005fd8
 800569c:	08005fd8 	.word	0x08005fd8
 80056a0:	08005fd8 	.word	0x08005fd8
 80056a4:	08005fdc 	.word	0x08005fdc

080056a8 <__retarget_lock_acquire_recursive>:
 80056a8:	4770      	bx	lr

080056aa <__retarget_lock_release_recursive>:
 80056aa:	4770      	bx	lr

080056ac <_free_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4605      	mov	r5, r0
 80056b0:	2900      	cmp	r1, #0
 80056b2:	d041      	beq.n	8005738 <_free_r+0x8c>
 80056b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b8:	1f0c      	subs	r4, r1, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bfb8      	it	lt
 80056be:	18e4      	addlt	r4, r4, r3
 80056c0:	f000 f8e0 	bl	8005884 <__malloc_lock>
 80056c4:	4a1d      	ldr	r2, [pc, #116]	@ (800573c <_free_r+0x90>)
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	b933      	cbnz	r3, 80056d8 <_free_r+0x2c>
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	6014      	str	r4, [r2, #0]
 80056ce:	4628      	mov	r0, r5
 80056d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056d4:	f000 b8dc 	b.w	8005890 <__malloc_unlock>
 80056d8:	42a3      	cmp	r3, r4
 80056da:	d908      	bls.n	80056ee <_free_r+0x42>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	1821      	adds	r1, r4, r0
 80056e0:	428b      	cmp	r3, r1
 80056e2:	bf01      	itttt	eq
 80056e4:	6819      	ldreq	r1, [r3, #0]
 80056e6:	685b      	ldreq	r3, [r3, #4]
 80056e8:	1809      	addeq	r1, r1, r0
 80056ea:	6021      	streq	r1, [r4, #0]
 80056ec:	e7ed      	b.n	80056ca <_free_r+0x1e>
 80056ee:	461a      	mov	r2, r3
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b10b      	cbz	r3, 80056f8 <_free_r+0x4c>
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d9fa      	bls.n	80056ee <_free_r+0x42>
 80056f8:	6811      	ldr	r1, [r2, #0]
 80056fa:	1850      	adds	r0, r2, r1
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d10b      	bne.n	8005718 <_free_r+0x6c>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	4401      	add	r1, r0
 8005704:	1850      	adds	r0, r2, r1
 8005706:	4283      	cmp	r3, r0
 8005708:	6011      	str	r1, [r2, #0]
 800570a:	d1e0      	bne.n	80056ce <_free_r+0x22>
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	6053      	str	r3, [r2, #4]
 8005712:	4408      	add	r0, r1
 8005714:	6010      	str	r0, [r2, #0]
 8005716:	e7da      	b.n	80056ce <_free_r+0x22>
 8005718:	d902      	bls.n	8005720 <_free_r+0x74>
 800571a:	230c      	movs	r3, #12
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	e7d6      	b.n	80056ce <_free_r+0x22>
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	1821      	adds	r1, r4, r0
 8005724:	428b      	cmp	r3, r1
 8005726:	bf04      	itt	eq
 8005728:	6819      	ldreq	r1, [r3, #0]
 800572a:	685b      	ldreq	r3, [r3, #4]
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	bf04      	itt	eq
 8005730:	1809      	addeq	r1, r1, r0
 8005732:	6021      	streq	r1, [r4, #0]
 8005734:	6054      	str	r4, [r2, #4]
 8005736:	e7ca      	b.n	80056ce <_free_r+0x22>
 8005738:	bd38      	pop	{r3, r4, r5, pc}
 800573a:	bf00      	nop
 800573c:	2400026c 	.word	0x2400026c

08005740 <sbrk_aligned>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	4e0f      	ldr	r6, [pc, #60]	@ (8005780 <sbrk_aligned+0x40>)
 8005744:	460c      	mov	r4, r1
 8005746:	6831      	ldr	r1, [r6, #0]
 8005748:	4605      	mov	r5, r0
 800574a:	b911      	cbnz	r1, 8005752 <sbrk_aligned+0x12>
 800574c:	f000 fba4 	bl	8005e98 <_sbrk_r>
 8005750:	6030      	str	r0, [r6, #0]
 8005752:	4621      	mov	r1, r4
 8005754:	4628      	mov	r0, r5
 8005756:	f000 fb9f 	bl	8005e98 <_sbrk_r>
 800575a:	1c43      	adds	r3, r0, #1
 800575c:	d103      	bne.n	8005766 <sbrk_aligned+0x26>
 800575e:	f04f 34ff 	mov.w	r4, #4294967295
 8005762:	4620      	mov	r0, r4
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	1cc4      	adds	r4, r0, #3
 8005768:	f024 0403 	bic.w	r4, r4, #3
 800576c:	42a0      	cmp	r0, r4
 800576e:	d0f8      	beq.n	8005762 <sbrk_aligned+0x22>
 8005770:	1a21      	subs	r1, r4, r0
 8005772:	4628      	mov	r0, r5
 8005774:	f000 fb90 	bl	8005e98 <_sbrk_r>
 8005778:	3001      	adds	r0, #1
 800577a:	d1f2      	bne.n	8005762 <sbrk_aligned+0x22>
 800577c:	e7ef      	b.n	800575e <sbrk_aligned+0x1e>
 800577e:	bf00      	nop
 8005780:	24000268 	.word	0x24000268

08005784 <_malloc_r>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	1ccd      	adds	r5, r1, #3
 800578a:	f025 0503 	bic.w	r5, r5, #3
 800578e:	3508      	adds	r5, #8
 8005790:	2d0c      	cmp	r5, #12
 8005792:	bf38      	it	cc
 8005794:	250c      	movcc	r5, #12
 8005796:	2d00      	cmp	r5, #0
 8005798:	4606      	mov	r6, r0
 800579a:	db01      	blt.n	80057a0 <_malloc_r+0x1c>
 800579c:	42a9      	cmp	r1, r5
 800579e:	d904      	bls.n	80057aa <_malloc_r+0x26>
 80057a0:	230c      	movs	r3, #12
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	2000      	movs	r0, #0
 80057a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005880 <_malloc_r+0xfc>
 80057ae:	f000 f869 	bl	8005884 <__malloc_lock>
 80057b2:	f8d8 3000 	ldr.w	r3, [r8]
 80057b6:	461c      	mov	r4, r3
 80057b8:	bb44      	cbnz	r4, 800580c <_malloc_r+0x88>
 80057ba:	4629      	mov	r1, r5
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff ffbf 	bl	8005740 <sbrk_aligned>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	4604      	mov	r4, r0
 80057c6:	d158      	bne.n	800587a <_malloc_r+0xf6>
 80057c8:	f8d8 4000 	ldr.w	r4, [r8]
 80057cc:	4627      	mov	r7, r4
 80057ce:	2f00      	cmp	r7, #0
 80057d0:	d143      	bne.n	800585a <_malloc_r+0xd6>
 80057d2:	2c00      	cmp	r4, #0
 80057d4:	d04b      	beq.n	800586e <_malloc_r+0xea>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	4639      	mov	r1, r7
 80057da:	4630      	mov	r0, r6
 80057dc:	eb04 0903 	add.w	r9, r4, r3
 80057e0:	f000 fb5a 	bl	8005e98 <_sbrk_r>
 80057e4:	4581      	cmp	r9, r0
 80057e6:	d142      	bne.n	800586e <_malloc_r+0xea>
 80057e8:	6821      	ldr	r1, [r4, #0]
 80057ea:	1a6d      	subs	r5, r5, r1
 80057ec:	4629      	mov	r1, r5
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7ff ffa6 	bl	8005740 <sbrk_aligned>
 80057f4:	3001      	adds	r0, #1
 80057f6:	d03a      	beq.n	800586e <_malloc_r+0xea>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	442b      	add	r3, r5
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	bb62      	cbnz	r2, 8005860 <_malloc_r+0xdc>
 8005806:	f8c8 7000 	str.w	r7, [r8]
 800580a:	e00f      	b.n	800582c <_malloc_r+0xa8>
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	1b52      	subs	r2, r2, r5
 8005810:	d420      	bmi.n	8005854 <_malloc_r+0xd0>
 8005812:	2a0b      	cmp	r2, #11
 8005814:	d917      	bls.n	8005846 <_malloc_r+0xc2>
 8005816:	1961      	adds	r1, r4, r5
 8005818:	42a3      	cmp	r3, r4
 800581a:	6025      	str	r5, [r4, #0]
 800581c:	bf18      	it	ne
 800581e:	6059      	strne	r1, [r3, #4]
 8005820:	6863      	ldr	r3, [r4, #4]
 8005822:	bf08      	it	eq
 8005824:	f8c8 1000 	streq.w	r1, [r8]
 8005828:	5162      	str	r2, [r4, r5]
 800582a:	604b      	str	r3, [r1, #4]
 800582c:	4630      	mov	r0, r6
 800582e:	f000 f82f 	bl	8005890 <__malloc_unlock>
 8005832:	f104 000b 	add.w	r0, r4, #11
 8005836:	1d23      	adds	r3, r4, #4
 8005838:	f020 0007 	bic.w	r0, r0, #7
 800583c:	1ac2      	subs	r2, r0, r3
 800583e:	bf1c      	itt	ne
 8005840:	1a1b      	subne	r3, r3, r0
 8005842:	50a3      	strne	r3, [r4, r2]
 8005844:	e7af      	b.n	80057a6 <_malloc_r+0x22>
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	42a3      	cmp	r3, r4
 800584a:	bf0c      	ite	eq
 800584c:	f8c8 2000 	streq.w	r2, [r8]
 8005850:	605a      	strne	r2, [r3, #4]
 8005852:	e7eb      	b.n	800582c <_malloc_r+0xa8>
 8005854:	4623      	mov	r3, r4
 8005856:	6864      	ldr	r4, [r4, #4]
 8005858:	e7ae      	b.n	80057b8 <_malloc_r+0x34>
 800585a:	463c      	mov	r4, r7
 800585c:	687f      	ldr	r7, [r7, #4]
 800585e:	e7b6      	b.n	80057ce <_malloc_r+0x4a>
 8005860:	461a      	mov	r2, r3
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	42a3      	cmp	r3, r4
 8005866:	d1fb      	bne.n	8005860 <_malloc_r+0xdc>
 8005868:	2300      	movs	r3, #0
 800586a:	6053      	str	r3, [r2, #4]
 800586c:	e7de      	b.n	800582c <_malloc_r+0xa8>
 800586e:	230c      	movs	r3, #12
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	4630      	mov	r0, r6
 8005874:	f000 f80c 	bl	8005890 <__malloc_unlock>
 8005878:	e794      	b.n	80057a4 <_malloc_r+0x20>
 800587a:	6005      	str	r5, [r0, #0]
 800587c:	e7d6      	b.n	800582c <_malloc_r+0xa8>
 800587e:	bf00      	nop
 8005880:	2400026c 	.word	0x2400026c

08005884 <__malloc_lock>:
 8005884:	4801      	ldr	r0, [pc, #4]	@ (800588c <__malloc_lock+0x8>)
 8005886:	f7ff bf0f 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 800588a:	bf00      	nop
 800588c:	24000264 	.word	0x24000264

08005890 <__malloc_unlock>:
 8005890:	4801      	ldr	r0, [pc, #4]	@ (8005898 <__malloc_unlock+0x8>)
 8005892:	f7ff bf0a 	b.w	80056aa <__retarget_lock_release_recursive>
 8005896:	bf00      	nop
 8005898:	24000264 	.word	0x24000264

0800589c <__ssputs_r>:
 800589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	688e      	ldr	r6, [r1, #8]
 80058a2:	461f      	mov	r7, r3
 80058a4:	42be      	cmp	r6, r7
 80058a6:	680b      	ldr	r3, [r1, #0]
 80058a8:	4682      	mov	sl, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4690      	mov	r8, r2
 80058ae:	d82d      	bhi.n	800590c <__ssputs_r+0x70>
 80058b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058b8:	d026      	beq.n	8005908 <__ssputs_r+0x6c>
 80058ba:	6965      	ldr	r5, [r4, #20]
 80058bc:	6909      	ldr	r1, [r1, #16]
 80058be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058c2:	eba3 0901 	sub.w	r9, r3, r1
 80058c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058ca:	1c7b      	adds	r3, r7, #1
 80058cc:	444b      	add	r3, r9
 80058ce:	106d      	asrs	r5, r5, #1
 80058d0:	429d      	cmp	r5, r3
 80058d2:	bf38      	it	cc
 80058d4:	461d      	movcc	r5, r3
 80058d6:	0553      	lsls	r3, r2, #21
 80058d8:	d527      	bpl.n	800592a <__ssputs_r+0x8e>
 80058da:	4629      	mov	r1, r5
 80058dc:	f7ff ff52 	bl	8005784 <_malloc_r>
 80058e0:	4606      	mov	r6, r0
 80058e2:	b360      	cbz	r0, 800593e <__ssputs_r+0xa2>
 80058e4:	6921      	ldr	r1, [r4, #16]
 80058e6:	464a      	mov	r2, r9
 80058e8:	f000 fae6 	bl	8005eb8 <memcpy>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80058f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	6126      	str	r6, [r4, #16]
 80058fa:	6165      	str	r5, [r4, #20]
 80058fc:	444e      	add	r6, r9
 80058fe:	eba5 0509 	sub.w	r5, r5, r9
 8005902:	6026      	str	r6, [r4, #0]
 8005904:	60a5      	str	r5, [r4, #8]
 8005906:	463e      	mov	r6, r7
 8005908:	42be      	cmp	r6, r7
 800590a:	d900      	bls.n	800590e <__ssputs_r+0x72>
 800590c:	463e      	mov	r6, r7
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	4632      	mov	r2, r6
 8005912:	4641      	mov	r1, r8
 8005914:	f000 faa6 	bl	8005e64 <memmove>
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	1b9b      	subs	r3, r3, r6
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	4433      	add	r3, r6
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	2000      	movs	r0, #0
 8005926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592a:	462a      	mov	r2, r5
 800592c:	f000 fad2 	bl	8005ed4 <_realloc_r>
 8005930:	4606      	mov	r6, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d1e0      	bne.n	80058f8 <__ssputs_r+0x5c>
 8005936:	6921      	ldr	r1, [r4, #16]
 8005938:	4650      	mov	r0, sl
 800593a:	f7ff feb7 	bl	80056ac <_free_r>
 800593e:	230c      	movs	r3, #12
 8005940:	f8ca 3000 	str.w	r3, [sl]
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e7e9      	b.n	8005926 <__ssputs_r+0x8a>
	...

08005954 <_svfiprintf_r>:
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	4698      	mov	r8, r3
 800595a:	898b      	ldrh	r3, [r1, #12]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	b09d      	sub	sp, #116	@ 0x74
 8005960:	4607      	mov	r7, r0
 8005962:	460d      	mov	r5, r1
 8005964:	4614      	mov	r4, r2
 8005966:	d510      	bpl.n	800598a <_svfiprintf_r+0x36>
 8005968:	690b      	ldr	r3, [r1, #16]
 800596a:	b973      	cbnz	r3, 800598a <_svfiprintf_r+0x36>
 800596c:	2140      	movs	r1, #64	@ 0x40
 800596e:	f7ff ff09 	bl	8005784 <_malloc_r>
 8005972:	6028      	str	r0, [r5, #0]
 8005974:	6128      	str	r0, [r5, #16]
 8005976:	b930      	cbnz	r0, 8005986 <_svfiprintf_r+0x32>
 8005978:	230c      	movs	r3, #12
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	b01d      	add	sp, #116	@ 0x74
 8005982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005986:	2340      	movs	r3, #64	@ 0x40
 8005988:	616b      	str	r3, [r5, #20]
 800598a:	2300      	movs	r3, #0
 800598c:	9309      	str	r3, [sp, #36]	@ 0x24
 800598e:	2320      	movs	r3, #32
 8005990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005994:	f8cd 800c 	str.w	r8, [sp, #12]
 8005998:	2330      	movs	r3, #48	@ 0x30
 800599a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b38 <_svfiprintf_r+0x1e4>
 800599e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059a2:	f04f 0901 	mov.w	r9, #1
 80059a6:	4623      	mov	r3, r4
 80059a8:	469a      	mov	sl, r3
 80059aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ae:	b10a      	cbz	r2, 80059b4 <_svfiprintf_r+0x60>
 80059b0:	2a25      	cmp	r2, #37	@ 0x25
 80059b2:	d1f9      	bne.n	80059a8 <_svfiprintf_r+0x54>
 80059b4:	ebba 0b04 	subs.w	fp, sl, r4
 80059b8:	d00b      	beq.n	80059d2 <_svfiprintf_r+0x7e>
 80059ba:	465b      	mov	r3, fp
 80059bc:	4622      	mov	r2, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	4638      	mov	r0, r7
 80059c2:	f7ff ff6b 	bl	800589c <__ssputs_r>
 80059c6:	3001      	adds	r0, #1
 80059c8:	f000 80a7 	beq.w	8005b1a <_svfiprintf_r+0x1c6>
 80059cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059ce:	445a      	add	r2, fp
 80059d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80059d2:	f89a 3000 	ldrb.w	r3, [sl]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 809f 	beq.w	8005b1a <_svfiprintf_r+0x1c6>
 80059dc:	2300      	movs	r3, #0
 80059de:	f04f 32ff 	mov.w	r2, #4294967295
 80059e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059e6:	f10a 0a01 	add.w	sl, sl, #1
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	9307      	str	r3, [sp, #28]
 80059ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80059f4:	4654      	mov	r4, sl
 80059f6:	2205      	movs	r2, #5
 80059f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fc:	484e      	ldr	r0, [pc, #312]	@ (8005b38 <_svfiprintf_r+0x1e4>)
 80059fe:	f7fa fc6f 	bl	80002e0 <memchr>
 8005a02:	9a04      	ldr	r2, [sp, #16]
 8005a04:	b9d8      	cbnz	r0, 8005a3e <_svfiprintf_r+0xea>
 8005a06:	06d0      	lsls	r0, r2, #27
 8005a08:	bf44      	itt	mi
 8005a0a:	2320      	movmi	r3, #32
 8005a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a10:	0711      	lsls	r1, r2, #28
 8005a12:	bf44      	itt	mi
 8005a14:	232b      	movmi	r3, #43	@ 0x2b
 8005a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a20:	d015      	beq.n	8005a4e <_svfiprintf_r+0xfa>
 8005a22:	9a07      	ldr	r2, [sp, #28]
 8005a24:	4654      	mov	r4, sl
 8005a26:	2000      	movs	r0, #0
 8005a28:	f04f 0c0a 	mov.w	ip, #10
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a32:	3b30      	subs	r3, #48	@ 0x30
 8005a34:	2b09      	cmp	r3, #9
 8005a36:	d94b      	bls.n	8005ad0 <_svfiprintf_r+0x17c>
 8005a38:	b1b0      	cbz	r0, 8005a68 <_svfiprintf_r+0x114>
 8005a3a:	9207      	str	r2, [sp, #28]
 8005a3c:	e014      	b.n	8005a68 <_svfiprintf_r+0x114>
 8005a3e:	eba0 0308 	sub.w	r3, r0, r8
 8005a42:	fa09 f303 	lsl.w	r3, r9, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	46a2      	mov	sl, r4
 8005a4c:	e7d2      	b.n	80059f4 <_svfiprintf_r+0xa0>
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	1d19      	adds	r1, r3, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	9103      	str	r1, [sp, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfbb      	ittet	lt
 8005a5a:	425b      	neglt	r3, r3
 8005a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a60:	9307      	strge	r3, [sp, #28]
 8005a62:	9307      	strlt	r3, [sp, #28]
 8005a64:	bfb8      	it	lt
 8005a66:	9204      	strlt	r2, [sp, #16]
 8005a68:	7823      	ldrb	r3, [r4, #0]
 8005a6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a6c:	d10a      	bne.n	8005a84 <_svfiprintf_r+0x130>
 8005a6e:	7863      	ldrb	r3, [r4, #1]
 8005a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a72:	d132      	bne.n	8005ada <_svfiprintf_r+0x186>
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	1d1a      	adds	r2, r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	9203      	str	r2, [sp, #12]
 8005a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a80:	3402      	adds	r4, #2
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b48 <_svfiprintf_r+0x1f4>
 8005a88:	7821      	ldrb	r1, [r4, #0]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	f7fa fc27 	bl	80002e0 <memchr>
 8005a92:	b138      	cbz	r0, 8005aa4 <_svfiprintf_r+0x150>
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	eba0 000a 	sub.w	r0, r0, sl
 8005a9a:	2240      	movs	r2, #64	@ 0x40
 8005a9c:	4082      	lsls	r2, r0
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	4824      	ldr	r0, [pc, #144]	@ (8005b3c <_svfiprintf_r+0x1e8>)
 8005aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005aae:	2206      	movs	r2, #6
 8005ab0:	f7fa fc16 	bl	80002e0 <memchr>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d036      	beq.n	8005b26 <_svfiprintf_r+0x1d2>
 8005ab8:	4b21      	ldr	r3, [pc, #132]	@ (8005b40 <_svfiprintf_r+0x1ec>)
 8005aba:	bb1b      	cbnz	r3, 8005b04 <_svfiprintf_r+0x1b0>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	3307      	adds	r3, #7
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	9303      	str	r3, [sp, #12]
 8005ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aca:	4433      	add	r3, r6
 8005acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ace:	e76a      	b.n	80059a6 <_svfiprintf_r+0x52>
 8005ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7a8      	b.n	8005a2c <_svfiprintf_r+0xd8>
 8005ada:	2300      	movs	r3, #0
 8005adc:	3401      	adds	r4, #1
 8005ade:	9305      	str	r3, [sp, #20]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f04f 0c0a 	mov.w	ip, #10
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aec:	3a30      	subs	r2, #48	@ 0x30
 8005aee:	2a09      	cmp	r2, #9
 8005af0:	d903      	bls.n	8005afa <_svfiprintf_r+0x1a6>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0c6      	beq.n	8005a84 <_svfiprintf_r+0x130>
 8005af6:	9105      	str	r1, [sp, #20]
 8005af8:	e7c4      	b.n	8005a84 <_svfiprintf_r+0x130>
 8005afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005afe:	4604      	mov	r4, r0
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7f0      	b.n	8005ae6 <_svfiprintf_r+0x192>
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <_svfiprintf_r+0x1f0>)
 8005b0c:	a904      	add	r1, sp, #16
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f3af 8000 	nop.w
 8005b14:	1c42      	adds	r2, r0, #1
 8005b16:	4606      	mov	r6, r0
 8005b18:	d1d6      	bne.n	8005ac8 <_svfiprintf_r+0x174>
 8005b1a:	89ab      	ldrh	r3, [r5, #12]
 8005b1c:	065b      	lsls	r3, r3, #25
 8005b1e:	f53f af2d 	bmi.w	800597c <_svfiprintf_r+0x28>
 8005b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b24:	e72c      	b.n	8005980 <_svfiprintf_r+0x2c>
 8005b26:	ab03      	add	r3, sp, #12
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	462a      	mov	r2, r5
 8005b2c:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <_svfiprintf_r+0x1f0>)
 8005b2e:	a904      	add	r1, sp, #16
 8005b30:	4638      	mov	r0, r7
 8005b32:	f000 f879 	bl	8005c28 <_printf_i>
 8005b36:	e7ed      	b.n	8005b14 <_svfiprintf_r+0x1c0>
 8005b38:	08005f9c 	.word	0x08005f9c
 8005b3c:	08005fa6 	.word	0x08005fa6
 8005b40:	00000000 	.word	0x00000000
 8005b44:	0800589d 	.word	0x0800589d
 8005b48:	08005fa2 	.word	0x08005fa2

08005b4c <_printf_common>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	4616      	mov	r6, r2
 8005b52:	4698      	mov	r8, r3
 8005b54:	688a      	ldr	r2, [r1, #8]
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bfb8      	it	lt
 8005b60:	4613      	movlt	r3, r2
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b68:	4607      	mov	r7, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	b10a      	cbz	r2, 8005b72 <_printf_common+0x26>
 8005b6e:	3301      	adds	r3, #1
 8005b70:	6033      	str	r3, [r6, #0]
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	0699      	lsls	r1, r3, #26
 8005b76:	bf42      	ittt	mi
 8005b78:	6833      	ldrmi	r3, [r6, #0]
 8005b7a:	3302      	addmi	r3, #2
 8005b7c:	6033      	strmi	r3, [r6, #0]
 8005b7e:	6825      	ldr	r5, [r4, #0]
 8005b80:	f015 0506 	ands.w	r5, r5, #6
 8005b84:	d106      	bne.n	8005b94 <_printf_common+0x48>
 8005b86:	f104 0a19 	add.w	sl, r4, #25
 8005b8a:	68e3      	ldr	r3, [r4, #12]
 8005b8c:	6832      	ldr	r2, [r6, #0]
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	42ab      	cmp	r3, r5
 8005b92:	dc26      	bgt.n	8005be2 <_printf_common+0x96>
 8005b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	3b00      	subs	r3, #0
 8005b9c:	bf18      	it	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	0692      	lsls	r2, r2, #26
 8005ba2:	d42b      	bmi.n	8005bfc <_printf_common+0xb0>
 8005ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ba8:	4641      	mov	r1, r8
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c8      	blx	r9
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d01e      	beq.n	8005bf0 <_printf_common+0xa4>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	6922      	ldr	r2, [r4, #16]
 8005bb6:	f003 0306 	and.w	r3, r3, #6
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	bf02      	ittt	eq
 8005bbe:	68e5      	ldreq	r5, [r4, #12]
 8005bc0:	6833      	ldreq	r3, [r6, #0]
 8005bc2:	1aed      	subeq	r5, r5, r3
 8005bc4:	68a3      	ldr	r3, [r4, #8]
 8005bc6:	bf0c      	ite	eq
 8005bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bcc:	2500      	movne	r5, #0
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bfc4      	itt	gt
 8005bd2:	1a9b      	subgt	r3, r3, r2
 8005bd4:	18ed      	addgt	r5, r5, r3
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	341a      	adds	r4, #26
 8005bda:	42b5      	cmp	r5, r6
 8005bdc:	d11a      	bne.n	8005c14 <_printf_common+0xc8>
 8005bde:	2000      	movs	r0, #0
 8005be0:	e008      	b.n	8005bf4 <_printf_common+0xa8>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4652      	mov	r2, sl
 8005be6:	4641      	mov	r1, r8
 8005be8:	4638      	mov	r0, r7
 8005bea:	47c8      	blx	r9
 8005bec:	3001      	adds	r0, #1
 8005bee:	d103      	bne.n	8005bf8 <_printf_common+0xac>
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	e7c6      	b.n	8005b8a <_printf_common+0x3e>
 8005bfc:	18e1      	adds	r1, r4, r3
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	2030      	movs	r0, #48	@ 0x30
 8005c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c06:	4422      	add	r2, r4
 8005c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c10:	3302      	adds	r3, #2
 8005c12:	e7c7      	b.n	8005ba4 <_printf_common+0x58>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4622      	mov	r2, r4
 8005c18:	4641      	mov	r1, r8
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c8      	blx	r9
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d0e6      	beq.n	8005bf0 <_printf_common+0xa4>
 8005c22:	3601      	adds	r6, #1
 8005c24:	e7d9      	b.n	8005bda <_printf_common+0x8e>
	...

08005c28 <_printf_i>:
 8005c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	7e0f      	ldrb	r7, [r1, #24]
 8005c2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c30:	2f78      	cmp	r7, #120	@ 0x78
 8005c32:	4691      	mov	r9, r2
 8005c34:	4680      	mov	r8, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	469a      	mov	sl, r3
 8005c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c3e:	d807      	bhi.n	8005c50 <_printf_i+0x28>
 8005c40:	2f62      	cmp	r7, #98	@ 0x62
 8005c42:	d80a      	bhi.n	8005c5a <_printf_i+0x32>
 8005c44:	2f00      	cmp	r7, #0
 8005c46:	f000 80d1 	beq.w	8005dec <_printf_i+0x1c4>
 8005c4a:	2f58      	cmp	r7, #88	@ 0x58
 8005c4c:	f000 80b8 	beq.w	8005dc0 <_printf_i+0x198>
 8005c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c58:	e03a      	b.n	8005cd0 <_printf_i+0xa8>
 8005c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c5e:	2b15      	cmp	r3, #21
 8005c60:	d8f6      	bhi.n	8005c50 <_printf_i+0x28>
 8005c62:	a101      	add	r1, pc, #4	@ (adr r1, 8005c68 <_printf_i+0x40>)
 8005c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	08005cd5 	.word	0x08005cd5
 8005c70:	08005c51 	.word	0x08005c51
 8005c74:	08005c51 	.word	0x08005c51
 8005c78:	08005c51 	.word	0x08005c51
 8005c7c:	08005c51 	.word	0x08005c51
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005c51 	.word	0x08005c51
 8005c88:	08005c51 	.word	0x08005c51
 8005c8c:	08005c51 	.word	0x08005c51
 8005c90:	08005c51 	.word	0x08005c51
 8005c94:	08005dd3 	.word	0x08005dd3
 8005c98:	08005cff 	.word	0x08005cff
 8005c9c:	08005d8d 	.word	0x08005d8d
 8005ca0:	08005c51 	.word	0x08005c51
 8005ca4:	08005c51 	.word	0x08005c51
 8005ca8:	08005df5 	.word	0x08005df5
 8005cac:	08005c51 	.word	0x08005c51
 8005cb0:	08005cff 	.word	0x08005cff
 8005cb4:	08005c51 	.word	0x08005c51
 8005cb8:	08005c51 	.word	0x08005c51
 8005cbc:	08005d95 	.word	0x08005d95
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6032      	str	r2, [r6, #0]
 8005cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e09c      	b.n	8005e0e <_printf_i+0x1e6>
 8005cd4:	6833      	ldr	r3, [r6, #0]
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	1d19      	adds	r1, r3, #4
 8005cda:	6031      	str	r1, [r6, #0]
 8005cdc:	0606      	lsls	r6, r0, #24
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0xbc>
 8005ce0:	681d      	ldr	r5, [r3, #0]
 8005ce2:	e003      	b.n	8005cec <_printf_i+0xc4>
 8005ce4:	0645      	lsls	r5, r0, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0xb8>
 8005ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cec:	2d00      	cmp	r5, #0
 8005cee:	da03      	bge.n	8005cf8 <_printf_i+0xd0>
 8005cf0:	232d      	movs	r3, #45	@ 0x2d
 8005cf2:	426d      	negs	r5, r5
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cf8:	4858      	ldr	r0, [pc, #352]	@ (8005e5c <_printf_i+0x234>)
 8005cfa:	230a      	movs	r3, #10
 8005cfc:	e011      	b.n	8005d22 <_printf_i+0xfa>
 8005cfe:	6821      	ldr	r1, [r4, #0]
 8005d00:	6833      	ldr	r3, [r6, #0]
 8005d02:	0608      	lsls	r0, r1, #24
 8005d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d08:	d402      	bmi.n	8005d10 <_printf_i+0xe8>
 8005d0a:	0649      	lsls	r1, r1, #25
 8005d0c:	bf48      	it	mi
 8005d0e:	b2ad      	uxthmi	r5, r5
 8005d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d12:	4852      	ldr	r0, [pc, #328]	@ (8005e5c <_printf_i+0x234>)
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	bf14      	ite	ne
 8005d18:	230a      	movne	r3, #10
 8005d1a:	2308      	moveq	r3, #8
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d22:	6866      	ldr	r6, [r4, #4]
 8005d24:	60a6      	str	r6, [r4, #8]
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	db05      	blt.n	8005d36 <_printf_i+0x10e>
 8005d2a:	6821      	ldr	r1, [r4, #0]
 8005d2c:	432e      	orrs	r6, r5
 8005d2e:	f021 0104 	bic.w	r1, r1, #4
 8005d32:	6021      	str	r1, [r4, #0]
 8005d34:	d04b      	beq.n	8005dce <_printf_i+0x1a6>
 8005d36:	4616      	mov	r6, r2
 8005d38:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d3c:	fb03 5711 	mls	r7, r3, r1, r5
 8005d40:	5dc7      	ldrb	r7, [r0, r7]
 8005d42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d46:	462f      	mov	r7, r5
 8005d48:	42bb      	cmp	r3, r7
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	d9f4      	bls.n	8005d38 <_printf_i+0x110>
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d10b      	bne.n	8005d6a <_printf_i+0x142>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	07df      	lsls	r7, r3, #31
 8005d56:	d508      	bpl.n	8005d6a <_printf_i+0x142>
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	6861      	ldr	r1, [r4, #4]
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	bfde      	ittt	le
 8005d60:	2330      	movle	r3, #48	@ 0x30
 8005d62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d6a:	1b92      	subs	r2, r2, r6
 8005d6c:	6122      	str	r2, [r4, #16]
 8005d6e:	f8cd a000 	str.w	sl, [sp]
 8005d72:	464b      	mov	r3, r9
 8005d74:	aa03      	add	r2, sp, #12
 8005d76:	4621      	mov	r1, r4
 8005d78:	4640      	mov	r0, r8
 8005d7a:	f7ff fee7 	bl	8005b4c <_printf_common>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d14a      	bne.n	8005e18 <_printf_i+0x1f0>
 8005d82:	f04f 30ff 	mov.w	r0, #4294967295
 8005d86:	b004      	add	sp, #16
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	f043 0320 	orr.w	r3, r3, #32
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	4832      	ldr	r0, [pc, #200]	@ (8005e60 <_printf_i+0x238>)
 8005d96:	2778      	movs	r7, #120	@ 0x78
 8005d98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	6831      	ldr	r1, [r6, #0]
 8005da0:	061f      	lsls	r7, r3, #24
 8005da2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005da6:	d402      	bmi.n	8005dae <_printf_i+0x186>
 8005da8:	065f      	lsls	r7, r3, #25
 8005daa:	bf48      	it	mi
 8005dac:	b2ad      	uxthmi	r5, r5
 8005dae:	6031      	str	r1, [r6, #0]
 8005db0:	07d9      	lsls	r1, r3, #31
 8005db2:	bf44      	itt	mi
 8005db4:	f043 0320 	orrmi.w	r3, r3, #32
 8005db8:	6023      	strmi	r3, [r4, #0]
 8005dba:	b11d      	cbz	r5, 8005dc4 <_printf_i+0x19c>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	e7ad      	b.n	8005d1c <_printf_i+0xf4>
 8005dc0:	4826      	ldr	r0, [pc, #152]	@ (8005e5c <_printf_i+0x234>)
 8005dc2:	e7e9      	b.n	8005d98 <_printf_i+0x170>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	f023 0320 	bic.w	r3, r3, #32
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	e7f6      	b.n	8005dbc <_printf_i+0x194>
 8005dce:	4616      	mov	r6, r2
 8005dd0:	e7bd      	b.n	8005d4e <_printf_i+0x126>
 8005dd2:	6833      	ldr	r3, [r6, #0]
 8005dd4:	6825      	ldr	r5, [r4, #0]
 8005dd6:	6961      	ldr	r1, [r4, #20]
 8005dd8:	1d18      	adds	r0, r3, #4
 8005dda:	6030      	str	r0, [r6, #0]
 8005ddc:	062e      	lsls	r6, r5, #24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	d501      	bpl.n	8005de6 <_printf_i+0x1be>
 8005de2:	6019      	str	r1, [r3, #0]
 8005de4:	e002      	b.n	8005dec <_printf_i+0x1c4>
 8005de6:	0668      	lsls	r0, r5, #25
 8005de8:	d5fb      	bpl.n	8005de2 <_printf_i+0x1ba>
 8005dea:	8019      	strh	r1, [r3, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	4616      	mov	r6, r2
 8005df2:	e7bc      	b.n	8005d6e <_printf_i+0x146>
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	6032      	str	r2, [r6, #0]
 8005dfa:	681e      	ldr	r6, [r3, #0]
 8005dfc:	6862      	ldr	r2, [r4, #4]
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7fa fa6d 	bl	80002e0 <memchr>
 8005e06:	b108      	cbz	r0, 8005e0c <_printf_i+0x1e4>
 8005e08:	1b80      	subs	r0, r0, r6
 8005e0a:	6060      	str	r0, [r4, #4]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	2300      	movs	r3, #0
 8005e12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e16:	e7aa      	b.n	8005d6e <_printf_i+0x146>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	4632      	mov	r2, r6
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	4640      	mov	r0, r8
 8005e20:	47d0      	blx	sl
 8005e22:	3001      	adds	r0, #1
 8005e24:	d0ad      	beq.n	8005d82 <_printf_i+0x15a>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	079b      	lsls	r3, r3, #30
 8005e2a:	d413      	bmi.n	8005e54 <_printf_i+0x22c>
 8005e2c:	68e0      	ldr	r0, [r4, #12]
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	4298      	cmp	r0, r3
 8005e32:	bfb8      	it	lt
 8005e34:	4618      	movlt	r0, r3
 8005e36:	e7a6      	b.n	8005d86 <_printf_i+0x15e>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4640      	mov	r0, r8
 8005e40:	47d0      	blx	sl
 8005e42:	3001      	adds	r0, #1
 8005e44:	d09d      	beq.n	8005d82 <_printf_i+0x15a>
 8005e46:	3501      	adds	r5, #1
 8005e48:	68e3      	ldr	r3, [r4, #12]
 8005e4a:	9903      	ldr	r1, [sp, #12]
 8005e4c:	1a5b      	subs	r3, r3, r1
 8005e4e:	42ab      	cmp	r3, r5
 8005e50:	dcf2      	bgt.n	8005e38 <_printf_i+0x210>
 8005e52:	e7eb      	b.n	8005e2c <_printf_i+0x204>
 8005e54:	2500      	movs	r5, #0
 8005e56:	f104 0619 	add.w	r6, r4, #25
 8005e5a:	e7f5      	b.n	8005e48 <_printf_i+0x220>
 8005e5c:	08005fad 	.word	0x08005fad
 8005e60:	08005fbe 	.word	0x08005fbe

08005e64 <memmove>:
 8005e64:	4288      	cmp	r0, r1
 8005e66:	b510      	push	{r4, lr}
 8005e68:	eb01 0402 	add.w	r4, r1, r2
 8005e6c:	d902      	bls.n	8005e74 <memmove+0x10>
 8005e6e:	4284      	cmp	r4, r0
 8005e70:	4623      	mov	r3, r4
 8005e72:	d807      	bhi.n	8005e84 <memmove+0x20>
 8005e74:	1e43      	subs	r3, r0, #1
 8005e76:	42a1      	cmp	r1, r4
 8005e78:	d008      	beq.n	8005e8c <memmove+0x28>
 8005e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e82:	e7f8      	b.n	8005e76 <memmove+0x12>
 8005e84:	4402      	add	r2, r0
 8005e86:	4601      	mov	r1, r0
 8005e88:	428a      	cmp	r2, r1
 8005e8a:	d100      	bne.n	8005e8e <memmove+0x2a>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e96:	e7f7      	b.n	8005e88 <memmove+0x24>

08005e98 <_sbrk_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d06      	ldr	r5, [pc, #24]	@ (8005eb4 <_sbrk_r+0x1c>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	602b      	str	r3, [r5, #0]
 8005ea4:	f7fa fe9a 	bl	8000bdc <_sbrk>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_sbrk_r+0x1a>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_sbrk_r+0x1a>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	24000260 	.word	0x24000260

08005eb8 <memcpy>:
 8005eb8:	440a      	add	r2, r1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec0:	d100      	bne.n	8005ec4 <memcpy+0xc>
 8005ec2:	4770      	bx	lr
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ece:	4291      	cmp	r1, r2
 8005ed0:	d1f9      	bne.n	8005ec6 <memcpy+0xe>
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <_realloc_r>:
 8005ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed8:	4607      	mov	r7, r0
 8005eda:	4614      	mov	r4, r2
 8005edc:	460d      	mov	r5, r1
 8005ede:	b921      	cbnz	r1, 8005eea <_realloc_r+0x16>
 8005ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	f7ff bc4d 	b.w	8005784 <_malloc_r>
 8005eea:	b92a      	cbnz	r2, 8005ef8 <_realloc_r+0x24>
 8005eec:	f7ff fbde 	bl	80056ac <_free_r>
 8005ef0:	4625      	mov	r5, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef8:	f000 f81a 	bl	8005f30 <_malloc_usable_size_r>
 8005efc:	4284      	cmp	r4, r0
 8005efe:	4606      	mov	r6, r0
 8005f00:	d802      	bhi.n	8005f08 <_realloc_r+0x34>
 8005f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f06:	d8f4      	bhi.n	8005ef2 <_realloc_r+0x1e>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f7ff fc3a 	bl	8005784 <_malloc_r>
 8005f10:	4680      	mov	r8, r0
 8005f12:	b908      	cbnz	r0, 8005f18 <_realloc_r+0x44>
 8005f14:	4645      	mov	r5, r8
 8005f16:	e7ec      	b.n	8005ef2 <_realloc_r+0x1e>
 8005f18:	42b4      	cmp	r4, r6
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	bf28      	it	cs
 8005f20:	4632      	movcs	r2, r6
 8005f22:	f7ff ffc9 	bl	8005eb8 <memcpy>
 8005f26:	4629      	mov	r1, r5
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f7ff fbbf 	bl	80056ac <_free_r>
 8005f2e:	e7f1      	b.n	8005f14 <_realloc_r+0x40>

08005f30 <_malloc_usable_size_r>:
 8005f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f34:	1f18      	subs	r0, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfbc      	itt	lt
 8005f3a:	580b      	ldrlt	r3, [r1, r0]
 8005f3c:	18c0      	addlt	r0, r0, r3
 8005f3e:	4770      	bx	lr

08005f40 <_init>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	bf00      	nop
 8005f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f46:	bc08      	pop	{r3}
 8005f48:	469e      	mov	lr, r3
 8005f4a:	4770      	bx	lr

08005f4c <_fini>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

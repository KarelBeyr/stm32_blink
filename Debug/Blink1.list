
Blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008534  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080087d4  080087d4  000097d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008860  08008860  00009860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008864  08008864  00009864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08008868  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000214  24000070  080088d8  0000a070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  080088d8  0000a284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011c88  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002334  00000000  00000000  0001bd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba8  00000000  00000000  0001e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008f3  00000000  00000000  0001ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000372bd  00000000  00000000  0001f4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011372  00000000  00000000  000567b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b65c  00000000  00000000  00067b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c3186  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003784  00000000  00000000  001c31cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001c6950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080087bc 	.word	0x080087bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	080087bc 	.word	0x080087bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <__io_putchar+0x2c>)
 80006be:	f004 fc91 	bl	8004fe4 <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <__io_putchar+0x22>
    return -1;
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	e000      	b.n	80006d0 <__io_putchar+0x24>
  }
  return ch;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	24000098 	.word	0x24000098

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e0:	f000 f9ca 	bl	8000a78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fc50 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f83c 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f8f0 	bl	80008d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006f0:	f000 f8a2 	bl	8000838 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &receivedChar, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	4915      	ldr	r1, [pc, #84]	@ (800074c <main+0x70>)
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <main+0x74>)
 80006fa:	f004 fd01 	bl	8005100 <HAL_UART_Receive_IT>
  setbuf(stdout, NULL);
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <main+0x78>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f007 f93a 	bl	8007980 <setbuf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (dutyCycle < pwmWidth)
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <main+0x7c>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <main+0x80>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d20d      	bcs.n	8000734 <main+0x58>
	  {
  	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2108      	movs	r1, #8
 800071c:	4810      	ldr	r0, [pc, #64]	@ (8000760 <main+0x84>)
 800071e:	f001 fd91 	bl	8002244 <HAL_GPIO_WritePin>
	    HAL_Delay(pwmWidth - dutyCycle);
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <main+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <main+0x7c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fcbc 	bl	80010ac <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2108      	movs	r1, #8
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <main+0x84>)
 800073a:	f001 fd83 	bl	8002244 <HAL_GPIO_WritePin>
	  HAL_Delay(dutyCycle);
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <main+0x7c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fcb2 	bl	80010ac <HAL_Delay>
	  if (dutyCycle < pwmWidth)
 8000748:	e7e0      	b.n	800070c <main+0x30>
 800074a:	bf00      	nop
 800074c:	2400012c 	.word	0x2400012c
 8000750:	24000098 	.word	0x24000098
 8000754:	24000020 	.word	0x24000020
 8000758:	24000094 	.word	0x24000094
 800075c:	24000000 	.word	0x24000000
 8000760:	58020c00 	.word	0x58020c00

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	@ 0x70
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	224c      	movs	r2, #76	@ 0x4c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f007 fa03 	bl	8007b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f007 f9fd 	bl	8007b7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000784:	2002      	movs	r0, #2
 8000786:	f001 fd91 	bl	80022ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <SystemClock_Config+0xcc>)
 8000790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000792:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <SystemClock_Config+0xcc>)
 8000794:	f023 0301 	bic.w	r3, r3, #1
 8000798:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <SystemClock_Config+0xcc>)
 800079c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <SystemClock_Config+0xd0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <SystemClock_Config+0xd0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c0:	bf00      	nop
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <SystemClock_Config+0xd0>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ce:	d1f8      	bne.n	80007c2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fd9b 	bl	8002320 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007f0:	f000 f96e 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	233f      	movs	r3, #63	@ 0x3f
 80007f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f002 f9db 	bl	8002bd4 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 f954 	bl	8000ad0 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3770      	adds	r7, #112	@ 0x70
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58000400 	.word	0x58000400
 8000834:	58024800 	.word	0x58024800

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <MX_USART3_UART_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000882:	f004 fb5f 	bl	8004f44 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f920 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 8000894:	f006 fed5 	bl	8007642 <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f917 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 80008a6:	f006 ff0a 	bl	80076be <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f90e 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_USART3_UART_Init+0x90>)
 80008b6:	f006 fe8b 	bl	80075d0 <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f906 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000098 	.word	0x24000098
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_GPIO_Init+0xcc>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a2b      	ldr	r2, [pc, #172]	@ (800099c <MX_GPIO_Init+0xcc>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b29      	ldr	r3, [pc, #164]	@ (800099c <MX_GPIO_Init+0xcc>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000904:	4b25      	ldr	r3, [pc, #148]	@ (800099c <MX_GPIO_Init+0xcc>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a24      	ldr	r2, [pc, #144]	@ (800099c <MX_GPIO_Init+0xcc>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_GPIO_Init+0xcc>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_GPIO_Init+0xcc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <MX_GPIO_Init+0xcc>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_GPIO_Init+0xcc>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2108      	movs	r1, #8
 8000944:	4816      	ldr	r0, [pc, #88]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000946:	f001 fc7d 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800094a:	2308      	movs	r3, #8
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000962:	f001 fabf 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <MX_GPIO_Init+0xd4>)
 800097e:	f001 fab1 	bl	8001ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2028      	movs	r0, #40	@ 0x28
 8000988:	f000 fc9b 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098c:	2028      	movs	r0, #40	@ 0x28
 800098e:	f000 fcb2 	bl	80012f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024400 	.word	0x58024400
 80009a0:	58020c00 	.word	0x58020c00
 80009a4:	58020800 	.word	0x58020800

080009a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_UART_RxCpltCallback+0x30>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10a      	bne.n	80009d0 <HAL_UART_RxCpltCallback+0x28>
  {
    printf("GOT %c\r\n", receivedChar);
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_UART_RxCpltCallback+0x34>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <HAL_UART_RxCpltCallback+0x38>)
 80009c2:	f006 ffcb 	bl	800795c <iprintf>

    // Start receiving the next character again
    HAL_UART_Receive_IT(&huart3, &receivedChar, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	4904      	ldr	r1, [pc, #16]	@ (80009dc <HAL_UART_RxCpltCallback+0x34>)
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <HAL_UART_RxCpltCallback+0x3c>)
 80009cc:	f004 fb98 	bl	8005100 <HAL_UART_Receive_IT>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40004800 	.word	0x40004800
 80009dc:	2400012c 	.word	0x2400012c
 80009e0:	080087d4 	.word	0x080087d4
 80009e4:	24000098 	.word	0x24000098

080009e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f8:	d130      	bne.n	8000a5c <HAL_GPIO_EXTI_Callback+0x74>
  {
	//debounce logic
	uint32_t now = HAL_GetTick();
 80009fa:	f000 fb4b 	bl	8001094 <HAL_GetTick>
 80009fe:	60f8      	str	r0, [r7, #12]
	if (now - last_debounce_time < 50)
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	2b31      	cmp	r3, #49	@ 0x31
 8000a0a:	d926      	bls.n	8000a5a <HAL_GPIO_EXTI_Callback+0x72>
	{
	 return;
	}
	last_debounce_time = now;
 8000a0c:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6013      	str	r3, [r2, #0]

	//logic to reset UI so that we start counting from zero if more than 2000ms user didn't press a button
	if (now - last_prg_time > 2000)
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a1e:	d902      	bls.n	8000a26 <HAL_GPIO_EXTI_Callback+0x3e>
	{
	  dutyCycle = 0;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
	}
	dutyCycle++;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a30:	701a      	strb	r2, [r3, #0]
	if (dutyCycle > pwmWidth)
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x88>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d903      	bls.n	8000a46 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		dutyCycle = pwmWidth;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x88>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a44:	701a      	strb	r2, [r3, #0]
	}
	last_prg_time = now;
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6013      	str	r3, [r2, #0]

    // Send duty cycle over UART
    printf("Duty %d\r\n", dutyCycle);
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4808      	ldr	r0, [pc, #32]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a54:	f006 ff82 	bl	800795c <iprintf>
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_EXTI_Callback+0x74>
	 return;
 8000a5a:	bf00      	nop
  }
}
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2400008c 	.word	0x2400008c
 8000a68:	24000090 	.word	0x24000090
 8000a6c:	24000094 	.word	0x24000094
 8000a70:	24000000 	.word	0x24000000
 8000a74:	080087e0 	.word	0x080087e0

08000a78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a8a:	f000 fc4f 	bl	800132c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a9a:	231f      	movs	r3, #31
 8000a9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a9e:	2387      	movs	r3, #135	@ 0x87
 8000aa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fc6d 	bl	800139c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f000 fc4a 	bl	800135c <HAL_MPU_Enable>

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_MspInit+0x30>)
 8000ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae8:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x30>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x30>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	58024400 	.word	0x58024400

08000b10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0ba      	sub	sp, #232	@ 0xe8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	22c0      	movs	r2, #192	@ 0xc0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 f824 	bl	8007b7e <memset>
  if(huart->Instance==USART3)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <HAL_UART_MspInit+0xd8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d14e      	bne.n	8000bde <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b40:	f04f 0202 	mov.w	r2, #2
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fbc8 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b62:	f7ff ffb5 	bl	8000ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <HAL_UART_MspInit+0xdc>)
 8000b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bec <HAL_UART_MspInit+0xdc>)
 8000b6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_UART_MspInit+0xdc>)
 8000b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_UART_MspInit+0xdc>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <HAL_UART_MspInit+0xdc>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <HAL_UART_MspInit+0xdc>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ba2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <HAL_UART_MspInit+0xe0>)
 8000bca:	f001 f98b 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2027      	movs	r0, #39	@ 0x27
 8000bd4:	f000 fb75 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bd8:	2027      	movs	r0, #39	@ 0x27
 8000bda:	f000 fb8c 	bl	80012f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bde:	bf00      	nop
 8000be0:	37e8      	adds	r7, #232	@ 0xe8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004800 	.word	0x40004800
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020400 	.word	0x58020400

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 fa0f 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <USART3_IRQHandler+0x10>)
 8000c5a:	f004 fa9d 	bl	8005198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24000098 	.word	0x24000098

08000c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c70:	f001 fb01 	bl	8002276 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
  }

  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fced 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
  }
  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d12:	605a      	str	r2, [r3, #4]
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f006 ff4a 	bl	8007c1c <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	24080000 	.word	0x24080000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	24000130 	.word	0x24000130
 8000dbc:	24000288 	.word	0x24000288

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b43      	ldr	r3, [pc, #268]	@ (8000ed4 <SystemInit+0x114>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dca:	4a42      	ldr	r2, [pc, #264]	@ (8000ed4 <SystemInit+0x114>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dd4:	4b40      	ldr	r3, [pc, #256]	@ (8000ed8 <SystemInit+0x118>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d807      	bhi.n	8000df0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000de0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <SystemInit+0x118>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 030f 	bic.w	r3, r3, #15
 8000de8:	4a3b      	ldr	r2, [pc, #236]	@ (8000ed8 <SystemInit+0x118>)
 8000dea:	f043 0307 	orr.w	r3, r3, #7
 8000dee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000df0:	4b3a      	ldr	r3, [pc, #232]	@ (8000edc <SystemInit+0x11c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a39      	ldr	r2, [pc, #228]	@ (8000edc <SystemInit+0x11c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dfc:	4b37      	ldr	r3, [pc, #220]	@ (8000edc <SystemInit+0x11c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e02:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <SystemInit+0x11c>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4935      	ldr	r1, [pc, #212]	@ (8000edc <SystemInit+0x11c>)
 8000e08:	4b35      	ldr	r3, [pc, #212]	@ (8000ee0 <SystemInit+0x120>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <SystemInit+0x118>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <SystemInit+0x118>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f023 030f 	bic.w	r3, r3, #15
 8000e22:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed8 <SystemInit+0x118>)
 8000e24:	f043 0307 	orr.w	r3, r3, #7
 8000e28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <SystemInit+0x11c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <SystemInit+0x11c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <SystemInit+0x11c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <SystemInit+0x11c>)
 8000e3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ee4 <SystemInit+0x124>)
 8000e40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <SystemInit+0x11c>)
 8000e44:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <SystemInit+0x128>)
 8000e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <SystemInit+0x11c>)
 8000e4a:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <SystemInit+0x12c>)
 8000e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <SystemInit+0x11c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <SystemInit+0x11c>)
 8000e56:	4a25      	ldr	r2, [pc, #148]	@ (8000eec <SystemInit+0x12c>)
 8000e58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <SystemInit+0x11c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <SystemInit+0x11c>)
 8000e62:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <SystemInit+0x12c>)
 8000e64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <SystemInit+0x11c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <SystemInit+0x11c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	@ (8000edc <SystemInit+0x11c>)
 8000e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <SystemInit+0x11c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <SystemInit+0x130>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <SystemInit+0x134>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e8a:	d202      	bcs.n	8000e92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <SystemInit+0x138>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <SystemInit+0x11c>)
 8000e94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d113      	bne.n	8000ec8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <SystemInit+0x11c>)
 8000ea2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <SystemInit+0x11c>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <SystemInit+0x13c>)
 8000eb2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000eb6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <SystemInit+0x11c>)
 8000eba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ebe:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <SystemInit+0x11c>)
 8000ec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ec4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	52002000 	.word	0x52002000
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ee4:	02020200 	.word	0x02020200
 8000ee8:	01ff0000 	.word	0x01ff0000
 8000eec:	01010280 	.word	0x01010280
 8000ef0:	5c001000 	.word	0x5c001000
 8000ef4:	ffff0000 	.word	0xffff0000
 8000ef8:	51008108 	.word	0x51008108
 8000efc:	52004000 	.word	0x52004000

08000f00 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <ExitRun0Mode+0x2c>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <ExitRun0Mode+0x2c>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f10:	bf00      	nop
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <ExitRun0Mode+0x2c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	58024800 	.word	0x58024800

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f6c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f34:	f7ff ffe4 	bl	8000f00 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f38:	f7ff ff42 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f006 fe61 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fbb9 	bl	80006dc <main>
  bx  lr
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f74:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8000f78:	08008868 	.word	0x08008868
  ldr r2, =_sbss
 8000f7c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8000f80:	24000284 	.word	0x24000284

08000f84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC3_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f98c 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f94:	f001 ffd4 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	4913      	ldr	r1, [pc, #76]	@ (8000ff4 <HAL_Init+0x6c>)
 8000fa6:	5ccb      	ldrb	r3, [r1, r3]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_Init+0x6c>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_Init+0x70>)
 8000fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_Init+0x74>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f814 	bl	8001000 <HAL_InitTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e002      	b.n	8000fe8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe2:	f7ff fd7b 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	080087ec 	.word	0x080087ec
 8000ff8:	24000008 	.word	0x24000008
 8000ffc:	24000004 	.word	0x24000004

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_InitTick+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e021      	b.n	8001058 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001014:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_InitTick+0x64>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_InitTick+0x60>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f971 	bl	8001312 <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f93b 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x68>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	24000010 	.word	0x24000010
 8001064:	24000004 	.word	0x24000004
 8001068:	2400000c 	.word	0x2400000c

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	24000010 	.word	0x24000010
 8001090:	24000134 	.word	0x24000134

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24000134 	.word	0x24000134

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	24000010 	.word	0x24000010

080010f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetREVID+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0c1b      	lsrs	r3, r3, #16
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	5c001000 	.word	0x5c001000

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	4313      	orrs	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	05fa0000 	.word	0x05fa0000

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	@ (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff40 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff90 	bl	8001200 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5f 	bl	80011ac <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff33 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa4 	bl	8001268 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001330:	f3bf 8f5f 	dmb	sy
}
 8001334:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_MPU_Disable+0x28>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <HAL_MPU_Disable+0x28>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001340:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001342:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_MPU_Disable+0x2c>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	e000ed90 	.word	0xe000ed90

0800135c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_MPU_Enable+0x38>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_MPU_Enable+0x3c>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_MPU_Enable+0x3c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800137a:	f3bf 8f4f 	dsb	sy
}
 800137e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001380:	f3bf 8f6f 	isb	sy
}
 8001384:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed90 	.word	0xe000ed90
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	785a      	ldrb	r2, [r3, #1]
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_MPU_ConfigRegion+0x7c>)
 80013aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_MPU_ConfigRegion+0x7c>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <HAL_MPU_ConfigRegion+0x7c>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013b8:	4a17      	ldr	r2, [pc, #92]	@ (8001418 <HAL_MPU_ConfigRegion+0x7c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
 80013c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7adb      	ldrb	r3, [r3, #11]
 80013ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7a9b      	ldrb	r3, [r3, #10]
 80013d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7b5b      	ldrb	r3, [r3, #13]
 80013da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7b9b      	ldrb	r3, [r3, #14]
 80013e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7bdb      	ldrb	r3, [r3, #15]
 80013ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7a5b      	ldrb	r3, [r3, #9]
 80013f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7a1b      	ldrb	r3, [r3, #8]
 80013fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001406:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001408:	6113      	str	r3, [r2, #16]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed90 	.word	0xe000ed90

0800141c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fe36 	bl	8001094 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e2dc      	b.n	80019ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d008      	beq.n	8001452 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e2cd      	b.n	80019ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a76      	ldr	r2, [pc, #472]	@ (8001630 <HAL_DMA_Abort+0x214>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d04a      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a74      	ldr	r2, [pc, #464]	@ (8001634 <HAL_DMA_Abort+0x218>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d045      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a73      	ldr	r2, [pc, #460]	@ (8001638 <HAL_DMA_Abort+0x21c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d040      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a71      	ldr	r2, [pc, #452]	@ (800163c <HAL_DMA_Abort+0x220>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d03b      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a70      	ldr	r2, [pc, #448]	@ (8001640 <HAL_DMA_Abort+0x224>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d036      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6e      	ldr	r2, [pc, #440]	@ (8001644 <HAL_DMA_Abort+0x228>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d031      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6d      	ldr	r2, [pc, #436]	@ (8001648 <HAL_DMA_Abort+0x22c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d02c      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a6b      	ldr	r2, [pc, #428]	@ (800164c <HAL_DMA_Abort+0x230>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d027      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001650 <HAL_DMA_Abort+0x234>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d022      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a68      	ldr	r2, [pc, #416]	@ (8001654 <HAL_DMA_Abort+0x238>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01d      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a67      	ldr	r2, [pc, #412]	@ (8001658 <HAL_DMA_Abort+0x23c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d018      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	@ (800165c <HAL_DMA_Abort+0x240>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a64      	ldr	r2, [pc, #400]	@ (8001660 <HAL_DMA_Abort+0x244>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00e      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a62      	ldr	r2, [pc, #392]	@ (8001664 <HAL_DMA_Abort+0x248>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d009      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a61      	ldr	r2, [pc, #388]	@ (8001668 <HAL_DMA_Abort+0x24c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d004      	beq.n	80014f2 <HAL_DMA_Abort+0xd6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a5f      	ldr	r2, [pc, #380]	@ (800166c <HAL_DMA_Abort+0x250>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_DMA_Abort+0xda>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_DMA_Abort+0xdc>
 80014f6:	2300      	movs	r3, #0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 021e 	bic.w	r2, r2, #30
 800150a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800151a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e00a      	b.n	800153a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020e 	bic.w	r2, r2, #14
 8001532:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a3c      	ldr	r2, [pc, #240]	@ (8001630 <HAL_DMA_Abort+0x214>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d072      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a3a      	ldr	r2, [pc, #232]	@ (8001634 <HAL_DMA_Abort+0x218>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d06d      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a39      	ldr	r2, [pc, #228]	@ (8001638 <HAL_DMA_Abort+0x21c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d068      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a37      	ldr	r2, [pc, #220]	@ (800163c <HAL_DMA_Abort+0x220>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d063      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a36      	ldr	r2, [pc, #216]	@ (8001640 <HAL_DMA_Abort+0x224>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05e      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a34      	ldr	r2, [pc, #208]	@ (8001644 <HAL_DMA_Abort+0x228>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d059      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <HAL_DMA_Abort+0x22c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d054      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a31      	ldr	r2, [pc, #196]	@ (800164c <HAL_DMA_Abort+0x230>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d04f      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a30      	ldr	r2, [pc, #192]	@ (8001650 <HAL_DMA_Abort+0x234>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d04a      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a2e      	ldr	r2, [pc, #184]	@ (8001654 <HAL_DMA_Abort+0x238>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d045      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001658 <HAL_DMA_Abort+0x23c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d040      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2b      	ldr	r2, [pc, #172]	@ (800165c <HAL_DMA_Abort+0x240>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d03b      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001660 <HAL_DMA_Abort+0x244>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d036      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a28      	ldr	r2, [pc, #160]	@ (8001664 <HAL_DMA_Abort+0x248>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d031      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <HAL_DMA_Abort+0x24c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d02c      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a25      	ldr	r2, [pc, #148]	@ (800166c <HAL_DMA_Abort+0x250>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d027      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a24      	ldr	r2, [pc, #144]	@ (8001670 <HAL_DMA_Abort+0x254>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d022      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_DMA_Abort+0x258>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01d      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <HAL_DMA_Abort+0x25c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d018      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <HAL_DMA_Abort+0x260>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <HAL_DMA_Abort+0x264>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00e      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_DMA_Abort+0x268>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d009      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_DMA_Abort+0x26c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d004      	beq.n	800162a <HAL_DMA_Abort+0x20e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_DMA_Abort+0x270>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d132      	bne.n	8001690 <HAL_DMA_Abort+0x274>
 800162a:	2301      	movs	r3, #1
 800162c:	e031      	b.n	8001692 <HAL_DMA_Abort+0x276>
 800162e:	bf00      	nop
 8001630:	40020010 	.word	0x40020010
 8001634:	40020028 	.word	0x40020028
 8001638:	40020040 	.word	0x40020040
 800163c:	40020058 	.word	0x40020058
 8001640:	40020070 	.word	0x40020070
 8001644:	40020088 	.word	0x40020088
 8001648:	400200a0 	.word	0x400200a0
 800164c:	400200b8 	.word	0x400200b8
 8001650:	40020410 	.word	0x40020410
 8001654:	40020428 	.word	0x40020428
 8001658:	40020440 	.word	0x40020440
 800165c:	40020458 	.word	0x40020458
 8001660:	40020470 	.word	0x40020470
 8001664:	40020488 	.word	0x40020488
 8001668:	400204a0 	.word	0x400204a0
 800166c:	400204b8 	.word	0x400204b8
 8001670:	58025408 	.word	0x58025408
 8001674:	5802541c 	.word	0x5802541c
 8001678:	58025430 	.word	0x58025430
 800167c:	58025444 	.word	0x58025444
 8001680:	58025458 	.word	0x58025458
 8001684:	5802546c 	.word	0x5802546c
 8001688:	58025480 	.word	0x58025480
 800168c:	58025494 	.word	0x58025494
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001860 <HAL_DMA_Abort+0x444>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d04a      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001864 <HAL_DMA_Abort+0x448>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d045      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6a      	ldr	r2, [pc, #424]	@ (8001868 <HAL_DMA_Abort+0x44c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d040      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a68      	ldr	r2, [pc, #416]	@ (800186c <HAL_DMA_Abort+0x450>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d03b      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a67      	ldr	r2, [pc, #412]	@ (8001870 <HAL_DMA_Abort+0x454>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d036      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a65      	ldr	r2, [pc, #404]	@ (8001874 <HAL_DMA_Abort+0x458>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d031      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a64      	ldr	r2, [pc, #400]	@ (8001878 <HAL_DMA_Abort+0x45c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d02c      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a62      	ldr	r2, [pc, #392]	@ (800187c <HAL_DMA_Abort+0x460>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d027      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a61      	ldr	r2, [pc, #388]	@ (8001880 <HAL_DMA_Abort+0x464>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a5f      	ldr	r2, [pc, #380]	@ (8001884 <HAL_DMA_Abort+0x468>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01d      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5e      	ldr	r2, [pc, #376]	@ (8001888 <HAL_DMA_Abort+0x46c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d018      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a5c      	ldr	r2, [pc, #368]	@ (800188c <HAL_DMA_Abort+0x470>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a5b      	ldr	r2, [pc, #364]	@ (8001890 <HAL_DMA_Abort+0x474>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00e      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a59      	ldr	r2, [pc, #356]	@ (8001894 <HAL_DMA_Abort+0x478>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d009      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <HAL_DMA_Abort+0x47c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_DMA_Abort+0x32a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a56      	ldr	r2, [pc, #344]	@ (800189c <HAL_DMA_Abort+0x480>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d108      	bne.n	8001758 <HAL_DMA_Abort+0x33c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e007      	b.n	8001768 <HAL_DMA_Abort+0x34c>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001768:	e013      	b.n	8001792 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800176a:	f7ff fc93 	bl	8001094 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b05      	cmp	r3, #5
 8001776:	d90c      	bls.n	8001792 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2220      	movs	r2, #32
 800177c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e12d      	b.n	80019ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e5      	bne.n	800176a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001860 <HAL_DMA_Abort+0x444>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d04a      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001864 <HAL_DMA_Abort+0x448>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d045      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001868 <HAL_DMA_Abort+0x44c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d040      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2a      	ldr	r2, [pc, #168]	@ (800186c <HAL_DMA_Abort+0x450>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d03b      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a29      	ldr	r2, [pc, #164]	@ (8001870 <HAL_DMA_Abort+0x454>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d036      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a27      	ldr	r2, [pc, #156]	@ (8001874 <HAL_DMA_Abort+0x458>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a26      	ldr	r2, [pc, #152]	@ (8001878 <HAL_DMA_Abort+0x45c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d02c      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a24      	ldr	r2, [pc, #144]	@ (800187c <HAL_DMA_Abort+0x460>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d027      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <HAL_DMA_Abort+0x464>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_DMA_Abort+0x468>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a20      	ldr	r2, [pc, #128]	@ (8001888 <HAL_DMA_Abort+0x46c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_DMA_Abort+0x470>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Abort+0x422>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1d      	ldr	r2, [pc, #116]	@ (8001890 <HAL_DMA_Abort+0x474>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Abort+0x422>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_DMA_Abort+0x478>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Abort+0x422>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <HAL_DMA_Abort+0x47c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Abort+0x422>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a18      	ldr	r2, [pc, #96]	@ (800189c <HAL_DMA_Abort+0x480>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Abort+0x426>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Abort+0x428>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d02b      	beq.n	80018a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	223f      	movs	r2, #63	@ 0x3f
 8001858:	409a      	lsls	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	e02a      	b.n	80018b6 <HAL_DMA_Abort+0x49a>
 8001860:	40020010 	.word	0x40020010
 8001864:	40020028 	.word	0x40020028
 8001868:	40020040 	.word	0x40020040
 800186c:	40020058 	.word	0x40020058
 8001870:	40020070 	.word	0x40020070
 8001874:	40020088 	.word	0x40020088
 8001878:	400200a0 	.word	0x400200a0
 800187c:	400200b8 	.word	0x400200b8
 8001880:	40020410 	.word	0x40020410
 8001884:	40020428 	.word	0x40020428
 8001888:	40020440 	.word	0x40020440
 800188c:	40020458 	.word	0x40020458
 8001890:	40020470 	.word	0x40020470
 8001894:	40020488 	.word	0x40020488
 8001898:	400204a0 	.word	0x400204a0
 800189c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2201      	movs	r2, #1
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4f      	ldr	r2, [pc, #316]	@ (80019f8 <HAL_DMA_Abort+0x5dc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d072      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a4d      	ldr	r2, [pc, #308]	@ (80019fc <HAL_DMA_Abort+0x5e0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d06d      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001a00 <HAL_DMA_Abort+0x5e4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d068      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001a04 <HAL_DMA_Abort+0x5e8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d063      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a49      	ldr	r2, [pc, #292]	@ (8001a08 <HAL_DMA_Abort+0x5ec>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d05e      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a47      	ldr	r2, [pc, #284]	@ (8001a0c <HAL_DMA_Abort+0x5f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d059      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a46      	ldr	r2, [pc, #280]	@ (8001a10 <HAL_DMA_Abort+0x5f4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d054      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a44      	ldr	r2, [pc, #272]	@ (8001a14 <HAL_DMA_Abort+0x5f8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d04f      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a43      	ldr	r2, [pc, #268]	@ (8001a18 <HAL_DMA_Abort+0x5fc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04a      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a41      	ldr	r2, [pc, #260]	@ (8001a1c <HAL_DMA_Abort+0x600>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d045      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a40      	ldr	r2, [pc, #256]	@ (8001a20 <HAL_DMA_Abort+0x604>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d040      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a3e      	ldr	r2, [pc, #248]	@ (8001a24 <HAL_DMA_Abort+0x608>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d03b      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3d      	ldr	r2, [pc, #244]	@ (8001a28 <HAL_DMA_Abort+0x60c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d036      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a2c <HAL_DMA_Abort+0x610>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d031      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a3a      	ldr	r2, [pc, #232]	@ (8001a30 <HAL_DMA_Abort+0x614>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02c      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a38      	ldr	r2, [pc, #224]	@ (8001a34 <HAL_DMA_Abort+0x618>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d027      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a37      	ldr	r2, [pc, #220]	@ (8001a38 <HAL_DMA_Abort+0x61c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a35      	ldr	r2, [pc, #212]	@ (8001a3c <HAL_DMA_Abort+0x620>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01d      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a34      	ldr	r2, [pc, #208]	@ (8001a40 <HAL_DMA_Abort+0x624>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a32      	ldr	r2, [pc, #200]	@ (8001a44 <HAL_DMA_Abort+0x628>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a31      	ldr	r2, [pc, #196]	@ (8001a48 <HAL_DMA_Abort+0x62c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <HAL_DMA_Abort+0x630>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2e      	ldr	r2, [pc, #184]	@ (8001a50 <HAL_DMA_Abort+0x634>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_DMA_Abort+0x58a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a54 <HAL_DMA_Abort+0x638>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_DMA_Abort+0x58e>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_DMA_Abort+0x590>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00c      	beq.n	80019dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40020010 	.word	0x40020010
 80019fc:	40020028 	.word	0x40020028
 8001a00:	40020040 	.word	0x40020040
 8001a04:	40020058 	.word	0x40020058
 8001a08:	40020070 	.word	0x40020070
 8001a0c:	40020088 	.word	0x40020088
 8001a10:	400200a0 	.word	0x400200a0
 8001a14:	400200b8 	.word	0x400200b8
 8001a18:	40020410 	.word	0x40020410
 8001a1c:	40020428 	.word	0x40020428
 8001a20:	40020440 	.word	0x40020440
 8001a24:	40020458 	.word	0x40020458
 8001a28:	40020470 	.word	0x40020470
 8001a2c:	40020488 	.word	0x40020488
 8001a30:	400204a0 	.word	0x400204a0
 8001a34:	400204b8 	.word	0x400204b8
 8001a38:	58025408 	.word	0x58025408
 8001a3c:	5802541c 	.word	0x5802541c
 8001a40:	58025430 	.word	0x58025430
 8001a44:	58025444 	.word	0x58025444
 8001a48:	58025458 	.word	0x58025458
 8001a4c:	5802546c 	.word	0x5802546c
 8001a50:	58025480 	.word	0x58025480
 8001a54:	58025494 	.word	0x58025494

08001a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e237      	b.n	8001eda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d004      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2280      	movs	r2, #128	@ 0x80
 8001a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e22c      	b.n	8001eda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1a0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bfc <HAL_DMA_Abort_IT+0x1a4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a59      	ldr	r2, [pc, #356]	@ (8001c00 <HAL_DMA_Abort_IT+0x1a8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_DMA_Abort_IT+0x1ac>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a56      	ldr	r2, [pc, #344]	@ (8001c08 <HAL_DMA_Abort_IT+0x1b0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a55      	ldr	r2, [pc, #340]	@ (8001c0c <HAL_DMA_Abort_IT+0x1b4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a53      	ldr	r2, [pc, #332]	@ (8001c10 <HAL_DMA_Abort_IT+0x1b8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a52      	ldr	r2, [pc, #328]	@ (8001c14 <HAL_DMA_Abort_IT+0x1bc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a50      	ldr	r2, [pc, #320]	@ (8001c18 <HAL_DMA_Abort_IT+0x1c0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a4f      	ldr	r2, [pc, #316]	@ (8001c1c <HAL_DMA_Abort_IT+0x1c4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8001c20 <HAL_DMA_Abort_IT+0x1c8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4c      	ldr	r2, [pc, #304]	@ (8001c24 <HAL_DMA_Abort_IT+0x1cc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a4a      	ldr	r2, [pc, #296]	@ (8001c28 <HAL_DMA_Abort_IT+0x1d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a49      	ldr	r2, [pc, #292]	@ (8001c2c <HAL_DMA_Abort_IT+0x1d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a47      	ldr	r2, [pc, #284]	@ (8001c30 <HAL_DMA_Abort_IT+0x1d8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Abort_IT+0xc8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <HAL_DMA_Abort_IT+0x1dc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Abort_IT+0xcc>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_Abort_IT+0xce>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8086 	beq.w	8001c38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1a0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d04a      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2e      	ldr	r2, [pc, #184]	@ (8001bfc <HAL_DMA_Abort_IT+0x1a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d045      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001c00 <HAL_DMA_Abort_IT+0x1a8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d040      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2b      	ldr	r2, [pc, #172]	@ (8001c04 <HAL_DMA_Abort_IT+0x1ac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d03b      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a29      	ldr	r2, [pc, #164]	@ (8001c08 <HAL_DMA_Abort_IT+0x1b0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d036      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <HAL_DMA_Abort_IT+0x1b4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d031      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <HAL_DMA_Abort_IT+0x1b8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d02c      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a25      	ldr	r2, [pc, #148]	@ (8001c14 <HAL_DMA_Abort_IT+0x1bc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d027      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <HAL_DMA_Abort_IT+0x1c0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d022      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <HAL_DMA_Abort_IT+0x1c4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d01d      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <HAL_DMA_Abort_IT+0x1c8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d018      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <HAL_DMA_Abort_IT+0x1cc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <HAL_DMA_Abort_IT+0x1d0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00e      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1c      	ldr	r2, [pc, #112]	@ (8001c2c <HAL_DMA_Abort_IT+0x1d4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_DMA_Abort_IT+0x1d8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x17c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_DMA_Abort_IT+0x1dc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <HAL_DMA_Abort_IT+0x18e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e178      	b.n	8001ed8 <HAL_DMA_Abort_IT+0x480>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e16f      	b.n	8001ed8 <HAL_DMA_Abort_IT+0x480>
 8001bf8:	40020010 	.word	0x40020010
 8001bfc:	40020028 	.word	0x40020028
 8001c00:	40020040 	.word	0x40020040
 8001c04:	40020058 	.word	0x40020058
 8001c08:	40020070 	.word	0x40020070
 8001c0c:	40020088 	.word	0x40020088
 8001c10:	400200a0 	.word	0x400200a0
 8001c14:	400200b8 	.word	0x400200b8
 8001c18:	40020410 	.word	0x40020410
 8001c1c:	40020428 	.word	0x40020428
 8001c20:	40020440 	.word	0x40020440
 8001c24:	40020458 	.word	0x40020458
 8001c28:	40020470 	.word	0x40020470
 8001c2c:	40020488 	.word	0x40020488
 8001c30:	400204a0 	.word	0x400204a0
 8001c34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 020e 	bic.w	r2, r2, #14
 8001c46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6c      	ldr	r2, [pc, #432]	@ (8001e00 <HAL_DMA_Abort_IT+0x3a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d04a      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6b      	ldr	r2, [pc, #428]	@ (8001e04 <HAL_DMA_Abort_IT+0x3ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d045      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a69      	ldr	r2, [pc, #420]	@ (8001e08 <HAL_DMA_Abort_IT+0x3b0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d040      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a68      	ldr	r2, [pc, #416]	@ (8001e0c <HAL_DMA_Abort_IT+0x3b4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d03b      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a66      	ldr	r2, [pc, #408]	@ (8001e10 <HAL_DMA_Abort_IT+0x3b8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d036      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a65      	ldr	r2, [pc, #404]	@ (8001e14 <HAL_DMA_Abort_IT+0x3bc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d031      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a63      	ldr	r2, [pc, #396]	@ (8001e18 <HAL_DMA_Abort_IT+0x3c0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d02c      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a62      	ldr	r2, [pc, #392]	@ (8001e1c <HAL_DMA_Abort_IT+0x3c4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d027      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a60      	ldr	r2, [pc, #384]	@ (8001e20 <HAL_DMA_Abort_IT+0x3c8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d022      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5f      	ldr	r2, [pc, #380]	@ (8001e24 <HAL_DMA_Abort_IT+0x3cc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d01d      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e28 <HAL_DMA_Abort_IT+0x3d0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d018      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a5c      	ldr	r2, [pc, #368]	@ (8001e2c <HAL_DMA_Abort_IT+0x3d4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e30 <HAL_DMA_Abort_IT+0x3d8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a59      	ldr	r2, [pc, #356]	@ (8001e34 <HAL_DMA_Abort_IT+0x3dc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	@ (8001e38 <HAL_DMA_Abort_IT+0x3e0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x290>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <HAL_DMA_Abort_IT+0x3e4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d108      	bne.n	8001cfa <HAL_DMA_Abort_IT+0x2a2>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <HAL_DMA_Abort_IT+0x2b2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e00 <HAL_DMA_Abort_IT+0x3a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d072      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3a      	ldr	r2, [pc, #232]	@ (8001e04 <HAL_DMA_Abort_IT+0x3ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d06d      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a39      	ldr	r2, [pc, #228]	@ (8001e08 <HAL_DMA_Abort_IT+0x3b0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d068      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a37      	ldr	r2, [pc, #220]	@ (8001e0c <HAL_DMA_Abort_IT+0x3b4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d063      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a36      	ldr	r2, [pc, #216]	@ (8001e10 <HAL_DMA_Abort_IT+0x3b8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d05e      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a34      	ldr	r2, [pc, #208]	@ (8001e14 <HAL_DMA_Abort_IT+0x3bc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d059      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a33      	ldr	r2, [pc, #204]	@ (8001e18 <HAL_DMA_Abort_IT+0x3c0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d054      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a31      	ldr	r2, [pc, #196]	@ (8001e1c <HAL_DMA_Abort_IT+0x3c4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d04f      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a30      	ldr	r2, [pc, #192]	@ (8001e20 <HAL_DMA_Abort_IT+0x3c8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04a      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2e      	ldr	r2, [pc, #184]	@ (8001e24 <HAL_DMA_Abort_IT+0x3cc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d045      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <HAL_DMA_Abort_IT+0x3d0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <HAL_DMA_Abort_IT+0x3d4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d03b      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <HAL_DMA_Abort_IT+0x3d8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d036      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a28      	ldr	r2, [pc, #160]	@ (8001e34 <HAL_DMA_Abort_IT+0x3dc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <HAL_DMA_Abort_IT+0x3e0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d02c      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a25      	ldr	r2, [pc, #148]	@ (8001e3c <HAL_DMA_Abort_IT+0x3e4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a24      	ldr	r2, [pc, #144]	@ (8001e40 <HAL_DMA_Abort_IT+0x3e8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <HAL_DMA_Abort_IT+0x3ec>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <HAL_DMA_Abort_IT+0x3f0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <HAL_DMA_Abort_IT+0x3f4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <HAL_DMA_Abort_IT+0x3f8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <HAL_DMA_Abort_IT+0x3fc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	@ (8001e58 <HAL_DMA_Abort_IT+0x400>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x3a2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <HAL_DMA_Abort_IT+0x404>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d132      	bne.n	8001e60 <HAL_DMA_Abort_IT+0x408>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e031      	b.n	8001e62 <HAL_DMA_Abort_IT+0x40a>
 8001dfe:	bf00      	nop
 8001e00:	40020010 	.word	0x40020010
 8001e04:	40020028 	.word	0x40020028
 8001e08:	40020040 	.word	0x40020040
 8001e0c:	40020058 	.word	0x40020058
 8001e10:	40020070 	.word	0x40020070
 8001e14:	40020088 	.word	0x40020088
 8001e18:	400200a0 	.word	0x400200a0
 8001e1c:	400200b8 	.word	0x400200b8
 8001e20:	40020410 	.word	0x40020410
 8001e24:	40020428 	.word	0x40020428
 8001e28:	40020440 	.word	0x40020440
 8001e2c:	40020458 	.word	0x40020458
 8001e30:	40020470 	.word	0x40020470
 8001e34:	40020488 	.word	0x40020488
 8001e38:	400204a0 	.word	0x400204a0
 8001e3c:	400204b8 	.word	0x400204b8
 8001e40:	58025408 	.word	0x58025408
 8001e44:	5802541c 	.word	0x5802541c
 8001e48:	58025430 	.word	0x58025430
 8001e4c:	58025444 	.word	0x58025444
 8001e50:	58025458 	.word	0x58025458
 8001e54:	5802546c 	.word	0x5802546c
 8001e58:	58025480 	.word	0x58025480
 8001e5c:	58025494 	.word	0x58025494
 8001e60:	2300      	movs	r3, #0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d028      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2201      	movs	r2, #1
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001eb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ef2:	4b89      	ldr	r3, [pc, #548]	@ (8002118 <HAL_GPIO_Init+0x234>)
 8001ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ef6:	e194      	b.n	8002222 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8186 	beq.w	800221c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <HAL_GPIO_Init+0x44>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 0201 	and.w	r2, r3, #1
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d017      	beq.n	8001fc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d123      	bne.n	800201a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	69b9      	ldr	r1, [r7, #24]
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0203 	and.w	r2, r3, #3
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80e0 	beq.w	800221c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205c:	4b2f      	ldr	r3, [pc, #188]	@ (800211c <HAL_GPIO_Init+0x238>)
 800205e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002062:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <HAL_GPIO_Init+0x238>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_GPIO_Init+0x238>)
 800206e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a29      	ldr	r2, [pc, #164]	@ (8002120 <HAL_GPIO_Init+0x23c>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a20      	ldr	r2, [pc, #128]	@ (8002124 <HAL_GPIO_Init+0x240>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d052      	beq.n	800214c <HAL_GPIO_Init+0x268>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002128 <HAL_GPIO_Init+0x244>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d031      	beq.n	8002112 <HAL_GPIO_Init+0x22e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	@ (800212c <HAL_GPIO_Init+0x248>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d02b      	beq.n	800210e <HAL_GPIO_Init+0x22a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <HAL_GPIO_Init+0x24c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d025      	beq.n	800210a <HAL_GPIO_Init+0x226>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002134 <HAL_GPIO_Init+0x250>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01f      	beq.n	8002106 <HAL_GPIO_Init+0x222>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002138 <HAL_GPIO_Init+0x254>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x21e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_GPIO_Init+0x258>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a19      	ldr	r2, [pc, #100]	@ (8002140 <HAL_GPIO_Init+0x25c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <HAL_GPIO_Init+0x260>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a17      	ldr	r2, [pc, #92]	@ (8002148 <HAL_GPIO_Init+0x264>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x20e>
 80020ee:	2309      	movs	r3, #9
 80020f0:	e02d      	b.n	800214e <HAL_GPIO_Init+0x26a>
 80020f2:	230a      	movs	r3, #10
 80020f4:	e02b      	b.n	800214e <HAL_GPIO_Init+0x26a>
 80020f6:	2308      	movs	r3, #8
 80020f8:	e029      	b.n	800214e <HAL_GPIO_Init+0x26a>
 80020fa:	2307      	movs	r3, #7
 80020fc:	e027      	b.n	800214e <HAL_GPIO_Init+0x26a>
 80020fe:	2306      	movs	r3, #6
 8002100:	e025      	b.n	800214e <HAL_GPIO_Init+0x26a>
 8002102:	2305      	movs	r3, #5
 8002104:	e023      	b.n	800214e <HAL_GPIO_Init+0x26a>
 8002106:	2304      	movs	r3, #4
 8002108:	e021      	b.n	800214e <HAL_GPIO_Init+0x26a>
 800210a:	2303      	movs	r3, #3
 800210c:	e01f      	b.n	800214e <HAL_GPIO_Init+0x26a>
 800210e:	2302      	movs	r3, #2
 8002110:	e01d      	b.n	800214e <HAL_GPIO_Init+0x26a>
 8002112:	2301      	movs	r3, #1
 8002114:	e01b      	b.n	800214e <HAL_GPIO_Init+0x26a>
 8002116:	bf00      	nop
 8002118:	58000080 	.word	0x58000080
 800211c:	58024400 	.word	0x58024400
 8002120:	58000400 	.word	0x58000400
 8002124:	58020000 	.word	0x58020000
 8002128:	58020400 	.word	0x58020400
 800212c:	58020800 	.word	0x58020800
 8002130:	58020c00 	.word	0x58020c00
 8002134:	58021000 	.word	0x58021000
 8002138:	58021400 	.word	0x58021400
 800213c:	58021800 	.word	0x58021800
 8002140:	58021c00 	.word	0x58021c00
 8002144:	58022000 	.word	0x58022000
 8002148:	58022400 	.word	0x58022400
 800214c:	2300      	movs	r3, #0
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	f002 0203 	and.w	r2, r2, #3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4093      	lsls	r3, r2
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215e:	4938      	ldr	r1, [pc, #224]	@ (8002240 <HAL_GPIO_Init+0x35c>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f ae63 	bne.w	8001ef8 <HAL_GPIO_Init+0x14>
  }
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	3724      	adds	r7, #36	@ 0x24
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	58000400 	.word	0x58000400

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002284:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fba3 	bl	80009e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d00a      	beq.n	80022d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c0:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01f      	b.n	8002312 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e01d      	b.n	8002312 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	490f      	ldr	r1, [pc, #60]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022e6:	f7fe fed5 	bl	8001094 <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ec:	e009      	b.n	8002302 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ee:	f7fe fed1 	bl	8001094 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022fc:	d901      	bls.n	8002302 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800230e:	d1ee      	bne.n	80022ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	58024800 	.word	0x58024800

08002320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 bc48 	b.w	8002bc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8088 	beq.w	8002452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b99      	ldr	r3, [pc, #612]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800234c:	4b96      	ldr	r3, [pc, #600]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	2b10      	cmp	r3, #16
 8002356:	d007      	beq.n	8002368 <HAL_RCC_OscConfig+0x48>
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235a:	2b18      	cmp	r3, #24
 800235c:	d111      	bne.n	8002382 <HAL_RCC_OscConfig+0x62>
 800235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b8f      	ldr	r3, [pc, #572]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d06d      	beq.n	8002450 <HAL_RCC_OscConfig+0x130>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d169      	bne.n	8002450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f000 bc21 	b.w	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x7a>
 800238c:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a85      	ldr	r2, [pc, #532]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e02e      	b.n	80023f8 <HAL_RCC_OscConfig+0xd8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x9c>
 80023a2:	4b81      	ldr	r3, [pc, #516]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a80      	ldr	r2, [pc, #512]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b7e      	ldr	r3, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7d      	ldr	r2, [pc, #500]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0xd8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0xc0>
 80023c6:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b75      	ldr	r3, [pc, #468]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a74      	ldr	r2, [pc, #464]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0xd8>
 80023e0:	4b71      	ldr	r3, [pc, #452]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a70      	ldr	r2, [pc, #448]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b6e      	ldr	r3, [pc, #440]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6d      	ldr	r2, [pc, #436]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fe48 	bl	8001094 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fe44 	bl	8001094 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e3d4      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xe8>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fe34 	bl	8001094 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fe30 	bl	8001094 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e3c0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x110>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80ca 	beq.w	80025f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002460:	4b51      	ldr	r3, [pc, #324]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800246a:	4b4f      	ldr	r3, [pc, #316]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_RCC_OscConfig+0x166>
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	2b18      	cmp	r3, #24
 800247a:	d156      	bne.n	800252a <HAL_RCC_OscConfig+0x20a>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d151      	bne.n	800252a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002486:	4b48      	ldr	r3, [pc, #288]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x17e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e392      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800249e:	4b42      	ldr	r3, [pc, #264]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0219 	bic.w	r2, r3, #25
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	493f      	ldr	r1, [pc, #252]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdf0 	bl	8001094 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdec 	bl	8001094 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e37c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ca:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	f7fe fe0d 	bl	80010f4 <HAL_GetREVID>
 80024da:	4603      	mov	r3, r0
 80024dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d817      	bhi.n	8002514 <HAL_RCC_OscConfig+0x1f4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b40      	cmp	r3, #64	@ 0x40
 80024ea:	d108      	bne.n	80024fe <HAL_RCC_OscConfig+0x1de>
 80024ec:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024f4:	4a2c      	ldr	r2, [pc, #176]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fc:	e07a      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	031b      	lsls	r3, r3, #12
 800250c:	4926      	ldr	r1, [pc, #152]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002512:	e06f      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	4921      	ldr	r1, [pc, #132]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	e064      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d047      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002532:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0219 	bic.w	r2, r3, #25
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	491a      	ldr	r1, [pc, #104]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fda6 	bl	8001094 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe fda2 	bl	8001094 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e332      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	f7fe fdc3 	bl	80010f4 <HAL_GetREVID>
 800256e:	4603      	mov	r3, r0
 8002570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002574:	4293      	cmp	r3, r2
 8002576:	d819      	bhi.n	80025ac <HAL_RCC_OscConfig+0x28c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d108      	bne.n	8002592 <HAL_RCC_OscConfig+0x272>
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002588:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800258a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258e:	6053      	str	r3, [r2, #4]
 8002590:	e030      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	031b      	lsls	r3, r3, #12
 80025a0:	4901      	ldr	r1, [pc, #4]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
 80025a6:	e025      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
 80025a8:	58024400 	.word	0x58024400
 80025ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	4997      	ldr	r1, [pc, #604]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	e018      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b95      	ldr	r3, [pc, #596]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a94      	ldr	r2, [pc, #592]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fd61 	bl	8001094 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fd5d 	bl	8001094 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2ed      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a9 	beq.w	8002754 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b85      	ldr	r3, [pc, #532]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800260c:	4b82      	ldr	r3, [pc, #520]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d007      	beq.n	8002628 <HAL_RCC_OscConfig+0x308>
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b18      	cmp	r3, #24
 800261c:	d13a      	bne.n	8002694 <HAL_RCC_OscConfig+0x374>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d135      	bne.n	8002694 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002628:	4b7b      	ldr	r3, [pc, #492]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x320>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b80      	cmp	r3, #128	@ 0x80
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2c1      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002640:	f7fe fd58 	bl	80010f4 <HAL_GetREVID>
 8002644:	4603      	mov	r3, r0
 8002646:	f241 0203 	movw	r2, #4099	@ 0x1003
 800264a:	4293      	cmp	r3, r2
 800264c:	d817      	bhi.n	800267e <HAL_RCC_OscConfig+0x35e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	2b20      	cmp	r3, #32
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x348>
 8002656:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800265e:	4a6e      	ldr	r2, [pc, #440]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002664:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002666:	e075      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002668:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	069b      	lsls	r3, r3, #26
 8002676:	4968      	ldr	r1, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800267c:	e06a      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267e:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	061b      	lsls	r3, r3, #24
 800268c:	4962      	ldr	r1, [pc, #392]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002692:	e05f      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d042      	beq.n	8002722 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800269c:	4b5e      	ldr	r3, [pc, #376]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fcf4 	bl	8001094 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026b0:	f7fe fcf0 	bl	8001094 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e280      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026c2:	4b55      	ldr	r3, [pc, #340]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ce:	f7fe fd11 	bl	80010f4 <HAL_GetREVID>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026d8:	4293      	cmp	r3, r2
 80026da:	d817      	bhi.n	800270c <HAL_RCC_OscConfig+0x3ec>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d108      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3d6>
 80026e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026f2:	6053      	str	r3, [r2, #4]
 80026f4:	e02e      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
 80026f6:	4b48      	ldr	r3, [pc, #288]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	069b      	lsls	r3, r3, #26
 8002704:	4944      	ldr	r1, [pc, #272]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
 800270a:	e023      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
 800270c:	4b42      	ldr	r3, [pc, #264]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	493f      	ldr	r1, [pc, #252]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	4313      	orrs	r3, r2
 800271e:	60cb      	str	r3, [r1, #12]
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a3c      	ldr	r2, [pc, #240]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fcb1 	bl	8001094 <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002736:	f7fe fcad 	bl	8001094 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e23d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002748:	4b33      	ldr	r3, [pc, #204]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d036      	beq.n	80027ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d019      	beq.n	800279c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276c:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fc8e 	bl	8001094 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe fc8a 	bl	8001094 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e21a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x45c>
 800279a:	e018      	b.n	80027ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fc74 	bl	8001094 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe fc70 	bl	8001094 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e200      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d039      	beq.n	800284e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01c      	beq.n	800281c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fc51 	bl	8001094 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f6:	f7fe fc4d 	bl	8001094 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1dd      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
 8002814:	e01b      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
 8002816:	bf00      	nop
 8002818:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800281c:	4b9b      	ldr	r3, [pc, #620]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a9a      	ldr	r2, [pc, #616]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002828:	f7fe fc34 	bl	8001094 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002830:	f7fe fc30 	bl	8001094 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1c0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002842:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8081 	beq.w	800295e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800285c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a90 <HAL_RCC_OscConfig+0x770>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a8b      	ldr	r2, [pc, #556]	@ (8002a90 <HAL_RCC_OscConfig+0x770>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002868:	f7fe fc14 	bl	8001094 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe fc10 	bl	8001094 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1a0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002882:	4b83      	ldr	r3, [pc, #524]	@ (8002a90 <HAL_RCC_OscConfig+0x770>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_OscConfig+0x584>
 8002896:	4b7d      	ldr	r3, [pc, #500]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	e02d      	b.n	8002900 <HAL_RCC_OscConfig+0x5e0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0x5a6>
 80028ac:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	4a76      	ldr	r2, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b8:	4b74      	ldr	r3, [pc, #464]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a73      	ldr	r2, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x5e0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c8>
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028da:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x5e0>
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a67      	ldr	r2, [pc, #412]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a64      	ldr	r2, [pc, #400]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fbc4 	bl	8001094 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fbc0 	bl	8001094 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e14e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002926:	4b59      	ldr	r3, [pc, #356]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCC_OscConfig+0x5f0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fbae 	bl	8001094 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fbaa 	bl	8001094 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e138      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002952:	4b4e      	ldr	r3, [pc, #312]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 812d 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002968:	4b48      	ldr	r3, [pc, #288]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002970:	2b18      	cmp	r3, #24
 8002972:	f000 80bd 	beq.w	8002af0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	2b02      	cmp	r3, #2
 800297c:	f040 809e 	bne.w	8002abc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b42      	ldr	r3, [pc, #264]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a41      	ldr	r2, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fb82 	bl	8001094 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fb7e 	bl	8001094 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e10e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a6:	4b39      	ldr	r3, [pc, #228]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b2:	4b36      	ldr	r3, [pc, #216]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b6:	4b37      	ldr	r3, [pc, #220]	@ (8002a94 <HAL_RCC_OscConfig+0x774>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	430a      	orrs	r2, r1
 80029c6:	4931      	ldr	r1, [pc, #196]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	3b01      	subs	r3, #1
 80029d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	3b01      	subs	r3, #1
 80029dc:	025b      	lsls	r3, r3, #9
 80029de:	b29b      	uxth	r3, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	3b01      	subs	r3, #1
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029fc:	4923      	ldr	r1, [pc, #140]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a12:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a1a:	00d2      	lsls	r2, r2, #3
 8002a1c:	491b      	ldr	r1, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	f023 020c 	bic.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	4917      	ldr	r1, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f023 0202 	bic.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	4912      	ldr	r1, [pc, #72]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	4a10      	ldr	r2, [pc, #64]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	4a07      	ldr	r2, [pc, #28]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fb07 	bl	8001094 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a88:	e011      	b.n	8002aae <HAL_RCC_OscConfig+0x78e>
 8002a8a:	bf00      	nop
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	58024800 	.word	0x58024800
 8002a94:	fffffc0c 	.word	0xfffffc0c
 8002a98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fafa 	bl	8001094 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e08a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x77c>
 8002aba:	e082      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b43      	ldr	r3, [pc, #268]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a42      	ldr	r2, [pc, #264]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fae4 	bl	8001094 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fae0 	bl	8001094 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e070      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x7b0>
 8002aee:	e068      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002af0:	4b36      	ldr	r3, [pc, #216]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002af6:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d031      	beq.n	8002b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d12a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d122      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	0e1b      	lsrs	r3, r3, #24
 8002b5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e02b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b6c:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b70:	08db      	lsrs	r3, r3, #3
 8002b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d01f      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8e:	f7fe fa81 	bl	8001094 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b94:	bf00      	nop
 8002b96:	f7fe fa7d 	bl	8001094 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d0f9      	beq.n	8002b96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <HAL_RCC_OscConfig+0x8b0>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	4906      	ldr	r1, [pc, #24]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bb6:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3730      	adds	r7, #48	@ 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	ffff0007 	.word	0xffff0007

08002bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e19c      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d910      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b87      	ldr	r3, [pc, #540]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 020f 	bic.w	r2, r3, #15
 8002bfe:	4985      	ldr	r1, [pc, #532]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e184      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d908      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c34:	4b78      	ldr	r3, [pc, #480]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4975      	ldr	r1, [pc, #468]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b70      	ldr	r3, [pc, #448]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d908      	bls.n	8002c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	496a      	ldr	r1, [pc, #424]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d908      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c90:	4b61      	ldr	r3, [pc, #388]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	495e      	ldr	r1, [pc, #376]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d908      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cbe:	4b56      	ldr	r3, [pc, #344]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4953      	ldr	r1, [pc, #332]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f023 020f 	bic.w	r2, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4947      	ldr	r1, [pc, #284]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d055      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d0a:	4b43      	ldr	r3, [pc, #268]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4940      	ldr	r1, [pc, #256]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d24:	4b3c      	ldr	r3, [pc, #240]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0f6      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d3c:	4b36      	ldr	r3, [pc, #216]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d115      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0ea      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d54:	4b30      	ldr	r3, [pc, #192]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0de      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d64:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0d6      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d74:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f023 0207 	bic.w	r2, r3, #7
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4925      	ldr	r1, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d86:	f7fe f985 	bl	8001094 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8e:	f7fe f981 	bl	8001094 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0be      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d1eb      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d208      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	490e      	ldr	r1, [pc, #56]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d214      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	4906      	ldr	r1, [pc, #24]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e086      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
 8002e14:	52002000 	.word	0x52002000
 8002e18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d208      	bcs.n	8002e4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e38:	4b3c      	ldr	r3, [pc, #240]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4939      	ldr	r1, [pc, #228]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d208      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	492e      	ldr	r1, [pc, #184]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d208      	bcs.n	8002ea6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4922      	ldr	r1, [pc, #136]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d208      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4917      	ldr	r1, [pc, #92]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ed4:	f000 f834 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <HAL_RCC_ClockConfig+0x35c>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_RCC_ClockConfig+0x35c>)
 8002efc:	5cd3      	ldrb	r3, [r2, r3]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x360>)
 8002f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <HAL_RCC_ClockConfig+0x364>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <HAL_RCC_ClockConfig+0x368>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe f872 	bl	8001000 <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	080087ec 	.word	0x080087ec
 8002f34:	24000008 	.word	0x24000008
 8002f38:	24000004 	.word	0x24000004
 8002f3c:	2400000c 	.word	0x2400000c

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f46:	4bb3      	ldr	r3, [pc, #716]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	f200 8155 	bhi.w	80031fe <HAL_RCC_GetSysClockFreq+0x2be>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	080031ff 	.word	0x080031ff
 8002f64:	080031ff 	.word	0x080031ff
 8002f68:	080031ff 	.word	0x080031ff
 8002f6c:	080031ff 	.word	0x080031ff
 8002f70:	080031ff 	.word	0x080031ff
 8002f74:	080031ff 	.word	0x080031ff
 8002f78:	080031ff 	.word	0x080031ff
 8002f7c:	08002fe7 	.word	0x08002fe7
 8002f80:	080031ff 	.word	0x080031ff
 8002f84:	080031ff 	.word	0x080031ff
 8002f88:	080031ff 	.word	0x080031ff
 8002f8c:	080031ff 	.word	0x080031ff
 8002f90:	080031ff 	.word	0x080031ff
 8002f94:	080031ff 	.word	0x080031ff
 8002f98:	080031ff 	.word	0x080031ff
 8002f9c:	08002fed 	.word	0x08002fed
 8002fa0:	080031ff 	.word	0x080031ff
 8002fa4:	080031ff 	.word	0x080031ff
 8002fa8:	080031ff 	.word	0x080031ff
 8002fac:	080031ff 	.word	0x080031ff
 8002fb0:	080031ff 	.word	0x080031ff
 8002fb4:	080031ff 	.word	0x080031ff
 8002fb8:	080031ff 	.word	0x080031ff
 8002fbc:	08002ff3 	.word	0x08002ff3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fc0:	4b94      	ldr	r3, [pc, #592]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fcc:	4b91      	ldr	r3, [pc, #580]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	4a90      	ldr	r2, [pc, #576]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fde:	e111      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe2:	61bb      	str	r3, [r7, #24]
      break;
 8002fe4:	e10e      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800321c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe8:	61bb      	str	r3, [r7, #24]
      break;
 8002fea:	e10b      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fec:	4b8c      	ldr	r3, [pc, #560]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fee:	61bb      	str	r3, [r7, #24]
      break;
 8002ff0:	e108      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ff2:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ffc:	4b85      	ldr	r3, [pc, #532]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003006:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003008:	4b82      	ldr	r3, [pc, #520]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003012:	4b80      	ldr	r3, [pc, #512]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	08db      	lsrs	r3, r3, #3
 8003018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80e1 	beq.w	80031f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f000 8083 	beq.w	8003144 <HAL_RCC_GetSysClockFreq+0x204>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b02      	cmp	r3, #2
 8003042:	f200 80a1 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x248>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x114>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d056      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003052:	e099      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003054:	4b6f      	ldr	r3, [pc, #444]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02d      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003060:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	4a6b      	ldr	r2, [pc, #428]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308a:	4b62      	ldr	r3, [pc, #392]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	ed97 6a02 	vldr	s12, [r7, #8]
 800309e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030ba:	e087      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ce:	4b51      	ldr	r3, [pc, #324]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030de:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030fe:	e065      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800322c <HAL_RCC_GetSysClockFreq+0x2ec>
 800310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003112:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003122:	ed97 6a02 	vldr	s12, [r7, #8]
 8003126:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003142:	e043      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003156:	4b2f      	ldr	r3, [pc, #188]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003166:	ed97 6a02 	vldr	s12, [r7, #8]
 800316a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003186:	e021      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800322c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319a:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	0a5b      	lsrs	r3, r3, #9
 80031d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d6:	3301      	adds	r3, #1
 80031d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	ee07 3a90 	vmov	s15, r3
 80031e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f0:	ee17 3a90 	vmov	r3, s15
 80031f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031f6:	e005      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
      break;
 80031fc:	e002      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003200:	61bb      	str	r3, [r7, #24]
      break;
 8003202:	bf00      	nop
  }

  return sysclockfreq;
 8003204:	69bb      	ldr	r3, [r7, #24]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	58024400 	.word	0x58024400
 8003218:	03d09000 	.word	0x03d09000
 800321c:	003d0900 	.word	0x003d0900
 8003220:	017d7840 	.word	0x017d7840
 8003224:	46000000 	.word	0x46000000
 8003228:	4c742400 	.word	0x4c742400
 800322c:	4a742400 	.word	0x4a742400
 8003230:	4bbebc20 	.word	0x4bbebc20

08003234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800323a:	f7ff fe81 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x50>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490f      	ldr	r1, [pc, #60]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x54>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003258:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x50>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x54>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_RCC_GetHCLKFreq+0x58>)
 8003270:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003272:	4a07      	ldr	r2, [pc, #28]	@ (8003290 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <HAL_RCC_GetHCLKFreq+0x58>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	58024400 	.word	0x58024400
 8003288:	080087ec 	.word	0x080087ec
 800328c:	24000008 	.word	0x24000008
 8003290:	24000004 	.word	0x24000004

08003294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003298:	f7ff ffcc 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4904      	ldr	r1, [pc, #16]	@ (80032bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	58024400 	.word	0x58024400
 80032bc:	080087ec 	.word	0x080087ec

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032c4:	f7ff ffb6 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4904      	ldr	r1, [pc, #16]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	58024400 	.word	0x58024400
 80032e8:	080087ec 	.word	0x080087ec

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0ca      	sub	sp, #296	@ 0x128
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003310:	2500      	movs	r5, #0
 8003312:	ea54 0305 	orrs.w	r3, r4, r5
 8003316:	d049      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003322:	d02f      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003324:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003328:	d828      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800332a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332e:	d01a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003330:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003334:	d822      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333e:	d007      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003340:	e01c      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003342:	4bb8      	ldr	r3, [pc, #736]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	4ab7      	ldr	r2, [pc, #732]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334e:	e01a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	3308      	adds	r3, #8
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fc8f 	bl	8004c7c <RCCEx_PLL2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003364:	e00f      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	3328      	adds	r3, #40	@ 0x28
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fd36 	bl	8004de0 <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800338e:	4ba5      	ldr	r3, [pc, #660]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003392:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800339c:	4aa1      	ldr	r2, [pc, #644]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033b8:	f04f 0900 	mov.w	r9, #0
 80033bc:	ea58 0309 	orrs.w	r3, r8, r9
 80033c0:	d047      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d82a      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	0800342b 	.word	0x0800342b
 80033e4:	0800342b 	.word	0x0800342b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4a8d      	ldr	r2, [pc, #564]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f4:	e01a      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3308      	adds	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fc3c 	bl	8004c7c <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800340a:	e00f      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	3328      	adds	r3, #40	@ 0x28
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fce3 	bl	8004de0 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003434:	4b7b      	ldr	r3, [pc, #492]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003438:	f023 0107 	bic.w	r1, r3, #7
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	4a78      	ldr	r2, [pc, #480]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003444:	430b      	orrs	r3, r1
 8003446:	6513      	str	r3, [r2, #80]	@ 0x50
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800345e:	f04f 0b00 	mov.w	fp, #0
 8003462:	ea5a 030b 	orrs.w	r3, sl, fp
 8003466:	d04c      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003472:	d030      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003478:	d829      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800347a:	2bc0      	cmp	r3, #192	@ 0xc0
 800347c:	d02d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800347e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003480:	d825      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d018      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d821      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d007      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003492:	e01c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003494:	4b63      	ldr	r3, [pc, #396]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a62      	ldr	r2, [pc, #392]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034a0:	e01c      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	3308      	adds	r3, #8
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fbe6 	bl	8004c7c <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b6:	e011      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fc8d 	bl	8004de0 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800350e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003518:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800351c:	460b      	mov	r3, r1
 800351e:	4313      	orrs	r3, r2
 8003520:	d053      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003526:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352e:	d035      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003534:	d82e      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003536:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800353a:	d031      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800353c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003540:	d828      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003546:	d01a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354c:	d822      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003556:	d007      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003558:	e01c      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	4a31      	ldr	r2, [pc, #196]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003566:	e01c      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	3308      	adds	r3, #8
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fb83 	bl	8004c7c <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800357c:	e011      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3328      	adds	r3, #40	@ 0x28
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fc2a 	bl	8004de0 <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003592:	e006      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359a:	e002      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d056      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f6:	d038      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d831      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003602:	d034      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003604:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003608:	d82b      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800360e:	d01d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003614:	d825      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800361a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003620:	e01f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003622:	bf00      	nop
 8003624:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4ba2      	ldr	r3, [pc, #648]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	4aa1      	ldr	r2, [pc, #644]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	3308      	adds	r3, #8
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fb1c 	bl	8004c7c <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	3328      	adds	r3, #40	@ 0x28
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fbc3 	bl	8004de0 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003678:	4b8e      	ldr	r3, [pc, #568]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003688:	4a8a      	ldr	r2, [pc, #552]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6593      	str	r3, [r2, #88]	@ 0x58
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d03a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	2b30      	cmp	r3, #48	@ 0x30
 80036c0:	d01f      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036c2:	2b30      	cmp	r3, #48	@ 0x30
 80036c4:	d819      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d815      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d019      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d111      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d6:	4b77      	ldr	r3, [pc, #476]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	4a76      	ldr	r2, [pc, #472]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	3308      	adds	r3, #8
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fac5 	bl	8004c7c <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003710:	4b68      	ldr	r3, [pc, #416]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003714:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a65      	ldr	r2, [pc, #404]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003720:	430b      	orrs	r3, r1
 8003722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800373a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003744:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d051      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003758:	d035      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800375a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375e:	d82e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003760:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003764:	d031      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800376a:	d828      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	d01a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003776:	d822      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d007      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003782:	e01c      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	4a4a      	ldr	r2, [pc, #296]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003790:	e01c      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	3308      	adds	r3, #8
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fa6e 	bl	8004c7c <RCCEx_PLL2_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a6:	e011      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	3328      	adds	r3, #40	@ 0x28
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fb15 	bl	8004de0 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037bc:	e006      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037d4:	4b37      	ldr	r3, [pc, #220]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	4a34      	ldr	r2, [pc, #208]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003808:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800380c:	460b      	mov	r3, r1
 800380e:	4313      	orrs	r3, r2
 8003810:	d056      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381c:	d033      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800381e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003822:	d82c      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003828:	d02f      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800382a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800382e:	d826      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003830:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003834:	d02b      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800383a:	d820      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003840:	d012      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003846:	d81a      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d022      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d115      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	3308      	adds	r3, #8
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fa0e 	bl	8004c7c <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003866:	e015      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386c:	3328      	adds	r3, #40	@ 0x28
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fab5 	bl	8004de0 <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800387c:	e00a      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038aa:	4a02      	ldr	r2, [pc, #8]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d055      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ec:	d033      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f2:	d82c      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d02f      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d826      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003900:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003904:	d02b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800390a:	d820      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800390c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003910:	d012      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003916:	d81a      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d022      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003920:	d115      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	3308      	adds	r3, #8
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 f9a6 	bl	8004c7c <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003936:	e015      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	3328      	adds	r3, #40	@ 0x28
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fa4d 	bl	8004de0 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003956:	bf00      	nop
 8003958:	e004      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800396c:	4ba3      	ldr	r3, [pc, #652]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800397c:	4a9f      	ldr	r2, [pc, #636]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6593      	str	r3, [r2, #88]	@ 0x58
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d037      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b6:	d00e      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039bc:	d816      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c6:	d111      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b8c      	ldr	r3, [pc, #560]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a8b      	ldr	r2, [pc, #556]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d4:	e00f      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	3308      	adds	r3, #8
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f94c 	bl	8004c7c <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a7b      	ldr	r2, [pc, #492]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d039      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d81c      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a89 	.word	0x08003a89
 8003a50:	08003a5d 	.word	0x08003a5d
 8003a54:	08003a6b 	.word	0x08003a6b
 8003a58:	08003a89 	.word	0x08003a89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b67      	ldr	r3, [pc, #412]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4a66      	ldr	r2, [pc, #408]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a68:	e00f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f902 	bl	8004c7c <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a7e:	e004      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a92:	4b5a      	ldr	r3, [pc, #360]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a96:	f023 0103 	bic.w	r1, r3, #3
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003aca:	460b      	mov	r3, r1
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f000 809f 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003adc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ade:	f7fd fad9 	bl	8001094 <HAL_GetTick>
 8003ae2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fd fad4 	bl	8001094 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b64      	cmp	r3, #100	@ 0x64
 8003af6:	d903      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003afe:	e005      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b00:	4b3f      	ldr	r3, [pc, #252]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ed      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d179      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b14:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b20:	4053      	eors	r3, r2
 8003b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d015      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a30      	ldr	r2, [pc, #192]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b42:	4b2e      	ldr	r3, [pc, #184]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a2d      	ldr	r2, [pc, #180]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b62:	d118      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd fa96 	bl	8001094 <HAL_GetTick>
 8003b68:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b6c:	e00d      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fa91 	bl	8001094 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d903      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b88:	e005      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0eb      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d129      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bae:	d10e      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bb0:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bc0:	091a      	lsrs	r2, r3, #4
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6113      	str	r3, [r2, #16]
 8003bcc:	e005      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bd8:	6113      	str	r3, [r2, #16]
 8003bda:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bea:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	e00e      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bfa:	e009      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	58024800 	.word	0x58024800
 8003c04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 0301 	and.w	r3, r2, #1
 8003c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f000 8089 	beq.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c38:	2b28      	cmp	r3, #40	@ 0x28
 8003c3a:	d86b      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003d1d 	.word	0x08003d1d
 8003c48:	08003d15 	.word	0x08003d15
 8003c4c:	08003d15 	.word	0x08003d15
 8003c50:	08003d15 	.word	0x08003d15
 8003c54:	08003d15 	.word	0x08003d15
 8003c58:	08003d15 	.word	0x08003d15
 8003c5c:	08003d15 	.word	0x08003d15
 8003c60:	08003d15 	.word	0x08003d15
 8003c64:	08003ce9 	.word	0x08003ce9
 8003c68:	08003d15 	.word	0x08003d15
 8003c6c:	08003d15 	.word	0x08003d15
 8003c70:	08003d15 	.word	0x08003d15
 8003c74:	08003d15 	.word	0x08003d15
 8003c78:	08003d15 	.word	0x08003d15
 8003c7c:	08003d15 	.word	0x08003d15
 8003c80:	08003d15 	.word	0x08003d15
 8003c84:	08003cff 	.word	0x08003cff
 8003c88:	08003d15 	.word	0x08003d15
 8003c8c:	08003d15 	.word	0x08003d15
 8003c90:	08003d15 	.word	0x08003d15
 8003c94:	08003d15 	.word	0x08003d15
 8003c98:	08003d15 	.word	0x08003d15
 8003c9c:	08003d15 	.word	0x08003d15
 8003ca0:	08003d15 	.word	0x08003d15
 8003ca4:	08003d1d 	.word	0x08003d1d
 8003ca8:	08003d15 	.word	0x08003d15
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003d15 	.word	0x08003d15
 8003cb8:	08003d15 	.word	0x08003d15
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d15 	.word	0x08003d15
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d1d 	.word	0x08003d1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	3308      	adds	r3, #8
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ffc3 	bl	8004c7c <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3328      	adds	r3, #40	@ 0x28
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f86a 	bl	8004de0 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d26:	4bbf      	ldr	r3, [pc, #764]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d34:	4abb      	ldr	r2, [pc, #748]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 0302 	and.w	r3, r2, #2
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d041      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d824      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003dc1 	.word	0x08003dc1
 8003d78:	08003d8d 	.word	0x08003d8d
 8003d7c:	08003da3 	.word	0x08003da3
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc1 	.word	0x08003dc1
 8003d88:	08003dc1 	.word	0x08003dc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	3308      	adds	r3, #8
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ff71 	bl	8004c7c <RCCEx_PLL2_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003da0:	e00f      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	3328      	adds	r3, #40	@ 0x28
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f818 	bl	8004de0 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003db6:	e004      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dca:	4b96      	ldr	r3, [pc, #600]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	f023 0107 	bic.w	r1, r3, #7
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd8:	4a92      	ldr	r2, [pc, #584]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 0304 	and.w	r3, r2, #4
 8003df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d044      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d825      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e4b 	.word	0x08003e4b
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e69 	.word	0x08003e69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 ff1d 	bl	8004c7c <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 ffc4 	bl	8004de0 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e72:	4b6c      	ldr	r3, [pc, #432]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	f023 0107 	bic.w	r1, r3, #7
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e82:	4a68      	ldr	r2, [pc, #416]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f002 0320 	and.w	r3, r2, #32
 8003e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d055      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ebe:	d033      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec4:	d82c      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eca:	d02f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed0:	d826      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ed6:	d02b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003edc:	d820      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee2:	d012      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee8:	d81a      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d022      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef2:	d115      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	3308      	adds	r3, #8
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 febd 	bl	8004c7c <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3328      	adds	r3, #40	@ 0x28
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 ff64 	bl	8004de0 <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d058      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f8a:	d033      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f90:	d82c      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	d02f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	d826      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa2:	d02b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa8:	d820      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fae:	d012      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb4:	d81a      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d022      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fbe:	d115      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fe57 	bl	8004c7c <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e015      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fefe 	bl	8004de0 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff2:	e006      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff4:	bf00      	nop
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800401a:	4a02      	ldr	r2, [pc, #8]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004046:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d055      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004058:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800405c:	d033      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800405e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004062:	d82c      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406e:	d826      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004070:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004074:	d02b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004076:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800407a:	d820      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d012      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004086:	d81a      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004090:	d115      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	3308      	adds	r3, #8
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fdee 	bl	8004c7c <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a6:	e015      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe95 	bl	8004de0 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040bc:	e00a      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040c6:	bf00      	nop
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040ec:	4a9d      	ldr	r2, [pc, #628]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 0308 	and.w	r3, r2, #8
 8004108:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004112:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d01e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d10c      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fe54 	bl	8004de0 <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004144:	4b87      	ldr	r3, [pc, #540]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004148:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004154:	4a83      	ldr	r2, [pc, #524]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f002 0310 	and.w	r3, r2, #16
 8004166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004170:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d01e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	d10c      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	3328      	adds	r3, #40	@ 0x28
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fe25 	bl	8004de0 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a2:	4b70      	ldr	r3, [pc, #448]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d03e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e4:	d022      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ea:	d81b      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f4:	d00b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041f6:	e015      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	3308      	adds	r3, #8
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd3b 	bl	8004c7c <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800420c:	e00f      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	3328      	adds	r3, #40	@ 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fde2 	bl	8004de0 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004222:	e004      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800422c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004236:	4b4b      	ldr	r3, [pc, #300]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004246:	4a47      	ldr	r2, [pc, #284]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6593      	str	r3, [r2, #88]	@ 0x58
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004264:	2300      	movs	r3, #0
 8004266:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004268:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d03b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800427e:	d01f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004280:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004284:	d818      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042a0:	e00f      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	3328      	adds	r3, #40	@ 0x28
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd98 	bl	8004de0 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042b6:	e004      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ca:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042da:	4a22      	ldr	r2, [pc, #136]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6553      	str	r3, [r2, #84]	@ 0x54
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80042f8:	2300      	movs	r3, #0
 80042fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80042fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d034      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d007      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004316:	e011      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	3308      	adds	r3, #8
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fca4 	bl	8004c7c <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004350:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435c:	430b      	orrs	r3, r1
 800435e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800437c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437e:	2300      	movs	r3, #0
 8004380:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004382:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d00c      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	3328      	adds	r3, #40	@ 0x28
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd23 	bl	8004de0 <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b4:	2300      	movs	r3, #0
 80043b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80043b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d038      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ce:	d018      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d4:	d811      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043da:	d014      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e0:	d80b      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ea:	d106      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ec:	4bc3      	ldr	r3, [pc, #780]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4ac2      	ldr	r2, [pc, #776]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004400:	e004      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800440a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004414:	4bb9      	ldr	r3, [pc, #740]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004424:	4ab5      	ldr	r2, [pc, #724]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	@ 0x54
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004442:	2300      	movs	r3, #0
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004446:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004450:	4baa      	ldr	r3, [pc, #680]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004454:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	4aa7      	ldr	r2, [pc, #668]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004460:	430b      	orrs	r3, r1
 8004462:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
 8004472:	2300      	movs	r3, #0
 8004474:	657b      	str	r3, [r7, #84]	@ 0x54
 8004476:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004480:	4b9e      	ldr	r3, [pc, #632]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004490:	4a9a      	ldr	r2, [pc, #616]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a4:	2300      	movs	r3, #0
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b2:	4b92      	ldr	r3, [pc, #584]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c0:	4a8e      	ldr	r2, [pc, #568]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d4:	2300      	movs	r3, #0
 80044d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044e2:	4b86      	ldr	r3, [pc, #536]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4a85      	ldr	r2, [pc, #532]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	4b83      	ldr	r3, [pc, #524]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f0:	6919      	ldr	r1, [r3, #16]
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044fa:	4a80      	ldr	r2, [pc, #512]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800450e:	2300      	movs	r3, #0
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004512:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800451c:	4b77      	ldr	r3, [pc, #476]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004520:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	4a74      	ldr	r2, [pc, #464]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452c:	430b      	orrs	r3, r1
 800452e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800453c:	633b      	str	r3, [r7, #48]	@ 0x30
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
 8004542:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004546:	460b      	mov	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800454c:	4b6b      	ldr	r3, [pc, #428]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800455c:	4a67      	ldr	r2, [pc, #412]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455e:	430b      	orrs	r3, r1
 8004560:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	2100      	movs	r1, #0
 800456c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004574:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d011      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	3308      	adds	r3, #8
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb78 	bl	8004c7c <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	2100      	movs	r1, #0
 80045ac:	6239      	str	r1, [r7, #32]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d011      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	3308      	adds	r3, #8
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fb58 	bl	8004c7c <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	2100      	movs	r1, #0
 80045ec:	61b9      	str	r1, [r7, #24]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	3308      	adds	r3, #8
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb38 	bl	8004c7c <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	2100      	movs	r1, #0
 800462c:	6139      	str	r1, [r7, #16]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d011      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	3328      	adds	r3, #40	@ 0x28
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fbca 	bl	8004de0 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	2100      	movs	r1, #0
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	3328      	adds	r3, #40	@ 0x28
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fbaa 	bl	8004de0 <RCCEx_PLL3_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	2100      	movs	r1, #0
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046b8:	460b      	mov	r3, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	3328      	adds	r3, #40	@ 0x28
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fb8a 	bl	8004de0 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80046e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fc:	58024400 	.word	0x58024400

08004700 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004704:	f7fe fd96 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	@ (8004728 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	58024400 	.word	0x58024400
 8004728:	080087ec 	.word	0x080087ec

0800472c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	@ 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004734:	4ba1      	ldr	r3, [pc, #644]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800473e:	4b9f      	ldr	r3, [pc, #636]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	0b1b      	lsrs	r3, r3, #12
 8004744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004748:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800474a:	4b9c      	ldr	r3, [pc, #624]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004756:	4b99      	ldr	r3, [pc, #612]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475a:	08db      	lsrs	r3, r3, #3
 800475c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8111 	beq.w	800499c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f000 8083 	beq.w	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f200 80a1 	bhi.w	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d056      	beq.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004796:	e099      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004798:	4b88      	ldr	r3, [pc, #544]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02d      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047a4:	4b85      	ldr	r3, [pc, #532]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	08db      	lsrs	r3, r3, #3
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	4a84      	ldr	r2, [pc, #528]	@ (80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b7b      	ldr	r3, [pc, #492]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047fe:	e087      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004842:	e065      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004856:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	ed97 6a03 	vldr	s12, [r7, #12]
 800486a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004886:	e043      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489a:	4b48      	ldr	r3, [pc, #288]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ca:	e021      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048de:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004910:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	0a5b      	lsrs	r3, r3, #9
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800492a:	edd7 6a07 	vldr	s13, [r7, #28]
 800492e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004936:	ee17 2a90 	vmov	r2, s15
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800493e:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004958:	edd7 6a07 	vldr	s13, [r7, #28]
 800495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004964:	ee17 2a90 	vmov	r2, s15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	0e1b      	lsrs	r3, r3, #24
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800499a:	e008      	b.n	80049ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	bf00      	nop
 80049b0:	3724      	adds	r7, #36	@ 0x24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
 80049c0:	03d09000 	.word	0x03d09000
 80049c4:	46000000 	.word	0x46000000
 80049c8:	4c742400 	.word	0x4c742400
 80049cc:	4a742400 	.word	0x4a742400
 80049d0:	4bbebc20 	.word	0x4bbebc20

080049d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	0d1b      	lsrs	r3, r3, #20
 80049ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049fe:	4b99      	ldr	r3, [pc, #612]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	08db      	lsrs	r3, r3, #3
 8004a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8111 	beq.w	8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f000 8083 	beq.w	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	f200 80a1 	bhi.w	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d056      	beq.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a3e:	e099      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a40:	4b88      	ldr	r3, [pc, #544]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02d      	beq.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a4c:	4b85      	ldr	r3, [pc, #532]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	08db      	lsrs	r3, r3, #3
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	4a84      	ldr	r2, [pc, #528]	@ (8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b7b      	ldr	r3, [pc, #492]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aa6:	e087      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aea:	e065      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b59      	ldr	r3, [pc, #356]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2e:	e043      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b48      	ldr	r3, [pc, #288]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b72:	e021      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	0a5b      	lsrs	r3, r3, #9
 8004bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bde:	ee17 2a90 	vmov	r2, s15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004be6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0c:	ee17 2a90 	vmov	r2, s15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c14:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	bf00      	nop
 8004c58:	3724      	adds	r7, #36	@ 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	58024400 	.word	0x58024400
 8004c68:	03d09000 	.word	0x03d09000
 8004c6c:	46000000 	.word	0x46000000
 8004c70:	4c742400 	.word	0x4c742400
 8004c74:	4a742400 	.word	0x4a742400
 8004c78:	4bbebc20 	.word	0x4bbebc20

08004c7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c8a:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d101      	bne.n	8004c9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e099      	b.n	8004dce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca6:	f7fc f9f5 	bl	8001094 <HAL_GetTick>
 8004caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cae:	f7fc f9f1 	bl	8001094 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e086      	b.n	8004dce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc0:	4b45      	ldr	r3, [pc, #276]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ccc:	4b42      	ldr	r3, [pc, #264]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	493f      	ldr	r1, [pc, #252]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d10:	4931      	ldr	r1, [pc, #196]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d16:	4b30      	ldr	r3, [pc, #192]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	492d      	ldr	r1, [pc, #180]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d28:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	f023 0220 	bic.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4928      	ldr	r1, [pc, #160]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d3a:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a26      	ldr	r2, [pc, #152]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4a:	4b24      	ldr	r3, [pc, #144]	@ (8004ddc <RCCEx_PLL2_Config+0x160>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	69d2      	ldr	r2, [r2, #28]
 8004d52:	00d2      	lsls	r2, r2, #3
 8004d54:	4920      	ldr	r1, [pc, #128]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	f043 0310 	orr.w	r3, r3, #16
 8004d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d78:	e00f      	b.n	8004d9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d8c:	e005      	b.n	8004d9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc f975 	bl	8001094 <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dac:	e008      	b.n	8004dc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dae:	f7fc f971 	bl	8001094 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	ffff0007 	.word	0xffff0007

08004de0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dee:	4b53      	ldr	r3, [pc, #332]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d101      	bne.n	8004dfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e099      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a4e      	ldr	r2, [pc, #312]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0a:	f7fc f943 	bl	8001094 <HAL_GetTick>
 8004e0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e12:	f7fc f93f 	bl	8001094 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e086      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e24:	4b45      	ldr	r3, [pc, #276]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e30:	4b42      	ldr	r3, [pc, #264]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	051b      	lsls	r3, r3, #20
 8004e3e:	493f      	ldr	r1, [pc, #252]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	025b      	lsls	r3, r3, #9
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e74:	4931      	ldr	r1, [pc, #196]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	492d      	ldr	r1, [pc, #180]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	4928      	ldr	r1, [pc, #160]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eae:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <RCCEx_PLL3_Config+0x160>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69d2      	ldr	r2, [r2, #28]
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4920      	ldr	r1, [pc, #128]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004edc:	e00f      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ee4:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ef0:	e005      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004efe:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc f8c3 	bl	8001094 <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f12:	f7fc f8bf 	bl	8001094 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	ffff0007 	.word	0xffff0007

08004f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e042      	b.n	8004fdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fb fdd1 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2224      	movs	r2, #36	@ 0x24
 8004f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fa60 	bl	8006454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fcf5 	bl	8005984 <UART_SetConfig>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e01b      	b.n	8004fdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 fadf 	bl	8006598 <UART_CheckIdleState>
 8004fda:	4603      	mov	r3, r0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d17b      	bne.n	80050f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Transmit+0x26>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e074      	b.n	80050f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2221      	movs	r2, #33	@ 0x21
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501e:	f7fc f839 	bl	8001094 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503c:	d108      	bne.n	8005050 <HAL_UART_Transmit+0x6c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e003      	b.n	8005058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005058:	e030      	b.n	80050bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	@ 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f001 fb41 	bl	80066ec <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e03d      	b.n	80050f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005090:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e007      	b.n	80050aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1c8      	bne.n	800505a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2140      	movs	r1, #64	@ 0x40
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f001 fb0a 	bl	80066ec <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e006      	b.n	80050f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005114:	2b20      	cmp	r3, #32
 8005116:	d137      	bne.n	8005188 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_UART_Receive_IT+0x24>
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e030      	b.n	800518a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a18      	ldr	r2, [pc, #96]	@ (8005194 <HAL_UART_Receive_IT+0x94>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d01f      	beq.n	8005178 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	613b      	str	r3, [r7, #16]
   return(result);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	61bb      	str	r3, [r7, #24]
   return(result);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	461a      	mov	r2, r3
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f001 fb22 	bl	80067c8 <UART_Start_Receive_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	e000      	b.n	800518a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3728      	adds	r7, #40	@ 0x28
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	58000c00 	.word	0x58000c00

08005198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b0ba      	sub	sp, #232	@ 0xe8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80051c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80051c6:	4013      	ands	r3, r2
 80051c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80051cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11b      	bne.n	800520c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d105      	bne.n	80051f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8393 	beq.w	8005928 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
      }
      return;
 800520a:	e38d      	b.n	8005928 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800520c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8123 	beq.w	800545c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005216:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800521a:	4b8d      	ldr	r3, [pc, #564]	@ (8005450 <HAL_UART_IRQHandler+0x2b8>)
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005226:	4b8b      	ldr	r3, [pc, #556]	@ (8005454 <HAL_UART_IRQHandler+0x2bc>)
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8116 	beq.w	800545c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d011      	beq.n	8005260 <HAL_UART_IRQHandler+0xc8>
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	f043 0201 	orr.w	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d011      	beq.n	8005290 <HAL_UART_IRQHandler+0xf8>
 800526c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2202      	movs	r2, #2
 800527e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005286:	f043 0204 	orr.w	r2, r3, #4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d011      	beq.n	80052c0 <HAL_UART_IRQHandler+0x128>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2204      	movs	r2, #4
 80052ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	f043 0202 	orr.w	r2, r3, #2
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005450 <HAL_UART_IRQHandler+0x2b8>)
 80052de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2208      	movs	r2, #8
 80052ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f2:	f043 0208 	orr.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <HAL_UART_IRQHandler+0x196>
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00c      	beq.n	800532e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800531c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 82f9 	beq.w	800592c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d013      	beq.n	800536e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d005      	beq.n	8005392 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800538a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800538e:	2b00      	cmp	r3, #0
 8005390:	d054      	beq.n	800543c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fb3a 	bl	8006a0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a2:	2b40      	cmp	r3, #64	@ 0x40
 80053a4:	d146      	bne.n	8005434 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1d9      	bne.n	80053a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005402:	4a15      	ldr	r2, [pc, #84]	@ (8005458 <HAL_UART_IRQHandler+0x2c0>)
 8005404:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800540c:	4618      	mov	r0, r3
 800540e:	f7fc fb23 	bl	8001a58 <HAL_DMA_Abort_IT>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d019      	beq.n	800544c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800541e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005426:	4610      	mov	r0, r2
 8005428:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542a:	e00f      	b.n	800544c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fa93 	bl	8005958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005432:	e00b      	b.n	800544c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa8f 	bl	8005958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	e007      	b.n	800544c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa8b 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800544a:	e26f      	b.n	800592c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	bf00      	nop
    return;
 800544e:	e26d      	b.n	800592c <HAL_UART_IRQHandler+0x794>
 8005450:	10000001 	.word	0x10000001
 8005454:	04000120 	.word	0x04000120
 8005458:	08006ad9 	.word	0x08006ad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005460:	2b01      	cmp	r3, #1
 8005462:	f040 8203 	bne.w	800586c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 81fc 	beq.w	800586c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 81f5 	beq.w	800586c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2210      	movs	r2, #16
 8005488:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	f040 816d 	bne.w	8005774 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4aa4      	ldr	r2, [pc, #656]	@ (8005734 <HAL_UART_IRQHandler+0x59c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d068      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4aa1      	ldr	r2, [pc, #644]	@ (8005738 <HAL_UART_IRQHandler+0x5a0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d061      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a9f      	ldr	r2, [pc, #636]	@ (800573c <HAL_UART_IRQHandler+0x5a4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d05a      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a9c      	ldr	r2, [pc, #624]	@ (8005740 <HAL_UART_IRQHandler+0x5a8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d053      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a9a      	ldr	r2, [pc, #616]	@ (8005744 <HAL_UART_IRQHandler+0x5ac>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04c      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a97      	ldr	r2, [pc, #604]	@ (8005748 <HAL_UART_IRQHandler+0x5b0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d045      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a95      	ldr	r2, [pc, #596]	@ (800574c <HAL_UART_IRQHandler+0x5b4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d03e      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a92      	ldr	r2, [pc, #584]	@ (8005750 <HAL_UART_IRQHandler+0x5b8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d037      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a90      	ldr	r2, [pc, #576]	@ (8005754 <HAL_UART_IRQHandler+0x5bc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d030      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a8d      	ldr	r2, [pc, #564]	@ (8005758 <HAL_UART_IRQHandler+0x5c0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d029      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a8b      	ldr	r2, [pc, #556]	@ (800575c <HAL_UART_IRQHandler+0x5c4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a88      	ldr	r2, [pc, #544]	@ (8005760 <HAL_UART_IRQHandler+0x5c8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01b      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a86      	ldr	r2, [pc, #536]	@ (8005764 <HAL_UART_IRQHandler+0x5cc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d014      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a83      	ldr	r2, [pc, #524]	@ (8005768 <HAL_UART_IRQHandler+0x5d0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00d      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a81      	ldr	r2, [pc, #516]	@ (800576c <HAL_UART_IRQHandler+0x5d4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d006      	beq.n	800557a <HAL_UART_IRQHandler+0x3e2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a7e      	ldr	r2, [pc, #504]	@ (8005770 <HAL_UART_IRQHandler+0x5d8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d106      	bne.n	8005588 <HAL_UART_IRQHandler+0x3f0>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	b29b      	uxth	r3, r3
 8005586:	e005      	b.n	8005594 <HAL_UART_IRQHandler+0x3fc>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80ad 	beq.w	80056fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f080 80a5 	bcs.w	80056fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c8:	f000 8087 	beq.w	80056da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800560e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1da      	bne.n	80055cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800563a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800563e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005642:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800564c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e1      	bne.n	8005616 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005676:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005678:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800567c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e3      	bne.n	8005652 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e4      	bne.n	8005698 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fb fea1 	bl	800141c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f939 	bl	800596c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056fa:	e119      	b.n	8005930 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005706:	429a      	cmp	r2, r3
 8005708:	f040 8112 	bne.w	8005930 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005718:	f040 810a 	bne.w	8005930 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f91e 	bl	800596c <HAL_UARTEx_RxEventCallback>
      return;
 8005730:	e0fe      	b.n	8005930 <HAL_UART_IRQHandler+0x798>
 8005732:	bf00      	nop
 8005734:	40020010 	.word	0x40020010
 8005738:	40020028 	.word	0x40020028
 800573c:	40020040 	.word	0x40020040
 8005740:	40020058 	.word	0x40020058
 8005744:	40020070 	.word	0x40020070
 8005748:	40020088 	.word	0x40020088
 800574c:	400200a0 	.word	0x400200a0
 8005750:	400200b8 	.word	0x400200b8
 8005754:	40020410 	.word	0x40020410
 8005758:	40020428 	.word	0x40020428
 800575c:	40020440 	.word	0x40020440
 8005760:	40020458 	.word	0x40020458
 8005764:	40020470 	.word	0x40020470
 8005768:	40020488 	.word	0x40020488
 800576c:	400204a0 	.word	0x400204a0
 8005770:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005780:	b29b      	uxth	r3, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80cf 	beq.w	8005934 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80ca 	beq.w	8005934 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e4      	bne.n	80057a0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	623b      	str	r3, [r7, #32]
   return(result);
 80057e6:	6a3a      	ldr	r2, [r7, #32]
 80057e8:	4b55      	ldr	r3, [pc, #340]	@ (8005940 <HAL_UART_IRQHandler+0x7a8>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0310 	bic.w	r3, r3, #16
 8005836:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	617b      	str	r3, [r7, #20]
   return(result);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e4      	bne.n	8005822 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800585e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f881 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800586a:	e063      	b.n	8005934 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800586c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <HAL_UART_IRQHandler+0x6fe>
 8005878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800587c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800588c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fe80 	bl	8007594 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005894:	e051      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d014      	beq.n	80058cc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80058ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d03a      	beq.n	8005938 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
    }
    return;
 80058ca:	e035      	b.n	8005938 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <HAL_UART_IRQHandler+0x754>
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 f909 	bl	8006afc <UART_EndTransmit_IT>
    return;
 80058ea:	e026      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d009      	beq.n	800590c <HAL_UART_IRQHandler+0x774>
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 fe59 	bl	80075bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800590a:	e016      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800590c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <HAL_UART_IRQHandler+0x7a2>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591c:	2b00      	cmp	r3, #0
 800591e:	da0c      	bge.n	800593a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fe41 	bl	80075a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005926:	e008      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005928:	bf00      	nop
 800592a:	e006      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
    return;
 800592c:	bf00      	nop
 800592e:	e004      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005930:	bf00      	nop
 8005932:	e002      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005934:	bf00      	nop
 8005936:	e000      	b.n	800593a <HAL_UART_IRQHandler+0x7a2>
    return;
 8005938:	bf00      	nop
  }
}
 800593a:	37e8      	adds	r7, #232	@ 0xe8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	effffffe 	.word	0xeffffffe

08005944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b092      	sub	sp, #72	@ 0x48
 800598a:	af00      	add	r7, sp, #0
 800598c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	431a      	orrs	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4bbe      	ldr	r3, [pc, #760]	@ (8005cac <UART_SetConfig+0x328>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059bc:	430b      	orrs	r3, r1
 80059be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4ab3      	ldr	r2, [pc, #716]	@ (8005cb0 <UART_SetConfig+0x32c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ec:	4313      	orrs	r3, r2
 80059ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	4baf      	ldr	r3, [pc, #700]	@ (8005cb4 <UART_SetConfig+0x330>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	f023 010f 	bic.w	r1, r3, #15
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4aa6      	ldr	r2, [pc, #664]	@ (8005cb8 <UART_SetConfig+0x334>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d177      	bne.n	8005b14 <UART_SetConfig+0x190>
 8005a24:	4ba5      	ldr	r3, [pc, #660]	@ (8005cbc <UART_SetConfig+0x338>)
 8005a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a2c:	2b28      	cmp	r3, #40	@ 0x28
 8005a2e:	d86d      	bhi.n	8005b0c <UART_SetConfig+0x188>
 8005a30:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <UART_SetConfig+0xb4>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005add 	.word	0x08005add
 8005a3c:	08005b0d 	.word	0x08005b0d
 8005a40:	08005b0d 	.word	0x08005b0d
 8005a44:	08005b0d 	.word	0x08005b0d
 8005a48:	08005b0d 	.word	0x08005b0d
 8005a4c:	08005b0d 	.word	0x08005b0d
 8005a50:	08005b0d 	.word	0x08005b0d
 8005a54:	08005b0d 	.word	0x08005b0d
 8005a58:	08005ae5 	.word	0x08005ae5
 8005a5c:	08005b0d 	.word	0x08005b0d
 8005a60:	08005b0d 	.word	0x08005b0d
 8005a64:	08005b0d 	.word	0x08005b0d
 8005a68:	08005b0d 	.word	0x08005b0d
 8005a6c:	08005b0d 	.word	0x08005b0d
 8005a70:	08005b0d 	.word	0x08005b0d
 8005a74:	08005b0d 	.word	0x08005b0d
 8005a78:	08005aed 	.word	0x08005aed
 8005a7c:	08005b0d 	.word	0x08005b0d
 8005a80:	08005b0d 	.word	0x08005b0d
 8005a84:	08005b0d 	.word	0x08005b0d
 8005a88:	08005b0d 	.word	0x08005b0d
 8005a8c:	08005b0d 	.word	0x08005b0d
 8005a90:	08005b0d 	.word	0x08005b0d
 8005a94:	08005b0d 	.word	0x08005b0d
 8005a98:	08005af5 	.word	0x08005af5
 8005a9c:	08005b0d 	.word	0x08005b0d
 8005aa0:	08005b0d 	.word	0x08005b0d
 8005aa4:	08005b0d 	.word	0x08005b0d
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	08005b0d 	.word	0x08005b0d
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005afd 	.word	0x08005afd
 8005abc:	08005b0d 	.word	0x08005b0d
 8005ac0:	08005b0d 	.word	0x08005b0d
 8005ac4:	08005b0d 	.word	0x08005b0d
 8005ac8:	08005b0d 	.word	0x08005b0d
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005b0d 	.word	0x08005b0d
 8005ad4:	08005b0d 	.word	0x08005b0d
 8005ad8:	08005b05 	.word	0x08005b05
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e222      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e21e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e21a      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e216      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005afc:	2320      	movs	r3, #32
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e212      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b04:	2340      	movs	r3, #64	@ 0x40
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e20e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b0c:	2380      	movs	r3, #128	@ 0x80
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e20a      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a69      	ldr	r2, [pc, #420]	@ (8005cc0 <UART_SetConfig+0x33c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d130      	bne.n	8005b80 <UART_SetConfig+0x1fc>
 8005b1e:	4b67      	ldr	r3, [pc, #412]	@ (8005cbc <UART_SetConfig+0x338>)
 8005b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d826      	bhi.n	8005b78 <UART_SetConfig+0x1f4>
 8005b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <UART_SetConfig+0x1ac>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b49 	.word	0x08005b49
 8005b34:	08005b51 	.word	0x08005b51
 8005b38:	08005b59 	.word	0x08005b59
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b69 	.word	0x08005b69
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e1ec      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b50:	2304      	movs	r3, #4
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e1e8      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e1e4      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b60:	2310      	movs	r3, #16
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e1e0      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b68:	2320      	movs	r3, #32
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e1dc      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b70:	2340      	movs	r3, #64	@ 0x40
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e1d8      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e1d4      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc4 <UART_SetConfig+0x340>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d130      	bne.n	8005bec <UART_SetConfig+0x268>
 8005b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8005cbc <UART_SetConfig+0x338>)
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d826      	bhi.n	8005be4 <UART_SetConfig+0x260>
 8005b96:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <UART_SetConfig+0x218>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bb5 	.word	0x08005bb5
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	08005bc5 	.word	0x08005bc5
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e1b6      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e1b2      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e1ae      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e1aa      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e1a6      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005bdc:	2340      	movs	r3, #64	@ 0x40
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e1a2      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e19e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a35      	ldr	r2, [pc, #212]	@ (8005cc8 <UART_SetConfig+0x344>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d130      	bne.n	8005c58 <UART_SetConfig+0x2d4>
 8005bf6:	4b31      	ldr	r3, [pc, #196]	@ (8005cbc <UART_SetConfig+0x338>)
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d826      	bhi.n	8005c50 <UART_SetConfig+0x2cc>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <UART_SetConfig+0x284>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c21 	.word	0x08005c21
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e180      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e17c      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e178      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e174      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c40:	2320      	movs	r3, #32
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e170      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c48:	2340      	movs	r3, #64	@ 0x40
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e16c      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e168      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ccc <UART_SetConfig+0x348>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d142      	bne.n	8005ce8 <UART_SetConfig+0x364>
 8005c62:	4b16      	ldr	r3, [pc, #88]	@ (8005cbc <UART_SetConfig+0x338>)
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d838      	bhi.n	8005ce0 <UART_SetConfig+0x35c>
 8005c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <UART_SetConfig+0x2f0>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005c9d 	.word	0x08005c9d
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cd1 	.word	0x08005cd1
 8005c88:	08005cd9 	.word	0x08005cd9
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e14a      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e146      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e142      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e13e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005cac:	cfff69f3 	.word	0xcfff69f3
 8005cb0:	58000c00 	.word	0x58000c00
 8005cb4:	11fff4ff 	.word	0x11fff4ff
 8005cb8:	40011000 	.word	0x40011000
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	40004400 	.word	0x40004400
 8005cc4:	40004800 	.word	0x40004800
 8005cc8:	40004c00 	.word	0x40004c00
 8005ccc:	40005000 	.word	0x40005000
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e128      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005cd8:	2340      	movs	r3, #64	@ 0x40
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e124      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e120      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4acb      	ldr	r2, [pc, #812]	@ (800601c <UART_SetConfig+0x698>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d176      	bne.n	8005de0 <UART_SetConfig+0x45c>
 8005cf2:	4bcb      	ldr	r3, [pc, #812]	@ (8006020 <UART_SetConfig+0x69c>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cfa:	2b28      	cmp	r3, #40	@ 0x28
 8005cfc:	d86c      	bhi.n	8005dd8 <UART_SetConfig+0x454>
 8005cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0x380>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005da9 	.word	0x08005da9
 8005d08:	08005dd9 	.word	0x08005dd9
 8005d0c:	08005dd9 	.word	0x08005dd9
 8005d10:	08005dd9 	.word	0x08005dd9
 8005d14:	08005dd9 	.word	0x08005dd9
 8005d18:	08005dd9 	.word	0x08005dd9
 8005d1c:	08005dd9 	.word	0x08005dd9
 8005d20:	08005dd9 	.word	0x08005dd9
 8005d24:	08005db1 	.word	0x08005db1
 8005d28:	08005dd9 	.word	0x08005dd9
 8005d2c:	08005dd9 	.word	0x08005dd9
 8005d30:	08005dd9 	.word	0x08005dd9
 8005d34:	08005dd9 	.word	0x08005dd9
 8005d38:	08005dd9 	.word	0x08005dd9
 8005d3c:	08005dd9 	.word	0x08005dd9
 8005d40:	08005dd9 	.word	0x08005dd9
 8005d44:	08005db9 	.word	0x08005db9
 8005d48:	08005dd9 	.word	0x08005dd9
 8005d4c:	08005dd9 	.word	0x08005dd9
 8005d50:	08005dd9 	.word	0x08005dd9
 8005d54:	08005dd9 	.word	0x08005dd9
 8005d58:	08005dd9 	.word	0x08005dd9
 8005d5c:	08005dd9 	.word	0x08005dd9
 8005d60:	08005dd9 	.word	0x08005dd9
 8005d64:	08005dc1 	.word	0x08005dc1
 8005d68:	08005dd9 	.word	0x08005dd9
 8005d6c:	08005dd9 	.word	0x08005dd9
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	08005dd9 	.word	0x08005dd9
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005dc9 	.word	0x08005dc9
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	08005dd9 	.word	0x08005dd9
 8005d90:	08005dd9 	.word	0x08005dd9
 8005d94:	08005dd9 	.word	0x08005dd9
 8005d98:	08005dd9 	.word	0x08005dd9
 8005d9c:	08005dd9 	.word	0x08005dd9
 8005da0:	08005dd9 	.word	0x08005dd9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e0bc      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e0b8      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e0b4      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e0b0      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e0ac      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005dd0:	2340      	movs	r3, #64	@ 0x40
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd6:	e0a8      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005dd8:	2380      	movs	r3, #128	@ 0x80
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e0a4      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a8f      	ldr	r2, [pc, #572]	@ (8006024 <UART_SetConfig+0x6a0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d130      	bne.n	8005e4c <UART_SetConfig+0x4c8>
 8005dea:	4b8d      	ldr	r3, [pc, #564]	@ (8006020 <UART_SetConfig+0x69c>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d826      	bhi.n	8005e44 <UART_SetConfig+0x4c0>
 8005df6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <UART_SetConfig+0x478>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e15 	.word	0x08005e15
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e086      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e082      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e07e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e07a      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e34:	2320      	movs	r3, #32
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e076      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e3c:	2340      	movs	r3, #64	@ 0x40
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e072      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e44:	2380      	movs	r3, #128	@ 0x80
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e06e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a75      	ldr	r2, [pc, #468]	@ (8006028 <UART_SetConfig+0x6a4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d130      	bne.n	8005eb8 <UART_SetConfig+0x534>
 8005e56:	4b72      	ldr	r3, [pc, #456]	@ (8006020 <UART_SetConfig+0x69c>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d826      	bhi.n	8005eb0 <UART_SetConfig+0x52c>
 8005e62:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <UART_SetConfig+0x4e4>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e81 	.word	0x08005e81
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e050      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e04c      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e048      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e044      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e040      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ea8:	2340      	movs	r3, #64	@ 0x40
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e03c      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e038      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a5b      	ldr	r2, [pc, #364]	@ (800602c <UART_SetConfig+0x6a8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d130      	bne.n	8005f24 <UART_SetConfig+0x5a0>
 8005ec2:	4b57      	ldr	r3, [pc, #348]	@ (8006020 <UART_SetConfig+0x69c>)
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d826      	bhi.n	8005f1c <UART_SetConfig+0x598>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <UART_SetConfig+0x550>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2302      	movs	r3, #2
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e01a      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e016      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e012      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e00e      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e00a      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005f14:	2340      	movs	r3, #64	@ 0x40
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e006      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e002      	b.n	8005f2a <UART_SetConfig+0x5a6>
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800602c <UART_SetConfig+0x6a8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	f040 80f8 	bne.w	8006126 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	dc46      	bgt.n	8005fcc <UART_SetConfig+0x648>
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	f2c0 8082 	blt.w	8006048 <UART_SetConfig+0x6c4>
 8005f44:	3b02      	subs	r3, #2
 8005f46:	2b1e      	cmp	r3, #30
 8005f48:	d87e      	bhi.n	8006048 <UART_SetConfig+0x6c4>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <UART_SetConfig+0x5cc>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005fd3 	.word	0x08005fd3
 8005f54:	08006049 	.word	0x08006049
 8005f58:	08005fdb 	.word	0x08005fdb
 8005f5c:	08006049 	.word	0x08006049
 8005f60:	08006049 	.word	0x08006049
 8005f64:	08006049 	.word	0x08006049
 8005f68:	08005feb 	.word	0x08005feb
 8005f6c:	08006049 	.word	0x08006049
 8005f70:	08006049 	.word	0x08006049
 8005f74:	08006049 	.word	0x08006049
 8005f78:	08006049 	.word	0x08006049
 8005f7c:	08006049 	.word	0x08006049
 8005f80:	08006049 	.word	0x08006049
 8005f84:	08006049 	.word	0x08006049
 8005f88:	08005ffb 	.word	0x08005ffb
 8005f8c:	08006049 	.word	0x08006049
 8005f90:	08006049 	.word	0x08006049
 8005f94:	08006049 	.word	0x08006049
 8005f98:	08006049 	.word	0x08006049
 8005f9c:	08006049 	.word	0x08006049
 8005fa0:	08006049 	.word	0x08006049
 8005fa4:	08006049 	.word	0x08006049
 8005fa8:	08006049 	.word	0x08006049
 8005fac:	08006049 	.word	0x08006049
 8005fb0:	08006049 	.word	0x08006049
 8005fb4:	08006049 	.word	0x08006049
 8005fb8:	08006049 	.word	0x08006049
 8005fbc:	08006049 	.word	0x08006049
 8005fc0:	08006049 	.word	0x08006049
 8005fc4:	08006049 	.word	0x08006049
 8005fc8:	0800603b 	.word	0x0800603b
 8005fcc:	2b40      	cmp	r3, #64	@ 0x40
 8005fce:	d037      	beq.n	8006040 <UART_SetConfig+0x6bc>
 8005fd0:	e03a      	b.n	8006048 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fd2:	f7fe fb95 	bl	8004700 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fd8:	e03c      	b.n	8006054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fba4 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fe8:	e034      	b.n	8006054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fea:	f107 0318 	add.w	r3, r7, #24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fcf0 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff8:	e02c      	b.n	8006054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <UART_SetConfig+0x69c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <UART_SetConfig+0x69c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	08db      	lsrs	r3, r3, #3
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	4a07      	ldr	r2, [pc, #28]	@ (8006030 <UART_SetConfig+0x6ac>)
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006018:	e01c      	b.n	8006054 <UART_SetConfig+0x6d0>
 800601a:	bf00      	nop
 800601c:	40011400 	.word	0x40011400
 8006020:	58024400 	.word	0x58024400
 8006024:	40007800 	.word	0x40007800
 8006028:	40007c00 	.word	0x40007c00
 800602c:	58000c00 	.word	0x58000c00
 8006030:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006034:	4b9d      	ldr	r3, [pc, #628]	@ (80062ac <UART_SetConfig+0x928>)
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006038:	e00c      	b.n	8006054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800603a:	4b9d      	ldr	r3, [pc, #628]	@ (80062b0 <UART_SetConfig+0x92c>)
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800603e:	e009      	b.n	8006054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006046:	e005      	b.n	8006054 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 81de 	beq.w	8006418 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	4a94      	ldr	r2, [pc, #592]	@ (80062b4 <UART_SetConfig+0x930>)
 8006062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006066:	461a      	mov	r2, r3
 8006068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606a:	fbb3 f3f2 	udiv	r3, r3, r2
 800606e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607c:	429a      	cmp	r2, r3
 800607e:	d305      	bcc.n	800608c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006088:	429a      	cmp	r2, r3
 800608a:	d903      	bls.n	8006094 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006092:	e1c1      	b.n	8006418 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	2200      	movs	r2, #0
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	60fa      	str	r2, [r7, #12]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	4a84      	ldr	r2, [pc, #528]	@ (80062b4 <UART_SetConfig+0x930>)
 80060a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060b6:	f7fa f963 	bl	8000380 <__aeabi_uldivmod>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	020b      	lsls	r3, r1, #8
 80060cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060d0:	0202      	lsls	r2, r0, #8
 80060d2:	6979      	ldr	r1, [r7, #20]
 80060d4:	6849      	ldr	r1, [r1, #4]
 80060d6:	0849      	lsrs	r1, r1, #1
 80060d8:	2000      	movs	r0, #0
 80060da:	460c      	mov	r4, r1
 80060dc:	4605      	mov	r5, r0
 80060de:	eb12 0804 	adds.w	r8, r2, r4
 80060e2:	eb43 0905 	adc.w	r9, r3, r5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	469a      	mov	sl, r3
 80060ee:	4693      	mov	fp, r2
 80060f0:	4652      	mov	r2, sl
 80060f2:	465b      	mov	r3, fp
 80060f4:	4640      	mov	r0, r8
 80060f6:	4649      	mov	r1, r9
 80060f8:	f7fa f942 	bl	8000380 <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4613      	mov	r3, r2
 8006102:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610a:	d308      	bcc.n	800611e <UART_SetConfig+0x79a>
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006112:	d204      	bcs.n	800611e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800611a:	60da      	str	r2, [r3, #12]
 800611c:	e17c      	b.n	8006418 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006124:	e178      	b.n	8006418 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800612e:	f040 80c5 	bne.w	80062bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006132:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006136:	2b20      	cmp	r3, #32
 8006138:	dc48      	bgt.n	80061cc <UART_SetConfig+0x848>
 800613a:	2b00      	cmp	r3, #0
 800613c:	db7b      	blt.n	8006236 <UART_SetConfig+0x8b2>
 800613e:	2b20      	cmp	r3, #32
 8006140:	d879      	bhi.n	8006236 <UART_SetConfig+0x8b2>
 8006142:	a201      	add	r2, pc, #4	@ (adr r2, 8006148 <UART_SetConfig+0x7c4>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	080061d3 	.word	0x080061d3
 800614c:	080061db 	.word	0x080061db
 8006150:	08006237 	.word	0x08006237
 8006154:	08006237 	.word	0x08006237
 8006158:	080061e3 	.word	0x080061e3
 800615c:	08006237 	.word	0x08006237
 8006160:	08006237 	.word	0x08006237
 8006164:	08006237 	.word	0x08006237
 8006168:	080061f3 	.word	0x080061f3
 800616c:	08006237 	.word	0x08006237
 8006170:	08006237 	.word	0x08006237
 8006174:	08006237 	.word	0x08006237
 8006178:	08006237 	.word	0x08006237
 800617c:	08006237 	.word	0x08006237
 8006180:	08006237 	.word	0x08006237
 8006184:	08006237 	.word	0x08006237
 8006188:	08006203 	.word	0x08006203
 800618c:	08006237 	.word	0x08006237
 8006190:	08006237 	.word	0x08006237
 8006194:	08006237 	.word	0x08006237
 8006198:	08006237 	.word	0x08006237
 800619c:	08006237 	.word	0x08006237
 80061a0:	08006237 	.word	0x08006237
 80061a4:	08006237 	.word	0x08006237
 80061a8:	08006237 	.word	0x08006237
 80061ac:	08006237 	.word	0x08006237
 80061b0:	08006237 	.word	0x08006237
 80061b4:	08006237 	.word	0x08006237
 80061b8:	08006237 	.word	0x08006237
 80061bc:	08006237 	.word	0x08006237
 80061c0:	08006237 	.word	0x08006237
 80061c4:	08006237 	.word	0x08006237
 80061c8:	08006229 	.word	0x08006229
 80061cc:	2b40      	cmp	r3, #64	@ 0x40
 80061ce:	d02e      	beq.n	800622e <UART_SetConfig+0x8aa>
 80061d0:	e031      	b.n	8006236 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d2:	f7fd f85f 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 80061d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061d8:	e033      	b.n	8006242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061da:	f7fd f871 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 80061de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061e0:	e02f      	b.n	8006242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe faa0 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f0:	e027      	b.n	8006242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fbec 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006200:	e01f      	b.n	8006242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006202:	4b2d      	ldr	r3, [pc, #180]	@ (80062b8 <UART_SetConfig+0x934>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800620e:	4b2a      	ldr	r3, [pc, #168]	@ (80062b8 <UART_SetConfig+0x934>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	08db      	lsrs	r3, r3, #3
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	4a24      	ldr	r2, [pc, #144]	@ (80062ac <UART_SetConfig+0x928>)
 800621a:	fa22 f303 	lsr.w	r3, r2, r3
 800621e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006220:	e00f      	b.n	8006242 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006222:	4b22      	ldr	r3, [pc, #136]	@ (80062ac <UART_SetConfig+0x928>)
 8006224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006226:	e00c      	b.n	8006242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006228:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <UART_SetConfig+0x92c>)
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800622c:	e009      	b.n	8006242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006234:	e005      	b.n	8006242 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80e7 	beq.w	8006418 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <UART_SetConfig+0x930>)
 8006250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006254:	461a      	mov	r2, r3
 8006256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006258:	fbb3 f3f2 	udiv	r3, r3, r2
 800625c:	005a      	lsls	r2, r3, #1
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	441a      	add	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	fbb2 f3f3 	udiv	r3, r2, r3
 800626e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006272:	2b0f      	cmp	r3, #15
 8006274:	d916      	bls.n	80062a4 <UART_SetConfig+0x920>
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800627c:	d212      	bcs.n	80062a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	b29b      	uxth	r3, r3
 8006282:	f023 030f 	bic.w	r3, r3, #15
 8006286:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	b29a      	uxth	r2, r3
 8006294:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006296:	4313      	orrs	r3, r2
 8006298:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80062a0:	60da      	str	r2, [r3, #12]
 80062a2:	e0b9      	b.n	8006418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062aa:	e0b5      	b.n	8006418 <UART_SetConfig+0xa94>
 80062ac:	03d09000 	.word	0x03d09000
 80062b0:	003d0900 	.word	0x003d0900
 80062b4:	080087fc 	.word	0x080087fc
 80062b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80062bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	dc49      	bgt.n	8006358 <UART_SetConfig+0x9d4>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	db7c      	blt.n	80063c2 <UART_SetConfig+0xa3e>
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d87a      	bhi.n	80063c2 <UART_SetConfig+0xa3e>
 80062cc:	a201      	add	r2, pc, #4	@ (adr r2, 80062d4 <UART_SetConfig+0x950>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	0800635f 	.word	0x0800635f
 80062d8:	08006367 	.word	0x08006367
 80062dc:	080063c3 	.word	0x080063c3
 80062e0:	080063c3 	.word	0x080063c3
 80062e4:	0800636f 	.word	0x0800636f
 80062e8:	080063c3 	.word	0x080063c3
 80062ec:	080063c3 	.word	0x080063c3
 80062f0:	080063c3 	.word	0x080063c3
 80062f4:	0800637f 	.word	0x0800637f
 80062f8:	080063c3 	.word	0x080063c3
 80062fc:	080063c3 	.word	0x080063c3
 8006300:	080063c3 	.word	0x080063c3
 8006304:	080063c3 	.word	0x080063c3
 8006308:	080063c3 	.word	0x080063c3
 800630c:	080063c3 	.word	0x080063c3
 8006310:	080063c3 	.word	0x080063c3
 8006314:	0800638f 	.word	0x0800638f
 8006318:	080063c3 	.word	0x080063c3
 800631c:	080063c3 	.word	0x080063c3
 8006320:	080063c3 	.word	0x080063c3
 8006324:	080063c3 	.word	0x080063c3
 8006328:	080063c3 	.word	0x080063c3
 800632c:	080063c3 	.word	0x080063c3
 8006330:	080063c3 	.word	0x080063c3
 8006334:	080063c3 	.word	0x080063c3
 8006338:	080063c3 	.word	0x080063c3
 800633c:	080063c3 	.word	0x080063c3
 8006340:	080063c3 	.word	0x080063c3
 8006344:	080063c3 	.word	0x080063c3
 8006348:	080063c3 	.word	0x080063c3
 800634c:	080063c3 	.word	0x080063c3
 8006350:	080063c3 	.word	0x080063c3
 8006354:	080063b5 	.word	0x080063b5
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	d02e      	beq.n	80063ba <UART_SetConfig+0xa36>
 800635c:	e031      	b.n	80063c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800635e:	f7fc ff99 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8006362:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006364:	e033      	b.n	80063ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006366:	f7fc ffab 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 800636a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800636c:	e02f      	b.n	80063ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe f9da 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637c:	e027      	b.n	80063ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637e:	f107 0318 	add.w	r3, r7, #24
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fb26 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638c:	e01f      	b.n	80063ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638e:	4b2d      	ldr	r3, [pc, #180]	@ (8006444 <UART_SetConfig+0xac0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800639a:	4b2a      	ldr	r3, [pc, #168]	@ (8006444 <UART_SetConfig+0xac0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	4a28      	ldr	r2, [pc, #160]	@ (8006448 <UART_SetConfig+0xac4>)
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ac:	e00f      	b.n	80063ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80063ae:	4b26      	ldr	r3, [pc, #152]	@ (8006448 <UART_SetConfig+0xac4>)
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b2:	e00c      	b.n	80063ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063b4:	4b25      	ldr	r3, [pc, #148]	@ (800644c <UART_SetConfig+0xac8>)
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b8:	e009      	b.n	80063ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e005      	b.n	80063ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063cc:	bf00      	nop
    }

    if (pclk != 0U)
 80063ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d021      	beq.n	8006418 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006450 <UART_SetConfig+0xacc>)
 80063da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063de:	461a      	mov	r2, r3
 80063e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	441a      	add	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	d909      	bls.n	8006412 <UART_SetConfig+0xa8e>
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006404:	d205      	bcs.n	8006412 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	b29a      	uxth	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	e002      	b.n	8006418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2201      	movs	r2, #1
 800641c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2201      	movs	r2, #1
 8006424:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2200      	movs	r2, #0
 800642c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2200      	movs	r2, #0
 8006432:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006434:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006438:	4618      	mov	r0, r3
 800643a:	3748      	adds	r7, #72	@ 0x48
 800643c:	46bd      	mov	sp, r7
 800643e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006442:	bf00      	nop
 8006444:	58024400 	.word	0x58024400
 8006448:	03d09000 	.word	0x03d09000
 800644c:	003d0900 	.word	0x003d0900
 8006450:	080087fc 	.word	0x080087fc

08006454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01a      	beq.n	800656a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006552:	d10a      	bne.n	800656a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
  }
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b098      	sub	sp, #96	@ 0x60
 800659c:	af02      	add	r7, sp, #8
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065a8:	f7fa fd74 	bl	8001094 <HAL_GetTick>
 80065ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d12f      	bne.n	800661c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c4:	2200      	movs	r2, #0
 80065c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f88e 	bl	80066ec <UART_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d022      	beq.n	800661c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e6      	bne.n	80065d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e063      	b.n	80066e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b04      	cmp	r3, #4
 8006628:	d149      	bne.n	80066be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800662a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006632:	2200      	movs	r2, #0
 8006634:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f857 	bl	80066ec <UART_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d03c      	beq.n	80066be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	623b      	str	r3, [r7, #32]
   return(result);
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006662:	633b      	str	r3, [r7, #48]	@ 0x30
 8006664:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	60fb      	str	r3, [r7, #12]
   return(result);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006696:	61fa      	str	r2, [r7, #28]
 8006698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	69b9      	ldr	r1, [r7, #24]
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	617b      	str	r3, [r7, #20]
   return(result);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e012      	b.n	80066e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3758      	adds	r7, #88	@ 0x58
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fc:	e04f      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006704:	d04b      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006706:	f7fa fcc5 	bl	8001094 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	429a      	cmp	r2, r3
 8006714:	d302      	bcc.n	800671c <UART_WaitOnFlagUntilTimeout+0x30>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e04e      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d037      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0xb2>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b80      	cmp	r3, #128	@ 0x80
 8006732:	d034      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b40      	cmp	r3, #64	@ 0x40
 8006738:	d031      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b08      	cmp	r3, #8
 8006746:	d110      	bne.n	800676a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2208      	movs	r2, #8
 800674e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f95b 	bl	8006a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2208      	movs	r2, #8
 800675a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e029      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006778:	d111      	bne.n	800679e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f941 	bl	8006a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e00f      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d0a0      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b0a3      	sub	sp, #140	@ 0x8c
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fa:	d10e      	bne.n	800681a <UART_Start_Receive_IT+0x52>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <UART_Start_Receive_IT+0x48>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800680a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800680e:	e02d      	b.n	800686c <UART_Start_Receive_IT+0xa4>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	22ff      	movs	r2, #255	@ 0xff
 8006814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006818:	e028      	b.n	800686c <UART_Start_Receive_IT+0xa4>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <UART_Start_Receive_IT+0x76>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d104      	bne.n	8006834 <UART_Start_Receive_IT+0x6c>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22ff      	movs	r2, #255	@ 0xff
 800682e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006832:	e01b      	b.n	800686c <UART_Start_Receive_IT+0xa4>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	227f      	movs	r2, #127	@ 0x7f
 8006838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800683c:	e016      	b.n	800686c <UART_Start_Receive_IT+0xa4>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006846:	d10d      	bne.n	8006864 <UART_Start_Receive_IT+0x9c>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <UART_Start_Receive_IT+0x92>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	227f      	movs	r2, #127	@ 0x7f
 8006854:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006858:	e008      	b.n	800686c <UART_Start_Receive_IT+0xa4>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	223f      	movs	r2, #63	@ 0x3f
 800685e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006862:	e003      	b.n	800686c <UART_Start_Receive_IT+0xa4>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2222      	movs	r2, #34	@ 0x22
 8006878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800688c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80068a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80068a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80068a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80068ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e3      	bne.n	800687c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068bc:	d14f      	bne.n	800695e <UART_Start_Receive_IT+0x196>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80068c4:	88fa      	ldrh	r2, [r7, #6]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d349      	bcc.n	800695e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d2:	d107      	bne.n	80068e4 <UART_Start_Receive_IT+0x11c>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a47      	ldr	r2, [pc, #284]	@ (80069fc <UART_Start_Receive_IT+0x234>)
 80068e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80068e2:	e002      	b.n	80068ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a46      	ldr	r2, [pc, #280]	@ (8006a00 <UART_Start_Receive_IT+0x238>)
 80068e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01a      	beq.n	8006928 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006916:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800691a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e4      	bne.n	80068f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800693e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006948:	64ba      	str	r2, [r7, #72]	@ 0x48
 800694a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800694e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_Start_Receive_IT+0x160>
 800695c:	e046      	b.n	80069ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006966:	d107      	bne.n	8006978 <UART_Start_Receive_IT+0x1b0>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a24      	ldr	r2, [pc, #144]	@ (8006a04 <UART_Start_Receive_IT+0x23c>)
 8006974:	675a      	str	r2, [r3, #116]	@ 0x74
 8006976:	e002      	b.n	800697e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a23      	ldr	r2, [pc, #140]	@ (8006a08 <UART_Start_Receive_IT+0x240>)
 800697c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d019      	beq.n	80069ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800699a:	677b      	str	r3, [r7, #116]	@ 0x74
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_Start_Receive_IT+0x1be>
 80069b8:	e018      	b.n	80069ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	613b      	str	r3, [r7, #16]
   return(result);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f043 0320 	orr.w	r3, r3, #32
 80069ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e6      	bne.n	80069ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	378c      	adds	r7, #140	@ 0x8c
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	08007229 	.word	0x08007229
 8006a00:	08006ec5 	.word	0x08006ec5
 8006a04:	08006d0d 	.word	0x08006d0d
 8006a08:	08006b55 	.word	0x08006b55

08006a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b095      	sub	sp, #84	@ 0x54
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a32:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad4 <UART_EndRxTransfer+0xc8>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d118      	bne.n	8006ab4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f023 0310 	bic.w	r3, r3, #16
 8006a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6979      	ldr	r1, [r7, #20]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	613b      	str	r3, [r7, #16]
   return(result);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ac8:	bf00      	nop
 8006aca:	3754      	adds	r7, #84	@ 0x54
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	effffffe 	.word	0xeffffffe

08006ad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7fe ff32 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6979      	ldr	r1, [r7, #20]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e6      	bne.n	8006b04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7fe fefd 	bl	8005944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b4a:	bf00      	nop
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b09c      	sub	sp, #112	@ 0x70
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b6c:	2b22      	cmp	r3, #34	@ 0x22
 8006b6e:	f040 80be 	bne.w	8006cee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b80:	b2d9      	uxtb	r1, r3
 8006b82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 80a1 	bne.w	8006cfe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006be0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	@ (8006d08 <UART_RxISR_8BIT+0x1b4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01f      	beq.n	8006c80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d018      	beq.n	8006c80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d12e      	bne.n	8006ce6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	69b9      	ldr	r1, [r7, #24]
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f003 0310 	and.w	r3, r3, #16
 8006cca:	2b10      	cmp	r3, #16
 8006ccc:	d103      	bne.n	8006cd6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fe fe44 	bl	800596c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce4:	e00b      	b.n	8006cfe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7f9 fe5e 	bl	80009a8 <HAL_UART_RxCpltCallback>
}
 8006cec:	e007      	b.n	8006cfe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0208 	orr.w	r2, r2, #8
 8006cfc:	619a      	str	r2, [r3, #24]
}
 8006cfe:	bf00      	nop
 8006d00:	3770      	adds	r7, #112	@ 0x70
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	58000c00 	.word	0x58000c00

08006d0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b09c      	sub	sp, #112	@ 0x70
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d24:	2b22      	cmp	r3, #34	@ 0x22
 8006d26:	f040 80be 	bne.w	8006ea6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006d3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 80a1 	bne.w	8006eb6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e6      	bne.n	8006d74 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3308      	adds	r3, #8
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006dc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e5      	bne.n	8006da6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a33      	ldr	r2, [pc, #204]	@ (8006ec0 <UART_RxISR_16BIT+0x1b4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d01f      	beq.n	8006e38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d018      	beq.n	8006e38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e6      	bne.n	8006e06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d12e      	bne.n	8006e9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d103      	bne.n	8006e8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fe fd68 	bl	800596c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e9c:	e00b      	b.n	8006eb6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7f9 fd82 	bl	80009a8 <HAL_UART_RxCpltCallback>
}
 8006ea4:	e007      	b.n	8006eb6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0208 	orr.w	r2, r2, #8
 8006eb4:	619a      	str	r2, [r3, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	3770      	adds	r7, #112	@ 0x70
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	58000c00 	.word	0x58000c00

08006ec4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ed2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006efa:	2b22      	cmp	r3, #34	@ 0x22
 8006efc:	f040 8181 	bne.w	8007202 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f06:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f0a:	e124      	b.n	8007156 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f16:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006f1a:	b2d9      	uxtb	r1, r3
 8006f1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f26:	400a      	ands	r2, r1
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d053      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f84:	f043 0201 	orr.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d011      	beq.n	8006fbe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2202      	movs	r2, #2
 8006fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb4:	f043 0204 	orr.w	r2, r3, #4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d011      	beq.n	8006fee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe4:	f043 0202 	orr.w	r2, r3, #2
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fe fcad 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80a1 	bne.w	8007156 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007036:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007038:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800703c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e4      	bne.n	8007014 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800705a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800705c:	4b6f      	ldr	r3, [pc, #444]	@ (800721c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800705e:	4013      	ands	r3, r2
 8007060:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800706e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007070:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007074:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800707c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e3      	bne.n	800704a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a61      	ldr	r2, [pc, #388]	@ (8007220 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d021      	beq.n	80070e4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01a      	beq.n	80070e4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80070d2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e4      	bne.n	80070ae <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d130      	bne.n	800714e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f023 0310 	bic.w	r3, r3, #16
 8007106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007114:	643b      	str	r3, [r7, #64]	@ 0x40
 8007116:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800711a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e4      	bne.n	80070f2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b10      	cmp	r3, #16
 8007134:	d103      	bne.n	800713e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2210      	movs	r2, #16
 800713c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fe fc10 	bl	800596c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800714c:	e00e      	b.n	800716c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7f9 fc2a 	bl	80009a8 <HAL_UART_RxCpltCallback>
        break;
 8007154:	e00a      	b.n	800716c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007156:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800715a:	2b00      	cmp	r3, #0
 800715c:	d006      	beq.n	800716c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800715e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f aed0 	bne.w	8006f0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007172:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007176:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800717a:	2b00      	cmp	r3, #0
 800717c:	d049      	beq.n	8007212 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007184:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007188:	429a      	cmp	r2, r3
 800718a:	d242      	bcs.n	8007212 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	61fb      	str	r3, [r7, #28]
   return(result);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80071b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e3      	bne.n	800718c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a17      	ldr	r2, [pc, #92]	@ (8007224 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80071c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f043 0320 	orr.w	r3, r3, #32
 80071de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6979      	ldr	r1, [r7, #20]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	613b      	str	r3, [r7, #16]
   return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e4      	bne.n	80071ca <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007200:	e007      	b.n	8007212 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699a      	ldr	r2, [r3, #24]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0208 	orr.w	r2, r2, #8
 8007210:	619a      	str	r2, [r3, #24]
}
 8007212:	bf00      	nop
 8007214:	37b0      	adds	r7, #176	@ 0xb0
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	effffffe 	.word	0xeffffffe
 8007220:	58000c00 	.word	0x58000c00
 8007224:	08006b55 	.word	0x08006b55

08007228 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b0ae      	sub	sp, #184	@ 0xb8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007236:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800725e:	2b22      	cmp	r3, #34	@ 0x22
 8007260:	f040 8185 	bne.w	800756e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800726a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800726e:	e128      	b.n	80074c2 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007282:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007286:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800728a:	4013      	ands	r3, r2
 800728c:	b29a      	uxth	r2, r3
 800728e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007292:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d053      	beq.n	800736e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d011      	beq.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80072d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ec:	f043 0201 	orr.w	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d011      	beq.n	8007326 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2202      	movs	r2, #2
 8007314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731c:	f043 0204 	orr.w	r2, r3, #4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d011      	beq.n	8007356 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2204      	movs	r2, #4
 8007344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734c:	f043 0202 	orr.w	r2, r3, #2
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fe faf9 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	f040 80a3 	bne.w	80074c2 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800738a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800738c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800739e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e2      	bne.n	800737c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3308      	adds	r3, #8
 80073bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80073c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007588 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3308      	adds	r3, #8
 80073d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80073da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e3      	bne.n	80073b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a61      	ldr	r2, [pc, #388]	@ (800758c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d021      	beq.n	8007450 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01a      	beq.n	8007450 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800742a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800742e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800743c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800743e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800744a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e4      	bne.n	800741a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d130      	bne.n	80074ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800746c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007480:	647b      	str	r3, [r7, #68]	@ 0x44
 8007482:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800748e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e4      	bne.n	800745e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b10      	cmp	r3, #16
 80074a0:	d103      	bne.n	80074aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2210      	movs	r2, #16
 80074a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe fa5a 	bl	800596c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80074b8:	e00e      	b.n	80074d8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7f9 fa74 	bl	80009a8 <HAL_UART_RxCpltCallback>
        break;
 80074c0:	e00a      	b.n	80074d8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074c2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d006      	beq.n	80074d8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 80074ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f47f aecc 	bne.w	8007270 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074de:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d049      	beq.n	800757e <UART_RxISR_16BIT_FIFOEN+0x356>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074f0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d242      	bcs.n	800757e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	623b      	str	r3, [r7, #32]
   return(result);
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800750e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800751c:	633a      	str	r2, [r7, #48]	@ 0x30
 800751e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e3      	bne.n	80074f8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a17      	ldr	r2, [pc, #92]	@ (8007590 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007534:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f043 0320 	orr.w	r3, r3, #32
 800754a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	617b      	str	r3, [r7, #20]
   return(result);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800756c:	e007      	b.n	800757e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0208 	orr.w	r2, r2, #8
 800757c:	619a      	str	r2, [r3, #24]
}
 800757e:	bf00      	nop
 8007580:	37b8      	adds	r7, #184	@ 0xb8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	effffffe 	.word	0xeffffffe
 800758c:	58000c00 	.word	0x58000c00
 8007590:	08006d0d 	.word	0x08006d0d

08007594 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e027      	b.n	8007636 <HAL_UARTEx_DisableFifoMode+0x66>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2224      	movs	r2, #36	@ 0x24
 80075f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007614:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007656:	2302      	movs	r3, #2
 8007658:	e02d      	b.n	80076b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2224      	movs	r2, #36	@ 0x24
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f850 	bl	800773c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e02d      	b.n	8007732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	@ 0x24
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0201 	bic.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f812 	bl	800773c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007748:	2b00      	cmp	r3, #0
 800774a:	d108      	bne.n	800775e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800775c:	e031      	b.n	80077c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800775e:	2310      	movs	r3, #16
 8007760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007762:	2310      	movs	r3, #16
 8007764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	0e5b      	lsrs	r3, r3, #25
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	0f5b      	lsrs	r3, r3, #29
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	7b3a      	ldrb	r2, [r7, #12]
 800778a:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <UARTEx_SetNbDataToProcess+0x94>)
 800778c:	5c8a      	ldrb	r2, [r1, r2]
 800778e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007792:	7b3a      	ldrb	r2, [r7, #12]
 8007794:	490f      	ldr	r1, [pc, #60]	@ (80077d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007798:	fb93 f3f2 	sdiv	r3, r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	7b7a      	ldrb	r2, [r7, #13]
 80077a8:	4909      	ldr	r1, [pc, #36]	@ (80077d0 <UARTEx_SetNbDataToProcess+0x94>)
 80077aa:	5c8a      	ldrb	r2, [r1, r2]
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077b0:	7b7a      	ldrb	r2, [r7, #13]
 80077b2:	4908      	ldr	r1, [pc, #32]	@ (80077d4 <UARTEx_SetNbDataToProcess+0x98>)
 80077b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	08008814 	.word	0x08008814
 80077d4:	0800881c 	.word	0x0800881c

080077d8 <std>:
 80077d8:	2300      	movs	r3, #0
 80077da:	b510      	push	{r4, lr}
 80077dc:	4604      	mov	r4, r0
 80077de:	e9c0 3300 	strd	r3, r3, [r0]
 80077e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077e6:	6083      	str	r3, [r0, #8]
 80077e8:	8181      	strh	r1, [r0, #12]
 80077ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80077ec:	81c2      	strh	r2, [r0, #14]
 80077ee:	6183      	str	r3, [r0, #24]
 80077f0:	4619      	mov	r1, r3
 80077f2:	2208      	movs	r2, #8
 80077f4:	305c      	adds	r0, #92	@ 0x5c
 80077f6:	f000 f9c2 	bl	8007b7e <memset>
 80077fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <std+0x58>)
 80077fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80077fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <std+0x5c>)
 8007800:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <std+0x60>)
 8007804:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <std+0x64>)
 8007808:	6323      	str	r3, [r4, #48]	@ 0x30
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <std+0x68>)
 800780c:	6224      	str	r4, [r4, #32]
 800780e:	429c      	cmp	r4, r3
 8007810:	d006      	beq.n	8007820 <std+0x48>
 8007812:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007816:	4294      	cmp	r4, r2
 8007818:	d002      	beq.n	8007820 <std+0x48>
 800781a:	33d0      	adds	r3, #208	@ 0xd0
 800781c:	429c      	cmp	r4, r3
 800781e:	d105      	bne.n	800782c <std+0x54>
 8007820:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007828:	f000 ba22 	b.w	8007c70 <__retarget_lock_init_recursive>
 800782c:	bd10      	pop	{r4, pc}
 800782e:	bf00      	nop
 8007830:	08007af9 	.word	0x08007af9
 8007834:	08007b1b 	.word	0x08007b1b
 8007838:	08007b53 	.word	0x08007b53
 800783c:	08007b77 	.word	0x08007b77
 8007840:	24000138 	.word	0x24000138

08007844 <stdio_exit_handler>:
 8007844:	4a02      	ldr	r2, [pc, #8]	@ (8007850 <stdio_exit_handler+0xc>)
 8007846:	4903      	ldr	r1, [pc, #12]	@ (8007854 <stdio_exit_handler+0x10>)
 8007848:	4803      	ldr	r0, [pc, #12]	@ (8007858 <stdio_exit_handler+0x14>)
 800784a:	f000 b869 	b.w	8007920 <_fwalk_sglue>
 800784e:	bf00      	nop
 8007850:	24000014 	.word	0x24000014
 8007854:	0800851d 	.word	0x0800851d
 8007858:	24000024 	.word	0x24000024

0800785c <cleanup_stdio>:
 800785c:	6841      	ldr	r1, [r0, #4]
 800785e:	4b0c      	ldr	r3, [pc, #48]	@ (8007890 <cleanup_stdio+0x34>)
 8007860:	4299      	cmp	r1, r3
 8007862:	b510      	push	{r4, lr}
 8007864:	4604      	mov	r4, r0
 8007866:	d001      	beq.n	800786c <cleanup_stdio+0x10>
 8007868:	f000 fe58 	bl	800851c <_fflush_r>
 800786c:	68a1      	ldr	r1, [r4, #8]
 800786e:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <cleanup_stdio+0x38>)
 8007870:	4299      	cmp	r1, r3
 8007872:	d002      	beq.n	800787a <cleanup_stdio+0x1e>
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fe51 	bl	800851c <_fflush_r>
 800787a:	68e1      	ldr	r1, [r4, #12]
 800787c:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <cleanup_stdio+0x3c>)
 800787e:	4299      	cmp	r1, r3
 8007880:	d004      	beq.n	800788c <cleanup_stdio+0x30>
 8007882:	4620      	mov	r0, r4
 8007884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007888:	f000 be48 	b.w	800851c <_fflush_r>
 800788c:	bd10      	pop	{r4, pc}
 800788e:	bf00      	nop
 8007890:	24000138 	.word	0x24000138
 8007894:	240001a0 	.word	0x240001a0
 8007898:	24000208 	.word	0x24000208

0800789c <global_stdio_init.part.0>:
 800789c:	b510      	push	{r4, lr}
 800789e:	4b0b      	ldr	r3, [pc, #44]	@ (80078cc <global_stdio_init.part.0+0x30>)
 80078a0:	4c0b      	ldr	r4, [pc, #44]	@ (80078d0 <global_stdio_init.part.0+0x34>)
 80078a2:	4a0c      	ldr	r2, [pc, #48]	@ (80078d4 <global_stdio_init.part.0+0x38>)
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	4620      	mov	r0, r4
 80078a8:	2200      	movs	r2, #0
 80078aa:	2104      	movs	r1, #4
 80078ac:	f7ff ff94 	bl	80077d8 <std>
 80078b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078b4:	2201      	movs	r2, #1
 80078b6:	2109      	movs	r1, #9
 80078b8:	f7ff ff8e 	bl	80077d8 <std>
 80078bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078c0:	2202      	movs	r2, #2
 80078c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c6:	2112      	movs	r1, #18
 80078c8:	f7ff bf86 	b.w	80077d8 <std>
 80078cc:	24000270 	.word	0x24000270
 80078d0:	24000138 	.word	0x24000138
 80078d4:	08007845 	.word	0x08007845

080078d8 <__sfp_lock_acquire>:
 80078d8:	4801      	ldr	r0, [pc, #4]	@ (80078e0 <__sfp_lock_acquire+0x8>)
 80078da:	f000 b9ca 	b.w	8007c72 <__retarget_lock_acquire_recursive>
 80078de:	bf00      	nop
 80078e0:	24000279 	.word	0x24000279

080078e4 <__sfp_lock_release>:
 80078e4:	4801      	ldr	r0, [pc, #4]	@ (80078ec <__sfp_lock_release+0x8>)
 80078e6:	f000 b9c5 	b.w	8007c74 <__retarget_lock_release_recursive>
 80078ea:	bf00      	nop
 80078ec:	24000279 	.word	0x24000279

080078f0 <__sinit>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	4604      	mov	r4, r0
 80078f4:	f7ff fff0 	bl	80078d8 <__sfp_lock_acquire>
 80078f8:	6a23      	ldr	r3, [r4, #32]
 80078fa:	b11b      	cbz	r3, 8007904 <__sinit+0x14>
 80078fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007900:	f7ff bff0 	b.w	80078e4 <__sfp_lock_release>
 8007904:	4b04      	ldr	r3, [pc, #16]	@ (8007918 <__sinit+0x28>)
 8007906:	6223      	str	r3, [r4, #32]
 8007908:	4b04      	ldr	r3, [pc, #16]	@ (800791c <__sinit+0x2c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f5      	bne.n	80078fc <__sinit+0xc>
 8007910:	f7ff ffc4 	bl	800789c <global_stdio_init.part.0>
 8007914:	e7f2      	b.n	80078fc <__sinit+0xc>
 8007916:	bf00      	nop
 8007918:	0800785d 	.word	0x0800785d
 800791c:	24000270 	.word	0x24000270

08007920 <_fwalk_sglue>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4607      	mov	r7, r0
 8007926:	4688      	mov	r8, r1
 8007928:	4614      	mov	r4, r2
 800792a:	2600      	movs	r6, #0
 800792c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007930:	f1b9 0901 	subs.w	r9, r9, #1
 8007934:	d505      	bpl.n	8007942 <_fwalk_sglue+0x22>
 8007936:	6824      	ldr	r4, [r4, #0]
 8007938:	2c00      	cmp	r4, #0
 800793a:	d1f7      	bne.n	800792c <_fwalk_sglue+0xc>
 800793c:	4630      	mov	r0, r6
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d907      	bls.n	8007958 <_fwalk_sglue+0x38>
 8007948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800794c:	3301      	adds	r3, #1
 800794e:	d003      	beq.n	8007958 <_fwalk_sglue+0x38>
 8007950:	4629      	mov	r1, r5
 8007952:	4638      	mov	r0, r7
 8007954:	47c0      	blx	r8
 8007956:	4306      	orrs	r6, r0
 8007958:	3568      	adds	r5, #104	@ 0x68
 800795a:	e7e9      	b.n	8007930 <_fwalk_sglue+0x10>

0800795c <iprintf>:
 800795c:	b40f      	push	{r0, r1, r2, r3}
 800795e:	b507      	push	{r0, r1, r2, lr}
 8007960:	4906      	ldr	r1, [pc, #24]	@ (800797c <iprintf+0x20>)
 8007962:	ab04      	add	r3, sp, #16
 8007964:	6808      	ldr	r0, [r1, #0]
 8007966:	f853 2b04 	ldr.w	r2, [r3], #4
 800796a:	6881      	ldr	r1, [r0, #8]
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	f000 faad 	bl	8007ecc <_vfiprintf_r>
 8007972:	b003      	add	sp, #12
 8007974:	f85d eb04 	ldr.w	lr, [sp], #4
 8007978:	b004      	add	sp, #16
 800797a:	4770      	bx	lr
 800797c:	24000020 	.word	0x24000020

08007980 <setbuf>:
 8007980:	fab1 f281 	clz	r2, r1
 8007984:	0952      	lsrs	r2, r2, #5
 8007986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800798a:	0052      	lsls	r2, r2, #1
 800798c:	f000 b800 	b.w	8007990 <setvbuf>

08007990 <setvbuf>:
 8007990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007994:	461d      	mov	r5, r3
 8007996:	4b57      	ldr	r3, [pc, #348]	@ (8007af4 <setvbuf+0x164>)
 8007998:	681f      	ldr	r7, [r3, #0]
 800799a:	4604      	mov	r4, r0
 800799c:	460e      	mov	r6, r1
 800799e:	4690      	mov	r8, r2
 80079a0:	b127      	cbz	r7, 80079ac <setvbuf+0x1c>
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	b913      	cbnz	r3, 80079ac <setvbuf+0x1c>
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ffa2 	bl	80078f0 <__sinit>
 80079ac:	f1b8 0f02 	cmp.w	r8, #2
 80079b0:	d006      	beq.n	80079c0 <setvbuf+0x30>
 80079b2:	f1b8 0f01 	cmp.w	r8, #1
 80079b6:	f200 809a 	bhi.w	8007aee <setvbuf+0x15e>
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	f2c0 8097 	blt.w	8007aee <setvbuf+0x15e>
 80079c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c2:	07d9      	lsls	r1, r3, #31
 80079c4:	d405      	bmi.n	80079d2 <setvbuf+0x42>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	059a      	lsls	r2, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <setvbuf+0x42>
 80079cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ce:	f000 f950 	bl	8007c72 <__retarget_lock_acquire_recursive>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4638      	mov	r0, r7
 80079d6:	f000 fda1 	bl	800851c <_fflush_r>
 80079da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079dc:	b141      	cbz	r1, 80079f0 <setvbuf+0x60>
 80079de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079e2:	4299      	cmp	r1, r3
 80079e4:	d002      	beq.n	80079ec <setvbuf+0x5c>
 80079e6:	4638      	mov	r0, r7
 80079e8:	f000 f946 	bl	8007c78 <_free_r>
 80079ec:	2300      	movs	r3, #0
 80079ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80079f0:	2300      	movs	r3, #0
 80079f2:	61a3      	str	r3, [r4, #24]
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	d503      	bpl.n	8007a04 <setvbuf+0x74>
 80079fc:	6921      	ldr	r1, [r4, #16]
 80079fe:	4638      	mov	r0, r7
 8007a00:	f000 f93a 	bl	8007c78 <_free_r>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	f1b8 0f02 	cmp.w	r8, #2
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	d061      	beq.n	8007ada <setvbuf+0x14a>
 8007a16:	ab01      	add	r3, sp, #4
 8007a18:	466a      	mov	r2, sp
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f000 fda5 	bl	800856c <__swhatbuf_r>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	4318      	orrs	r0, r3
 8007a26:	81a0      	strh	r0, [r4, #12]
 8007a28:	bb2d      	cbnz	r5, 8007a76 <setvbuf+0xe6>
 8007a2a:	9d00      	ldr	r5, [sp, #0]
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f96d 	bl	8007d0c <malloc>
 8007a32:	4606      	mov	r6, r0
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d152      	bne.n	8007ade <setvbuf+0x14e>
 8007a38:	f8dd 9000 	ldr.w	r9, [sp]
 8007a3c:	45a9      	cmp	r9, r5
 8007a3e:	d140      	bne.n	8007ac2 <setvbuf+0x132>
 8007a40:	f04f 35ff 	mov.w	r5, #4294967295
 8007a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a48:	f043 0202 	orr.w	r2, r3, #2
 8007a4c:	81a2      	strh	r2, [r4, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	60a2      	str	r2, [r4, #8]
 8007a52:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007a56:	6022      	str	r2, [r4, #0]
 8007a58:	6122      	str	r2, [r4, #16]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	6162      	str	r2, [r4, #20]
 8007a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a60:	07d6      	lsls	r6, r2, #31
 8007a62:	d404      	bmi.n	8007a6e <setvbuf+0xde>
 8007a64:	0598      	lsls	r0, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <setvbuf+0xde>
 8007a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6a:	f000 f903 	bl	8007c74 <__retarget_lock_release_recursive>
 8007a6e:	4628      	mov	r0, r5
 8007a70:	b003      	add	sp, #12
 8007a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d0d8      	beq.n	8007a2c <setvbuf+0x9c>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	b913      	cbnz	r3, 8007a84 <setvbuf+0xf4>
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff ff36 	bl	80078f0 <__sinit>
 8007a84:	f1b8 0f01 	cmp.w	r8, #1
 8007a88:	bf08      	it	eq
 8007a8a:	89a3      	ldrheq	r3, [r4, #12]
 8007a8c:	6026      	str	r6, [r4, #0]
 8007a8e:	bf04      	itt	eq
 8007a90:	f043 0301 	orreq.w	r3, r3, #1
 8007a94:	81a3      	strheq	r3, [r4, #12]
 8007a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9a:	f013 0208 	ands.w	r2, r3, #8
 8007a9e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007aa2:	d01e      	beq.n	8007ae2 <setvbuf+0x152>
 8007aa4:	07d9      	lsls	r1, r3, #31
 8007aa6:	bf41      	itttt	mi
 8007aa8:	2200      	movmi	r2, #0
 8007aaa:	426d      	negmi	r5, r5
 8007aac:	60a2      	strmi	r2, [r4, #8]
 8007aae:	61a5      	strmi	r5, [r4, #24]
 8007ab0:	bf58      	it	pl
 8007ab2:	60a5      	strpl	r5, [r4, #8]
 8007ab4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ab6:	07d2      	lsls	r2, r2, #31
 8007ab8:	d401      	bmi.n	8007abe <setvbuf+0x12e>
 8007aba:	059b      	lsls	r3, r3, #22
 8007abc:	d513      	bpl.n	8007ae6 <setvbuf+0x156>
 8007abe:	2500      	movs	r5, #0
 8007ac0:	e7d5      	b.n	8007a6e <setvbuf+0xde>
 8007ac2:	4648      	mov	r0, r9
 8007ac4:	f000 f922 	bl	8007d0c <malloc>
 8007ac8:	4606      	mov	r6, r0
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0b8      	beq.n	8007a40 <setvbuf+0xb0>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	464d      	mov	r5, r9
 8007ad8:	e7cf      	b.n	8007a7a <setvbuf+0xea>
 8007ada:	2500      	movs	r5, #0
 8007adc:	e7b2      	b.n	8007a44 <setvbuf+0xb4>
 8007ade:	46a9      	mov	r9, r5
 8007ae0:	e7f5      	b.n	8007ace <setvbuf+0x13e>
 8007ae2:	60a2      	str	r2, [r4, #8]
 8007ae4:	e7e6      	b.n	8007ab4 <setvbuf+0x124>
 8007ae6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae8:	f000 f8c4 	bl	8007c74 <__retarget_lock_release_recursive>
 8007aec:	e7e7      	b.n	8007abe <setvbuf+0x12e>
 8007aee:	f04f 35ff 	mov.w	r5, #4294967295
 8007af2:	e7bc      	b.n	8007a6e <setvbuf+0xde>
 8007af4:	24000020 	.word	0x24000020

08007af8 <__sread>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	460c      	mov	r4, r1
 8007afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b00:	f000 f868 	bl	8007bd4 <_read_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	bfab      	itete	ge
 8007b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b0c:	181b      	addge	r3, r3, r0
 8007b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b12:	bfac      	ite	ge
 8007b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b16:	81a3      	strhlt	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__swrite>:
 8007b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	461f      	mov	r7, r3
 8007b20:	898b      	ldrh	r3, [r1, #12]
 8007b22:	05db      	lsls	r3, r3, #23
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	4616      	mov	r6, r2
 8007b2a:	d505      	bpl.n	8007b38 <__swrite+0x1e>
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	2302      	movs	r3, #2
 8007b32:	2200      	movs	r2, #0
 8007b34:	f000 f83c 	bl	8007bb0 <_lseek_r>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	f000 b853 	b.w	8007bf8 <_write_r>

08007b52 <__sseek>:
 8007b52:	b510      	push	{r4, lr}
 8007b54:	460c      	mov	r4, r1
 8007b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5a:	f000 f829 	bl	8007bb0 <_lseek_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	bf15      	itete	ne
 8007b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b6e:	81a3      	strheq	r3, [r4, #12]
 8007b70:	bf18      	it	ne
 8007b72:	81a3      	strhne	r3, [r4, #12]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__sclose>:
 8007b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7a:	f000 b809 	b.w	8007b90 <_close_r>

08007b7e <memset>:
 8007b7e:	4402      	add	r2, r0
 8007b80:	4603      	mov	r3, r0
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d100      	bne.n	8007b88 <memset+0xa>
 8007b86:	4770      	bx	lr
 8007b88:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8c:	e7f9      	b.n	8007b82 <memset+0x4>
	...

08007b90 <_close_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d06      	ldr	r5, [pc, #24]	@ (8007bac <_close_r+0x1c>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7f9 f8a5 	bl	8000cea <_close>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_close_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_close_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	24000274 	.word	0x24000274

08007bb0 <_lseek_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	@ (8007bd0 <_lseek_r+0x20>)
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	4608      	mov	r0, r1
 8007bb8:	4611      	mov	r1, r2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	602a      	str	r2, [r5, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f7f9 f8ba 	bl	8000d38 <_lseek>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_lseek_r+0x1e>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_lseek_r+0x1e>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	24000274 	.word	0x24000274

08007bd4 <_read_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	@ (8007bf4 <_read_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7f9 f848 	bl	8000c78 <_read>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_read_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_read_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	24000274 	.word	0x24000274

08007bf8 <_write_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	@ (8007c18 <_write_r+0x20>)
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4608      	mov	r0, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7f9 f853 	bl	8000cb2 <_write>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_write_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_write_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	24000274 	.word	0x24000274

08007c1c <__errno>:
 8007c1c:	4b01      	ldr	r3, [pc, #4]	@ (8007c24 <__errno+0x8>)
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	24000020 	.word	0x24000020

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c60 <__libc_init_array+0x38>)
 8007c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c64 <__libc_init_array+0x3c>)
 8007c2e:	1b64      	subs	r4, r4, r5
 8007c30:	10a4      	asrs	r4, r4, #2
 8007c32:	2600      	movs	r6, #0
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	4d0b      	ldr	r5, [pc, #44]	@ (8007c68 <__libc_init_array+0x40>)
 8007c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c6c <__libc_init_array+0x44>)
 8007c3c:	f000 fdbe 	bl	80087bc <_init>
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	2600      	movs	r6, #0
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	08008860 	.word	0x08008860
 8007c64:	08008860 	.word	0x08008860
 8007c68:	08008860 	.word	0x08008860
 8007c6c:	08008864 	.word	0x08008864

08007c70 <__retarget_lock_init_recursive>:
 8007c70:	4770      	bx	lr

08007c72 <__retarget_lock_acquire_recursive>:
 8007c72:	4770      	bx	lr

08007c74 <__retarget_lock_release_recursive>:
 8007c74:	4770      	bx	lr
	...

08007c78 <_free_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d041      	beq.n	8007d04 <_free_r+0x8c>
 8007c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c84:	1f0c      	subs	r4, r1, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfb8      	it	lt
 8007c8a:	18e4      	addlt	r4, r4, r3
 8007c8c:	f000 f8e8 	bl	8007e60 <__malloc_lock>
 8007c90:	4a1d      	ldr	r2, [pc, #116]	@ (8007d08 <_free_r+0x90>)
 8007c92:	6813      	ldr	r3, [r2, #0]
 8007c94:	b933      	cbnz	r3, 8007ca4 <_free_r+0x2c>
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	6014      	str	r4, [r2, #0]
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca0:	f000 b8e4 	b.w	8007e6c <__malloc_unlock>
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	d908      	bls.n	8007cba <_free_r+0x42>
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	1821      	adds	r1, r4, r0
 8007cac:	428b      	cmp	r3, r1
 8007cae:	bf01      	itttt	eq
 8007cb0:	6819      	ldreq	r1, [r3, #0]
 8007cb2:	685b      	ldreq	r3, [r3, #4]
 8007cb4:	1809      	addeq	r1, r1, r0
 8007cb6:	6021      	streq	r1, [r4, #0]
 8007cb8:	e7ed      	b.n	8007c96 <_free_r+0x1e>
 8007cba:	461a      	mov	r2, r3
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b10b      	cbz	r3, 8007cc4 <_free_r+0x4c>
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	d9fa      	bls.n	8007cba <_free_r+0x42>
 8007cc4:	6811      	ldr	r1, [r2, #0]
 8007cc6:	1850      	adds	r0, r2, r1
 8007cc8:	42a0      	cmp	r0, r4
 8007cca:	d10b      	bne.n	8007ce4 <_free_r+0x6c>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	4401      	add	r1, r0
 8007cd0:	1850      	adds	r0, r2, r1
 8007cd2:	4283      	cmp	r3, r0
 8007cd4:	6011      	str	r1, [r2, #0]
 8007cd6:	d1e0      	bne.n	8007c9a <_free_r+0x22>
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	6053      	str	r3, [r2, #4]
 8007cde:	4408      	add	r0, r1
 8007ce0:	6010      	str	r0, [r2, #0]
 8007ce2:	e7da      	b.n	8007c9a <_free_r+0x22>
 8007ce4:	d902      	bls.n	8007cec <_free_r+0x74>
 8007ce6:	230c      	movs	r3, #12
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	e7d6      	b.n	8007c9a <_free_r+0x22>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	1821      	adds	r1, r4, r0
 8007cf0:	428b      	cmp	r3, r1
 8007cf2:	bf04      	itt	eq
 8007cf4:	6819      	ldreq	r1, [r3, #0]
 8007cf6:	685b      	ldreq	r3, [r3, #4]
 8007cf8:	6063      	str	r3, [r4, #4]
 8007cfa:	bf04      	itt	eq
 8007cfc:	1809      	addeq	r1, r1, r0
 8007cfe:	6021      	streq	r1, [r4, #0]
 8007d00:	6054      	str	r4, [r2, #4]
 8007d02:	e7ca      	b.n	8007c9a <_free_r+0x22>
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	bf00      	nop
 8007d08:	24000280 	.word	0x24000280

08007d0c <malloc>:
 8007d0c:	4b02      	ldr	r3, [pc, #8]	@ (8007d18 <malloc+0xc>)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f000 b825 	b.w	8007d60 <_malloc_r>
 8007d16:	bf00      	nop
 8007d18:	24000020 	.word	0x24000020

08007d1c <sbrk_aligned>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d5c <sbrk_aligned+0x40>)
 8007d20:	460c      	mov	r4, r1
 8007d22:	6831      	ldr	r1, [r6, #0]
 8007d24:	4605      	mov	r5, r0
 8007d26:	b911      	cbnz	r1, 8007d2e <sbrk_aligned+0x12>
 8007d28:	f000 fd38 	bl	800879c <_sbrk_r>
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 fd33 	bl	800879c <_sbrk_r>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d103      	bne.n	8007d42 <sbrk_aligned+0x26>
 8007d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d3e:	4620      	mov	r0, r4
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d0f8      	beq.n	8007d3e <sbrk_aligned+0x22>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fd24 	bl	800879c <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1f2      	bne.n	8007d3e <sbrk_aligned+0x22>
 8007d58:	e7ef      	b.n	8007d3a <sbrk_aligned+0x1e>
 8007d5a:	bf00      	nop
 8007d5c:	2400027c 	.word	0x2400027c

08007d60 <_malloc_r>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	1ccd      	adds	r5, r1, #3
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	db01      	blt.n	8007d7c <_malloc_r+0x1c>
 8007d78:	42a9      	cmp	r1, r5
 8007d7a:	d904      	bls.n	8007d86 <_malloc_r+0x26>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	2000      	movs	r0, #0
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e5c <_malloc_r+0xfc>
 8007d8a:	f000 f869 	bl	8007e60 <__malloc_lock>
 8007d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d92:	461c      	mov	r4, r3
 8007d94:	bb44      	cbnz	r4, 8007de8 <_malloc_r+0x88>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff ffbf 	bl	8007d1c <sbrk_aligned>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	4604      	mov	r4, r0
 8007da2:	d158      	bne.n	8007e56 <_malloc_r+0xf6>
 8007da4:	f8d8 4000 	ldr.w	r4, [r8]
 8007da8:	4627      	mov	r7, r4
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	d143      	bne.n	8007e36 <_malloc_r+0xd6>
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	d04b      	beq.n	8007e4a <_malloc_r+0xea>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	4639      	mov	r1, r7
 8007db6:	4630      	mov	r0, r6
 8007db8:	eb04 0903 	add.w	r9, r4, r3
 8007dbc:	f000 fcee 	bl	800879c <_sbrk_r>
 8007dc0:	4581      	cmp	r9, r0
 8007dc2:	d142      	bne.n	8007e4a <_malloc_r+0xea>
 8007dc4:	6821      	ldr	r1, [r4, #0]
 8007dc6:	1a6d      	subs	r5, r5, r1
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ffa6 	bl	8007d1c <sbrk_aligned>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d03a      	beq.n	8007e4a <_malloc_r+0xea>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	442b      	add	r3, r5
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	f8d8 3000 	ldr.w	r3, [r8]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	bb62      	cbnz	r2, 8007e3c <_malloc_r+0xdc>
 8007de2:	f8c8 7000 	str.w	r7, [r8]
 8007de6:	e00f      	b.n	8007e08 <_malloc_r+0xa8>
 8007de8:	6822      	ldr	r2, [r4, #0]
 8007dea:	1b52      	subs	r2, r2, r5
 8007dec:	d420      	bmi.n	8007e30 <_malloc_r+0xd0>
 8007dee:	2a0b      	cmp	r2, #11
 8007df0:	d917      	bls.n	8007e22 <_malloc_r+0xc2>
 8007df2:	1961      	adds	r1, r4, r5
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	6025      	str	r5, [r4, #0]
 8007df8:	bf18      	it	ne
 8007dfa:	6059      	strne	r1, [r3, #4]
 8007dfc:	6863      	ldr	r3, [r4, #4]
 8007dfe:	bf08      	it	eq
 8007e00:	f8c8 1000 	streq.w	r1, [r8]
 8007e04:	5162      	str	r2, [r4, r5]
 8007e06:	604b      	str	r3, [r1, #4]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f82f 	bl	8007e6c <__malloc_unlock>
 8007e0e:	f104 000b 	add.w	r0, r4, #11
 8007e12:	1d23      	adds	r3, r4, #4
 8007e14:	f020 0007 	bic.w	r0, r0, #7
 8007e18:	1ac2      	subs	r2, r0, r3
 8007e1a:	bf1c      	itt	ne
 8007e1c:	1a1b      	subne	r3, r3, r0
 8007e1e:	50a3      	strne	r3, [r4, r2]
 8007e20:	e7af      	b.n	8007d82 <_malloc_r+0x22>
 8007e22:	6862      	ldr	r2, [r4, #4]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	bf0c      	ite	eq
 8007e28:	f8c8 2000 	streq.w	r2, [r8]
 8007e2c:	605a      	strne	r2, [r3, #4]
 8007e2e:	e7eb      	b.n	8007e08 <_malloc_r+0xa8>
 8007e30:	4623      	mov	r3, r4
 8007e32:	6864      	ldr	r4, [r4, #4]
 8007e34:	e7ae      	b.n	8007d94 <_malloc_r+0x34>
 8007e36:	463c      	mov	r4, r7
 8007e38:	687f      	ldr	r7, [r7, #4]
 8007e3a:	e7b6      	b.n	8007daa <_malloc_r+0x4a>
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d1fb      	bne.n	8007e3c <_malloc_r+0xdc>
 8007e44:	2300      	movs	r3, #0
 8007e46:	6053      	str	r3, [r2, #4]
 8007e48:	e7de      	b.n	8007e08 <_malloc_r+0xa8>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	6033      	str	r3, [r6, #0]
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f000 f80c 	bl	8007e6c <__malloc_unlock>
 8007e54:	e794      	b.n	8007d80 <_malloc_r+0x20>
 8007e56:	6005      	str	r5, [r0, #0]
 8007e58:	e7d6      	b.n	8007e08 <_malloc_r+0xa8>
 8007e5a:	bf00      	nop
 8007e5c:	24000280 	.word	0x24000280

08007e60 <__malloc_lock>:
 8007e60:	4801      	ldr	r0, [pc, #4]	@ (8007e68 <__malloc_lock+0x8>)
 8007e62:	f7ff bf06 	b.w	8007c72 <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	24000278 	.word	0x24000278

08007e6c <__malloc_unlock>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	@ (8007e74 <__malloc_unlock+0x8>)
 8007e6e:	f7ff bf01 	b.w	8007c74 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	24000278 	.word	0x24000278

08007e78 <__sfputc_r>:
 8007e78:	6893      	ldr	r3, [r2, #8]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	b410      	push	{r4}
 8007e80:	6093      	str	r3, [r2, #8]
 8007e82:	da08      	bge.n	8007e96 <__sfputc_r+0x1e>
 8007e84:	6994      	ldr	r4, [r2, #24]
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	db01      	blt.n	8007e8e <__sfputc_r+0x16>
 8007e8a:	290a      	cmp	r1, #10
 8007e8c:	d103      	bne.n	8007e96 <__sfputc_r+0x1e>
 8007e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e92:	f000 bbcd 	b.w	8008630 <__swbuf_r>
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	1c58      	adds	r0, r3, #1
 8007e9a:	6010      	str	r0, [r2, #0]
 8007e9c:	7019      	strb	r1, [r3, #0]
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <__sfputs_r>:
 8007ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	460f      	mov	r7, r1
 8007eac:	4614      	mov	r4, r2
 8007eae:	18d5      	adds	r5, r2, r3
 8007eb0:	42ac      	cmp	r4, r5
 8007eb2:	d101      	bne.n	8007eb8 <__sfputs_r+0x12>
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e007      	b.n	8007ec8 <__sfputs_r+0x22>
 8007eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebc:	463a      	mov	r2, r7
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f7ff ffda 	bl	8007e78 <__sfputc_r>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d1f3      	bne.n	8007eb0 <__sfputs_r+0xa>
 8007ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ecc <_vfiprintf_r>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	b09d      	sub	sp, #116	@ 0x74
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	4698      	mov	r8, r3
 8007ed8:	4606      	mov	r6, r0
 8007eda:	b118      	cbz	r0, 8007ee4 <_vfiprintf_r+0x18>
 8007edc:	6a03      	ldr	r3, [r0, #32]
 8007ede:	b90b      	cbnz	r3, 8007ee4 <_vfiprintf_r+0x18>
 8007ee0:	f7ff fd06 	bl	80078f0 <__sinit>
 8007ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_vfiprintf_r+0x2a>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	059a      	lsls	r2, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_vfiprintf_r+0x2a>
 8007ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ef2:	f7ff febe 	bl	8007c72 <__retarget_lock_acquire_recursive>
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	071b      	lsls	r3, r3, #28
 8007efa:	d501      	bpl.n	8007f00 <_vfiprintf_r+0x34>
 8007efc:	692b      	ldr	r3, [r5, #16]
 8007efe:	b99b      	cbnz	r3, 8007f28 <_vfiprintf_r+0x5c>
 8007f00:	4629      	mov	r1, r5
 8007f02:	4630      	mov	r0, r6
 8007f04:	f000 fbd2 	bl	80086ac <__swsetup_r>
 8007f08:	b170      	cbz	r0, 8007f28 <_vfiprintf_r+0x5c>
 8007f0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f0c:	07dc      	lsls	r4, r3, #31
 8007f0e:	d504      	bpl.n	8007f1a <_vfiprintf_r+0x4e>
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	b01d      	add	sp, #116	@ 0x74
 8007f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	0598      	lsls	r0, r3, #22
 8007f1e:	d4f7      	bmi.n	8007f10 <_vfiprintf_r+0x44>
 8007f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f22:	f7ff fea7 	bl	8007c74 <__retarget_lock_release_recursive>
 8007f26:	e7f3      	b.n	8007f10 <_vfiprintf_r+0x44>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f36:	2330      	movs	r3, #48	@ 0x30
 8007f38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080e8 <_vfiprintf_r+0x21c>
 8007f3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f40:	f04f 0901 	mov.w	r9, #1
 8007f44:	4623      	mov	r3, r4
 8007f46:	469a      	mov	sl, r3
 8007f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f4c:	b10a      	cbz	r2, 8007f52 <_vfiprintf_r+0x86>
 8007f4e:	2a25      	cmp	r2, #37	@ 0x25
 8007f50:	d1f9      	bne.n	8007f46 <_vfiprintf_r+0x7a>
 8007f52:	ebba 0b04 	subs.w	fp, sl, r4
 8007f56:	d00b      	beq.n	8007f70 <_vfiprintf_r+0xa4>
 8007f58:	465b      	mov	r3, fp
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7ff ffa1 	bl	8007ea6 <__sfputs_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	f000 80a7 	beq.w	80080b8 <_vfiprintf_r+0x1ec>
 8007f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f6c:	445a      	add	r2, fp
 8007f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f70:	f89a 3000 	ldrb.w	r3, [sl]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 809f 	beq.w	80080b8 <_vfiprintf_r+0x1ec>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f84:	f10a 0a01 	add.w	sl, sl, #1
 8007f88:	9304      	str	r3, [sp, #16]
 8007f8a:	9307      	str	r3, [sp, #28]
 8007f8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f90:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f92:	4654      	mov	r4, sl
 8007f94:	2205      	movs	r2, #5
 8007f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9a:	4853      	ldr	r0, [pc, #332]	@ (80080e8 <_vfiprintf_r+0x21c>)
 8007f9c:	f7f8 f9a0 	bl	80002e0 <memchr>
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	b9d8      	cbnz	r0, 8007fdc <_vfiprintf_r+0x110>
 8007fa4:	06d1      	lsls	r1, r2, #27
 8007fa6:	bf44      	itt	mi
 8007fa8:	2320      	movmi	r3, #32
 8007faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fae:	0713      	lsls	r3, r2, #28
 8007fb0:	bf44      	itt	mi
 8007fb2:	232b      	movmi	r3, #43	@ 0x2b
 8007fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fbe:	d015      	beq.n	8007fec <_vfiprintf_r+0x120>
 8007fc0:	9a07      	ldr	r2, [sp, #28]
 8007fc2:	4654      	mov	r4, sl
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	f04f 0c0a 	mov.w	ip, #10
 8007fca:	4621      	mov	r1, r4
 8007fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd0:	3b30      	subs	r3, #48	@ 0x30
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d94b      	bls.n	800806e <_vfiprintf_r+0x1a2>
 8007fd6:	b1b0      	cbz	r0, 8008006 <_vfiprintf_r+0x13a>
 8007fd8:	9207      	str	r2, [sp, #28]
 8007fda:	e014      	b.n	8008006 <_vfiprintf_r+0x13a>
 8007fdc:	eba0 0308 	sub.w	r3, r0, r8
 8007fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	46a2      	mov	sl, r4
 8007fea:	e7d2      	b.n	8007f92 <_vfiprintf_r+0xc6>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1d19      	adds	r1, r3, #4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	9103      	str	r1, [sp, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbb      	ittet	lt
 8007ff8:	425b      	neglt	r3, r3
 8007ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8007ffe:	9307      	strge	r3, [sp, #28]
 8008000:	9307      	strlt	r3, [sp, #28]
 8008002:	bfb8      	it	lt
 8008004:	9204      	strlt	r2, [sp, #16]
 8008006:	7823      	ldrb	r3, [r4, #0]
 8008008:	2b2e      	cmp	r3, #46	@ 0x2e
 800800a:	d10a      	bne.n	8008022 <_vfiprintf_r+0x156>
 800800c:	7863      	ldrb	r3, [r4, #1]
 800800e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008010:	d132      	bne.n	8008078 <_vfiprintf_r+0x1ac>
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	1d1a      	adds	r2, r3, #4
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	9203      	str	r2, [sp, #12]
 800801a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800801e:	3402      	adds	r4, #2
 8008020:	9305      	str	r3, [sp, #20]
 8008022:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080f8 <_vfiprintf_r+0x22c>
 8008026:	7821      	ldrb	r1, [r4, #0]
 8008028:	2203      	movs	r2, #3
 800802a:	4650      	mov	r0, sl
 800802c:	f7f8 f958 	bl	80002e0 <memchr>
 8008030:	b138      	cbz	r0, 8008042 <_vfiprintf_r+0x176>
 8008032:	9b04      	ldr	r3, [sp, #16]
 8008034:	eba0 000a 	sub.w	r0, r0, sl
 8008038:	2240      	movs	r2, #64	@ 0x40
 800803a:	4082      	lsls	r2, r0
 800803c:	4313      	orrs	r3, r2
 800803e:	3401      	adds	r4, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008046:	4829      	ldr	r0, [pc, #164]	@ (80080ec <_vfiprintf_r+0x220>)
 8008048:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800804c:	2206      	movs	r2, #6
 800804e:	f7f8 f947 	bl	80002e0 <memchr>
 8008052:	2800      	cmp	r0, #0
 8008054:	d03f      	beq.n	80080d6 <_vfiprintf_r+0x20a>
 8008056:	4b26      	ldr	r3, [pc, #152]	@ (80080f0 <_vfiprintf_r+0x224>)
 8008058:	bb1b      	cbnz	r3, 80080a2 <_vfiprintf_r+0x1d6>
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	3307      	adds	r3, #7
 800805e:	f023 0307 	bic.w	r3, r3, #7
 8008062:	3308      	adds	r3, #8
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008068:	443b      	add	r3, r7
 800806a:	9309      	str	r3, [sp, #36]	@ 0x24
 800806c:	e76a      	b.n	8007f44 <_vfiprintf_r+0x78>
 800806e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008072:	460c      	mov	r4, r1
 8008074:	2001      	movs	r0, #1
 8008076:	e7a8      	b.n	8007fca <_vfiprintf_r+0xfe>
 8008078:	2300      	movs	r3, #0
 800807a:	3401      	adds	r4, #1
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	4619      	mov	r1, r3
 8008080:	f04f 0c0a 	mov.w	ip, #10
 8008084:	4620      	mov	r0, r4
 8008086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808a:	3a30      	subs	r2, #48	@ 0x30
 800808c:	2a09      	cmp	r2, #9
 800808e:	d903      	bls.n	8008098 <_vfiprintf_r+0x1cc>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0c6      	beq.n	8008022 <_vfiprintf_r+0x156>
 8008094:	9105      	str	r1, [sp, #20]
 8008096:	e7c4      	b.n	8008022 <_vfiprintf_r+0x156>
 8008098:	fb0c 2101 	mla	r1, ip, r1, r2
 800809c:	4604      	mov	r4, r0
 800809e:	2301      	movs	r3, #1
 80080a0:	e7f0      	b.n	8008084 <_vfiprintf_r+0x1b8>
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	462a      	mov	r2, r5
 80080a8:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <_vfiprintf_r+0x228>)
 80080aa:	a904      	add	r1, sp, #16
 80080ac:	4630      	mov	r0, r6
 80080ae:	f3af 8000 	nop.w
 80080b2:	4607      	mov	r7, r0
 80080b4:	1c78      	adds	r0, r7, #1
 80080b6:	d1d6      	bne.n	8008066 <_vfiprintf_r+0x19a>
 80080b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d405      	bmi.n	80080ca <_vfiprintf_r+0x1fe>
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	059a      	lsls	r2, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_vfiprintf_r+0x1fe>
 80080c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080c6:	f7ff fdd5 	bl	8007c74 <__retarget_lock_release_recursive>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	065b      	lsls	r3, r3, #25
 80080ce:	f53f af1f 	bmi.w	8007f10 <_vfiprintf_r+0x44>
 80080d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080d4:	e71e      	b.n	8007f14 <_vfiprintf_r+0x48>
 80080d6:	ab03      	add	r3, sp, #12
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	462a      	mov	r2, r5
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <_vfiprintf_r+0x228>)
 80080de:	a904      	add	r1, sp, #16
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 f879 	bl	80081d8 <_printf_i>
 80080e6:	e7e4      	b.n	80080b2 <_vfiprintf_r+0x1e6>
 80080e8:	08008824 	.word	0x08008824
 80080ec:	0800882e 	.word	0x0800882e
 80080f0:	00000000 	.word	0x00000000
 80080f4:	08007ea7 	.word	0x08007ea7
 80080f8:	0800882a 	.word	0x0800882a

080080fc <_printf_common>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	4616      	mov	r6, r2
 8008102:	4698      	mov	r8, r3
 8008104:	688a      	ldr	r2, [r1, #8]
 8008106:	690b      	ldr	r3, [r1, #16]
 8008108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800810c:	4293      	cmp	r3, r2
 800810e:	bfb8      	it	lt
 8008110:	4613      	movlt	r3, r2
 8008112:	6033      	str	r3, [r6, #0]
 8008114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008118:	4607      	mov	r7, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b10a      	cbz	r2, 8008122 <_printf_common+0x26>
 800811e:	3301      	adds	r3, #1
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	0699      	lsls	r1, r3, #26
 8008126:	bf42      	ittt	mi
 8008128:	6833      	ldrmi	r3, [r6, #0]
 800812a:	3302      	addmi	r3, #2
 800812c:	6033      	strmi	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	f015 0506 	ands.w	r5, r5, #6
 8008134:	d106      	bne.n	8008144 <_printf_common+0x48>
 8008136:	f104 0a19 	add.w	sl, r4, #25
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	6832      	ldr	r2, [r6, #0]
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc26      	bgt.n	8008192 <_printf_common+0x96>
 8008144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	3b00      	subs	r3, #0
 800814c:	bf18      	it	ne
 800814e:	2301      	movne	r3, #1
 8008150:	0692      	lsls	r2, r2, #26
 8008152:	d42b      	bmi.n	80081ac <_printf_common+0xb0>
 8008154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008158:	4641      	mov	r1, r8
 800815a:	4638      	mov	r0, r7
 800815c:	47c8      	blx	r9
 800815e:	3001      	adds	r0, #1
 8008160:	d01e      	beq.n	80081a0 <_printf_common+0xa4>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	6922      	ldr	r2, [r4, #16]
 8008166:	f003 0306 	and.w	r3, r3, #6
 800816a:	2b04      	cmp	r3, #4
 800816c:	bf02      	ittt	eq
 800816e:	68e5      	ldreq	r5, [r4, #12]
 8008170:	6833      	ldreq	r3, [r6, #0]
 8008172:	1aed      	subeq	r5, r5, r3
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	bf0c      	ite	eq
 8008178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800817c:	2500      	movne	r5, #0
 800817e:	4293      	cmp	r3, r2
 8008180:	bfc4      	itt	gt
 8008182:	1a9b      	subgt	r3, r3, r2
 8008184:	18ed      	addgt	r5, r5, r3
 8008186:	2600      	movs	r6, #0
 8008188:	341a      	adds	r4, #26
 800818a:	42b5      	cmp	r5, r6
 800818c:	d11a      	bne.n	80081c4 <_printf_common+0xc8>
 800818e:	2000      	movs	r0, #0
 8008190:	e008      	b.n	80081a4 <_printf_common+0xa8>
 8008192:	2301      	movs	r3, #1
 8008194:	4652      	mov	r2, sl
 8008196:	4641      	mov	r1, r8
 8008198:	4638      	mov	r0, r7
 800819a:	47c8      	blx	r9
 800819c:	3001      	adds	r0, #1
 800819e:	d103      	bne.n	80081a8 <_printf_common+0xac>
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a8:	3501      	adds	r5, #1
 80081aa:	e7c6      	b.n	800813a <_printf_common+0x3e>
 80081ac:	18e1      	adds	r1, r4, r3
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	2030      	movs	r0, #48	@ 0x30
 80081b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081b6:	4422      	add	r2, r4
 80081b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081c0:	3302      	adds	r3, #2
 80081c2:	e7c7      	b.n	8008154 <_printf_common+0x58>
 80081c4:	2301      	movs	r3, #1
 80081c6:	4622      	mov	r2, r4
 80081c8:	4641      	mov	r1, r8
 80081ca:	4638      	mov	r0, r7
 80081cc:	47c8      	blx	r9
 80081ce:	3001      	adds	r0, #1
 80081d0:	d0e6      	beq.n	80081a0 <_printf_common+0xa4>
 80081d2:	3601      	adds	r6, #1
 80081d4:	e7d9      	b.n	800818a <_printf_common+0x8e>
	...

080081d8 <_printf_i>:
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	7e0f      	ldrb	r7, [r1, #24]
 80081de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081e0:	2f78      	cmp	r7, #120	@ 0x78
 80081e2:	4691      	mov	r9, r2
 80081e4:	4680      	mov	r8, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	469a      	mov	sl, r3
 80081ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081ee:	d807      	bhi.n	8008200 <_printf_i+0x28>
 80081f0:	2f62      	cmp	r7, #98	@ 0x62
 80081f2:	d80a      	bhi.n	800820a <_printf_i+0x32>
 80081f4:	2f00      	cmp	r7, #0
 80081f6:	f000 80d1 	beq.w	800839c <_printf_i+0x1c4>
 80081fa:	2f58      	cmp	r7, #88	@ 0x58
 80081fc:	f000 80b8 	beq.w	8008370 <_printf_i+0x198>
 8008200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008208:	e03a      	b.n	8008280 <_printf_i+0xa8>
 800820a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800820e:	2b15      	cmp	r3, #21
 8008210:	d8f6      	bhi.n	8008200 <_printf_i+0x28>
 8008212:	a101      	add	r1, pc, #4	@ (adr r1, 8008218 <_printf_i+0x40>)
 8008214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008218:	08008271 	.word	0x08008271
 800821c:	08008285 	.word	0x08008285
 8008220:	08008201 	.word	0x08008201
 8008224:	08008201 	.word	0x08008201
 8008228:	08008201 	.word	0x08008201
 800822c:	08008201 	.word	0x08008201
 8008230:	08008285 	.word	0x08008285
 8008234:	08008201 	.word	0x08008201
 8008238:	08008201 	.word	0x08008201
 800823c:	08008201 	.word	0x08008201
 8008240:	08008201 	.word	0x08008201
 8008244:	08008383 	.word	0x08008383
 8008248:	080082af 	.word	0x080082af
 800824c:	0800833d 	.word	0x0800833d
 8008250:	08008201 	.word	0x08008201
 8008254:	08008201 	.word	0x08008201
 8008258:	080083a5 	.word	0x080083a5
 800825c:	08008201 	.word	0x08008201
 8008260:	080082af 	.word	0x080082af
 8008264:	08008201 	.word	0x08008201
 8008268:	08008201 	.word	0x08008201
 800826c:	08008345 	.word	0x08008345
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6032      	str	r2, [r6, #0]
 8008278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800827c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008280:	2301      	movs	r3, #1
 8008282:	e09c      	b.n	80083be <_printf_i+0x1e6>
 8008284:	6833      	ldr	r3, [r6, #0]
 8008286:	6820      	ldr	r0, [r4, #0]
 8008288:	1d19      	adds	r1, r3, #4
 800828a:	6031      	str	r1, [r6, #0]
 800828c:	0606      	lsls	r6, r0, #24
 800828e:	d501      	bpl.n	8008294 <_printf_i+0xbc>
 8008290:	681d      	ldr	r5, [r3, #0]
 8008292:	e003      	b.n	800829c <_printf_i+0xc4>
 8008294:	0645      	lsls	r5, r0, #25
 8008296:	d5fb      	bpl.n	8008290 <_printf_i+0xb8>
 8008298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800829c:	2d00      	cmp	r5, #0
 800829e:	da03      	bge.n	80082a8 <_printf_i+0xd0>
 80082a0:	232d      	movs	r3, #45	@ 0x2d
 80082a2:	426d      	negs	r5, r5
 80082a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082a8:	4858      	ldr	r0, [pc, #352]	@ (800840c <_printf_i+0x234>)
 80082aa:	230a      	movs	r3, #10
 80082ac:	e011      	b.n	80082d2 <_printf_i+0xfa>
 80082ae:	6821      	ldr	r1, [r4, #0]
 80082b0:	6833      	ldr	r3, [r6, #0]
 80082b2:	0608      	lsls	r0, r1, #24
 80082b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80082b8:	d402      	bmi.n	80082c0 <_printf_i+0xe8>
 80082ba:	0649      	lsls	r1, r1, #25
 80082bc:	bf48      	it	mi
 80082be:	b2ad      	uxthmi	r5, r5
 80082c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80082c2:	4852      	ldr	r0, [pc, #328]	@ (800840c <_printf_i+0x234>)
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	bf14      	ite	ne
 80082c8:	230a      	movne	r3, #10
 80082ca:	2308      	moveq	r3, #8
 80082cc:	2100      	movs	r1, #0
 80082ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082d2:	6866      	ldr	r6, [r4, #4]
 80082d4:	60a6      	str	r6, [r4, #8]
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	db05      	blt.n	80082e6 <_printf_i+0x10e>
 80082da:	6821      	ldr	r1, [r4, #0]
 80082dc:	432e      	orrs	r6, r5
 80082de:	f021 0104 	bic.w	r1, r1, #4
 80082e2:	6021      	str	r1, [r4, #0]
 80082e4:	d04b      	beq.n	800837e <_printf_i+0x1a6>
 80082e6:	4616      	mov	r6, r2
 80082e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80082ec:	fb03 5711 	mls	r7, r3, r1, r5
 80082f0:	5dc7      	ldrb	r7, [r0, r7]
 80082f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082f6:	462f      	mov	r7, r5
 80082f8:	42bb      	cmp	r3, r7
 80082fa:	460d      	mov	r5, r1
 80082fc:	d9f4      	bls.n	80082e8 <_printf_i+0x110>
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d10b      	bne.n	800831a <_printf_i+0x142>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	07df      	lsls	r7, r3, #31
 8008306:	d508      	bpl.n	800831a <_printf_i+0x142>
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	6861      	ldr	r1, [r4, #4]
 800830c:	4299      	cmp	r1, r3
 800830e:	bfde      	ittt	le
 8008310:	2330      	movle	r3, #48	@ 0x30
 8008312:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008316:	f106 36ff 	addle.w	r6, r6, #4294967295
 800831a:	1b92      	subs	r2, r2, r6
 800831c:	6122      	str	r2, [r4, #16]
 800831e:	f8cd a000 	str.w	sl, [sp]
 8008322:	464b      	mov	r3, r9
 8008324:	aa03      	add	r2, sp, #12
 8008326:	4621      	mov	r1, r4
 8008328:	4640      	mov	r0, r8
 800832a:	f7ff fee7 	bl	80080fc <_printf_common>
 800832e:	3001      	adds	r0, #1
 8008330:	d14a      	bne.n	80083c8 <_printf_i+0x1f0>
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	b004      	add	sp, #16
 8008338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f043 0320 	orr.w	r3, r3, #32
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	4832      	ldr	r0, [pc, #200]	@ (8008410 <_printf_i+0x238>)
 8008346:	2778      	movs	r7, #120	@ 0x78
 8008348:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	6831      	ldr	r1, [r6, #0]
 8008350:	061f      	lsls	r7, r3, #24
 8008352:	f851 5b04 	ldr.w	r5, [r1], #4
 8008356:	d402      	bmi.n	800835e <_printf_i+0x186>
 8008358:	065f      	lsls	r7, r3, #25
 800835a:	bf48      	it	mi
 800835c:	b2ad      	uxthmi	r5, r5
 800835e:	6031      	str	r1, [r6, #0]
 8008360:	07d9      	lsls	r1, r3, #31
 8008362:	bf44      	itt	mi
 8008364:	f043 0320 	orrmi.w	r3, r3, #32
 8008368:	6023      	strmi	r3, [r4, #0]
 800836a:	b11d      	cbz	r5, 8008374 <_printf_i+0x19c>
 800836c:	2310      	movs	r3, #16
 800836e:	e7ad      	b.n	80082cc <_printf_i+0xf4>
 8008370:	4826      	ldr	r0, [pc, #152]	@ (800840c <_printf_i+0x234>)
 8008372:	e7e9      	b.n	8008348 <_printf_i+0x170>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	f023 0320 	bic.w	r3, r3, #32
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	e7f6      	b.n	800836c <_printf_i+0x194>
 800837e:	4616      	mov	r6, r2
 8008380:	e7bd      	b.n	80082fe <_printf_i+0x126>
 8008382:	6833      	ldr	r3, [r6, #0]
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	6961      	ldr	r1, [r4, #20]
 8008388:	1d18      	adds	r0, r3, #4
 800838a:	6030      	str	r0, [r6, #0]
 800838c:	062e      	lsls	r6, r5, #24
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	d501      	bpl.n	8008396 <_printf_i+0x1be>
 8008392:	6019      	str	r1, [r3, #0]
 8008394:	e002      	b.n	800839c <_printf_i+0x1c4>
 8008396:	0668      	lsls	r0, r5, #25
 8008398:	d5fb      	bpl.n	8008392 <_printf_i+0x1ba>
 800839a:	8019      	strh	r1, [r3, #0]
 800839c:	2300      	movs	r3, #0
 800839e:	6123      	str	r3, [r4, #16]
 80083a0:	4616      	mov	r6, r2
 80083a2:	e7bc      	b.n	800831e <_printf_i+0x146>
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	1d1a      	adds	r2, r3, #4
 80083a8:	6032      	str	r2, [r6, #0]
 80083aa:	681e      	ldr	r6, [r3, #0]
 80083ac:	6862      	ldr	r2, [r4, #4]
 80083ae:	2100      	movs	r1, #0
 80083b0:	4630      	mov	r0, r6
 80083b2:	f7f7 ff95 	bl	80002e0 <memchr>
 80083b6:	b108      	cbz	r0, 80083bc <_printf_i+0x1e4>
 80083b8:	1b80      	subs	r0, r0, r6
 80083ba:	6060      	str	r0, [r4, #4]
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	6123      	str	r3, [r4, #16]
 80083c0:	2300      	movs	r3, #0
 80083c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c6:	e7aa      	b.n	800831e <_printf_i+0x146>
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	4632      	mov	r2, r6
 80083cc:	4649      	mov	r1, r9
 80083ce:	4640      	mov	r0, r8
 80083d0:	47d0      	blx	sl
 80083d2:	3001      	adds	r0, #1
 80083d4:	d0ad      	beq.n	8008332 <_printf_i+0x15a>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	079b      	lsls	r3, r3, #30
 80083da:	d413      	bmi.n	8008404 <_printf_i+0x22c>
 80083dc:	68e0      	ldr	r0, [r4, #12]
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	4298      	cmp	r0, r3
 80083e2:	bfb8      	it	lt
 80083e4:	4618      	movlt	r0, r3
 80083e6:	e7a6      	b.n	8008336 <_printf_i+0x15e>
 80083e8:	2301      	movs	r3, #1
 80083ea:	4632      	mov	r2, r6
 80083ec:	4649      	mov	r1, r9
 80083ee:	4640      	mov	r0, r8
 80083f0:	47d0      	blx	sl
 80083f2:	3001      	adds	r0, #1
 80083f4:	d09d      	beq.n	8008332 <_printf_i+0x15a>
 80083f6:	3501      	adds	r5, #1
 80083f8:	68e3      	ldr	r3, [r4, #12]
 80083fa:	9903      	ldr	r1, [sp, #12]
 80083fc:	1a5b      	subs	r3, r3, r1
 80083fe:	42ab      	cmp	r3, r5
 8008400:	dcf2      	bgt.n	80083e8 <_printf_i+0x210>
 8008402:	e7eb      	b.n	80083dc <_printf_i+0x204>
 8008404:	2500      	movs	r5, #0
 8008406:	f104 0619 	add.w	r6, r4, #25
 800840a:	e7f5      	b.n	80083f8 <_printf_i+0x220>
 800840c:	08008835 	.word	0x08008835
 8008410:	08008846 	.word	0x08008846

08008414 <__sflush_r>:
 8008414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841c:	0716      	lsls	r6, r2, #28
 800841e:	4605      	mov	r5, r0
 8008420:	460c      	mov	r4, r1
 8008422:	d454      	bmi.n	80084ce <__sflush_r+0xba>
 8008424:	684b      	ldr	r3, [r1, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dc02      	bgt.n	8008430 <__sflush_r+0x1c>
 800842a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	dd48      	ble.n	80084c2 <__sflush_r+0xae>
 8008430:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008432:	2e00      	cmp	r6, #0
 8008434:	d045      	beq.n	80084c2 <__sflush_r+0xae>
 8008436:	2300      	movs	r3, #0
 8008438:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800843c:	682f      	ldr	r7, [r5, #0]
 800843e:	6a21      	ldr	r1, [r4, #32]
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	d030      	beq.n	80084a6 <__sflush_r+0x92>
 8008444:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	0759      	lsls	r1, r3, #29
 800844a:	d505      	bpl.n	8008458 <__sflush_r+0x44>
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008452:	b10b      	cbz	r3, 8008458 <__sflush_r+0x44>
 8008454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	2300      	movs	r3, #0
 800845a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800845c:	6a21      	ldr	r1, [r4, #32]
 800845e:	4628      	mov	r0, r5
 8008460:	47b0      	blx	r6
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	d106      	bne.n	8008476 <__sflush_r+0x62>
 8008468:	6829      	ldr	r1, [r5, #0]
 800846a:	291d      	cmp	r1, #29
 800846c:	d82b      	bhi.n	80084c6 <__sflush_r+0xb2>
 800846e:	4a2a      	ldr	r2, [pc, #168]	@ (8008518 <__sflush_r+0x104>)
 8008470:	40ca      	lsrs	r2, r1
 8008472:	07d6      	lsls	r6, r2, #31
 8008474:	d527      	bpl.n	80084c6 <__sflush_r+0xb2>
 8008476:	2200      	movs	r2, #0
 8008478:	6062      	str	r2, [r4, #4]
 800847a:	04d9      	lsls	r1, r3, #19
 800847c:	6922      	ldr	r2, [r4, #16]
 800847e:	6022      	str	r2, [r4, #0]
 8008480:	d504      	bpl.n	800848c <__sflush_r+0x78>
 8008482:	1c42      	adds	r2, r0, #1
 8008484:	d101      	bne.n	800848a <__sflush_r+0x76>
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	b903      	cbnz	r3, 800848c <__sflush_r+0x78>
 800848a:	6560      	str	r0, [r4, #84]	@ 0x54
 800848c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800848e:	602f      	str	r7, [r5, #0]
 8008490:	b1b9      	cbz	r1, 80084c2 <__sflush_r+0xae>
 8008492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008496:	4299      	cmp	r1, r3
 8008498:	d002      	beq.n	80084a0 <__sflush_r+0x8c>
 800849a:	4628      	mov	r0, r5
 800849c:	f7ff fbec 	bl	8007c78 <_free_r>
 80084a0:	2300      	movs	r3, #0
 80084a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80084a4:	e00d      	b.n	80084c2 <__sflush_r+0xae>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b0      	blx	r6
 80084ac:	4602      	mov	r2, r0
 80084ae:	1c50      	adds	r0, r2, #1
 80084b0:	d1c9      	bne.n	8008446 <__sflush_r+0x32>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0c6      	beq.n	8008446 <__sflush_r+0x32>
 80084b8:	2b1d      	cmp	r3, #29
 80084ba:	d001      	beq.n	80084c0 <__sflush_r+0xac>
 80084bc:	2b16      	cmp	r3, #22
 80084be:	d11e      	bne.n	80084fe <__sflush_r+0xea>
 80084c0:	602f      	str	r7, [r5, #0]
 80084c2:	2000      	movs	r0, #0
 80084c4:	e022      	b.n	800850c <__sflush_r+0xf8>
 80084c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ca:	b21b      	sxth	r3, r3
 80084cc:	e01b      	b.n	8008506 <__sflush_r+0xf2>
 80084ce:	690f      	ldr	r7, [r1, #16]
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	d0f6      	beq.n	80084c2 <__sflush_r+0xae>
 80084d4:	0793      	lsls	r3, r2, #30
 80084d6:	680e      	ldr	r6, [r1, #0]
 80084d8:	bf08      	it	eq
 80084da:	694b      	ldreq	r3, [r1, #20]
 80084dc:	600f      	str	r7, [r1, #0]
 80084de:	bf18      	it	ne
 80084e0:	2300      	movne	r3, #0
 80084e2:	eba6 0807 	sub.w	r8, r6, r7
 80084e6:	608b      	str	r3, [r1, #8]
 80084e8:	f1b8 0f00 	cmp.w	r8, #0
 80084ec:	dde9      	ble.n	80084c2 <__sflush_r+0xae>
 80084ee:	6a21      	ldr	r1, [r4, #32]
 80084f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084f2:	4643      	mov	r3, r8
 80084f4:	463a      	mov	r2, r7
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b0      	blx	r6
 80084fa:	2800      	cmp	r0, #0
 80084fc:	dc08      	bgt.n	8008510 <__sflush_r+0xfc>
 80084fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008510:	4407      	add	r7, r0
 8008512:	eba8 0800 	sub.w	r8, r8, r0
 8008516:	e7e7      	b.n	80084e8 <__sflush_r+0xd4>
 8008518:	20400001 	.word	0x20400001

0800851c <_fflush_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	690b      	ldr	r3, [r1, #16]
 8008520:	4605      	mov	r5, r0
 8008522:	460c      	mov	r4, r1
 8008524:	b913      	cbnz	r3, 800852c <_fflush_r+0x10>
 8008526:	2500      	movs	r5, #0
 8008528:	4628      	mov	r0, r5
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	b118      	cbz	r0, 8008536 <_fflush_r+0x1a>
 800852e:	6a03      	ldr	r3, [r0, #32]
 8008530:	b90b      	cbnz	r3, 8008536 <_fflush_r+0x1a>
 8008532:	f7ff f9dd 	bl	80078f0 <__sinit>
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0f3      	beq.n	8008526 <_fflush_r+0xa>
 800853e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008540:	07d0      	lsls	r0, r2, #31
 8008542:	d404      	bmi.n	800854e <_fflush_r+0x32>
 8008544:	0599      	lsls	r1, r3, #22
 8008546:	d402      	bmi.n	800854e <_fflush_r+0x32>
 8008548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800854a:	f7ff fb92 	bl	8007c72 <__retarget_lock_acquire_recursive>
 800854e:	4628      	mov	r0, r5
 8008550:	4621      	mov	r1, r4
 8008552:	f7ff ff5f 	bl	8008414 <__sflush_r>
 8008556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	4605      	mov	r5, r0
 800855c:	d4e4      	bmi.n	8008528 <_fflush_r+0xc>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	d4e1      	bmi.n	8008528 <_fflush_r+0xc>
 8008564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008566:	f7ff fb85 	bl	8007c74 <__retarget_lock_release_recursive>
 800856a:	e7dd      	b.n	8008528 <_fflush_r+0xc>

0800856c <__swhatbuf_r>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	460c      	mov	r4, r1
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	2900      	cmp	r1, #0
 8008576:	b096      	sub	sp, #88	@ 0x58
 8008578:	4615      	mov	r5, r2
 800857a:	461e      	mov	r6, r3
 800857c:	da0d      	bge.n	800859a <__swhatbuf_r+0x2e>
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	bf14      	ite	ne
 800858a:	2340      	movne	r3, #64	@ 0x40
 800858c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008590:	2000      	movs	r0, #0
 8008592:	6031      	str	r1, [r6, #0]
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	b016      	add	sp, #88	@ 0x58
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	466a      	mov	r2, sp
 800859c:	f000 f8dc 	bl	8008758 <_fstat_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dbec      	blt.n	800857e <__swhatbuf_r+0x12>
 80085a4:	9901      	ldr	r1, [sp, #4]
 80085a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085ae:	4259      	negs	r1, r3
 80085b0:	4159      	adcs	r1, r3
 80085b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085b6:	e7eb      	b.n	8008590 <__swhatbuf_r+0x24>

080085b8 <__smakebuf_r>:
 80085b8:	898b      	ldrh	r3, [r1, #12]
 80085ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085bc:	079d      	lsls	r5, r3, #30
 80085be:	4606      	mov	r6, r0
 80085c0:	460c      	mov	r4, r1
 80085c2:	d507      	bpl.n	80085d4 <__smakebuf_r+0x1c>
 80085c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	2301      	movs	r3, #1
 80085ce:	6163      	str	r3, [r4, #20]
 80085d0:	b003      	add	sp, #12
 80085d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d4:	ab01      	add	r3, sp, #4
 80085d6:	466a      	mov	r2, sp
 80085d8:	f7ff ffc8 	bl	800856c <__swhatbuf_r>
 80085dc:	9f00      	ldr	r7, [sp, #0]
 80085de:	4605      	mov	r5, r0
 80085e0:	4639      	mov	r1, r7
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff fbbc 	bl	8007d60 <_malloc_r>
 80085e8:	b948      	cbnz	r0, 80085fe <__smakebuf_r+0x46>
 80085ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ee:	059a      	lsls	r2, r3, #22
 80085f0:	d4ee      	bmi.n	80085d0 <__smakebuf_r+0x18>
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	f043 0302 	orr.w	r3, r3, #2
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	e7e2      	b.n	80085c4 <__smakebuf_r+0xc>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	6020      	str	r0, [r4, #0]
 8008602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800860e:	b15b      	cbz	r3, 8008628 <__smakebuf_r+0x70>
 8008610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008614:	4630      	mov	r0, r6
 8008616:	f000 f8b1 	bl	800877c <_isatty_r>
 800861a:	b128      	cbz	r0, 8008628 <__smakebuf_r+0x70>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	431d      	orrs	r5, r3
 800862c:	81a5      	strh	r5, [r4, #12]
 800862e:	e7cf      	b.n	80085d0 <__smakebuf_r+0x18>

08008630 <__swbuf_r>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	460e      	mov	r6, r1
 8008634:	4614      	mov	r4, r2
 8008636:	4605      	mov	r5, r0
 8008638:	b118      	cbz	r0, 8008642 <__swbuf_r+0x12>
 800863a:	6a03      	ldr	r3, [r0, #32]
 800863c:	b90b      	cbnz	r3, 8008642 <__swbuf_r+0x12>
 800863e:	f7ff f957 	bl	80078f0 <__sinit>
 8008642:	69a3      	ldr	r3, [r4, #24]
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	071a      	lsls	r2, r3, #28
 800864a:	d501      	bpl.n	8008650 <__swbuf_r+0x20>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	b943      	cbnz	r3, 8008662 <__swbuf_r+0x32>
 8008650:	4621      	mov	r1, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f82a 	bl	80086ac <__swsetup_r>
 8008658:	b118      	cbz	r0, 8008662 <__swbuf_r+0x32>
 800865a:	f04f 37ff 	mov.w	r7, #4294967295
 800865e:	4638      	mov	r0, r7
 8008660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	1a98      	subs	r0, r3, r2
 8008668:	6963      	ldr	r3, [r4, #20]
 800866a:	b2f6      	uxtb	r6, r6
 800866c:	4283      	cmp	r3, r0
 800866e:	4637      	mov	r7, r6
 8008670:	dc05      	bgt.n	800867e <__swbuf_r+0x4e>
 8008672:	4621      	mov	r1, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f7ff ff51 	bl	800851c <_fflush_r>
 800867a:	2800      	cmp	r0, #0
 800867c:	d1ed      	bne.n	800865a <__swbuf_r+0x2a>
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	3b01      	subs	r3, #1
 8008682:	60a3      	str	r3, [r4, #8]
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	701e      	strb	r6, [r3, #0]
 800868c:	6962      	ldr	r2, [r4, #20]
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	429a      	cmp	r2, r3
 8008692:	d004      	beq.n	800869e <__swbuf_r+0x6e>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	07db      	lsls	r3, r3, #31
 8008698:	d5e1      	bpl.n	800865e <__swbuf_r+0x2e>
 800869a:	2e0a      	cmp	r6, #10
 800869c:	d1df      	bne.n	800865e <__swbuf_r+0x2e>
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f7ff ff3b 	bl	800851c <_fflush_r>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d0d9      	beq.n	800865e <__swbuf_r+0x2e>
 80086aa:	e7d6      	b.n	800865a <__swbuf_r+0x2a>

080086ac <__swsetup_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4b29      	ldr	r3, [pc, #164]	@ (8008754 <__swsetup_r+0xa8>)
 80086b0:	4605      	mov	r5, r0
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	460c      	mov	r4, r1
 80086b6:	b118      	cbz	r0, 80086c0 <__swsetup_r+0x14>
 80086b8:	6a03      	ldr	r3, [r0, #32]
 80086ba:	b90b      	cbnz	r3, 80086c0 <__swsetup_r+0x14>
 80086bc:	f7ff f918 	bl	80078f0 <__sinit>
 80086c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c4:	0719      	lsls	r1, r3, #28
 80086c6:	d422      	bmi.n	800870e <__swsetup_r+0x62>
 80086c8:	06da      	lsls	r2, r3, #27
 80086ca:	d407      	bmi.n	80086dc <__swsetup_r+0x30>
 80086cc:	2209      	movs	r2, #9
 80086ce:	602a      	str	r2, [r5, #0]
 80086d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	f04f 30ff 	mov.w	r0, #4294967295
 80086da:	e033      	b.n	8008744 <__swsetup_r+0x98>
 80086dc:	0758      	lsls	r0, r3, #29
 80086de:	d512      	bpl.n	8008706 <__swsetup_r+0x5a>
 80086e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086e2:	b141      	cbz	r1, 80086f6 <__swsetup_r+0x4a>
 80086e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086e8:	4299      	cmp	r1, r3
 80086ea:	d002      	beq.n	80086f2 <__swsetup_r+0x46>
 80086ec:	4628      	mov	r0, r5
 80086ee:	f7ff fac3 	bl	8007c78 <_free_r>
 80086f2:	2300      	movs	r3, #0
 80086f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	2300      	movs	r3, #0
 8008700:	6063      	str	r3, [r4, #4]
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f043 0308 	orr.w	r3, r3, #8
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	b94b      	cbnz	r3, 8008726 <__swsetup_r+0x7a>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800871c:	d003      	beq.n	8008726 <__swsetup_r+0x7a>
 800871e:	4621      	mov	r1, r4
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff ff49 	bl	80085b8 <__smakebuf_r>
 8008726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872a:	f013 0201 	ands.w	r2, r3, #1
 800872e:	d00a      	beq.n	8008746 <__swsetup_r+0x9a>
 8008730:	2200      	movs	r2, #0
 8008732:	60a2      	str	r2, [r4, #8]
 8008734:	6962      	ldr	r2, [r4, #20]
 8008736:	4252      	negs	r2, r2
 8008738:	61a2      	str	r2, [r4, #24]
 800873a:	6922      	ldr	r2, [r4, #16]
 800873c:	b942      	cbnz	r2, 8008750 <__swsetup_r+0xa4>
 800873e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008742:	d1c5      	bne.n	80086d0 <__swsetup_r+0x24>
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	0799      	lsls	r1, r3, #30
 8008748:	bf58      	it	pl
 800874a:	6962      	ldrpl	r2, [r4, #20]
 800874c:	60a2      	str	r2, [r4, #8]
 800874e:	e7f4      	b.n	800873a <__swsetup_r+0x8e>
 8008750:	2000      	movs	r0, #0
 8008752:	e7f7      	b.n	8008744 <__swsetup_r+0x98>
 8008754:	24000020 	.word	0x24000020

08008758 <_fstat_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	@ (8008778 <_fstat_r+0x20>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	f7f8 facc 	bl	8000d02 <_fstat>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d102      	bne.n	8008774 <_fstat_r+0x1c>
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	b103      	cbz	r3, 8008774 <_fstat_r+0x1c>
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	24000274 	.word	0x24000274

0800877c <_isatty_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	@ (8008798 <_isatty_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f8 facb 	bl	8000d22 <_isatty>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_isatty_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_isatty_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	24000274 	.word	0x24000274

0800879c <_sbrk_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d06      	ldr	r5, [pc, #24]	@ (80087b8 <_sbrk_r+0x1c>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f7f8 fad4 	bl	8000d54 <_sbrk>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_sbrk_r+0x1a>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_sbrk_r+0x1a>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	24000274 	.word	0x24000274

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr

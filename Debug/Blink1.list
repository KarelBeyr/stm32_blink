
Blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080066d0  080066d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006748  08006748  00007748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006750  08006750  00007750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006754  08006754  00007754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08006758  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  24000070  080067c8  00008070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000280  080067c8  00008280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001051e  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002010  00000000  00000000  000185bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000af8  00000000  00000000  0001a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000864  00000000  00000000  0001b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036fd5  00000000  00000000  0001b92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000eb35  00000000  00000000  00052901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ae16  00000000  00000000  00061436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bc24c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003490  00000000  00000000  001bc290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001bf720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080066b8 	.word	0x080066b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	080066b8 	.word	0x080066b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <__io_putchar+0x2c>)
 80006be:	f003 feef 	bl	80044a0 <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <__io_putchar+0x22>
    return -1;
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	e000      	b.n	80006d0 <__io_putchar+0x24>
  }
  return ch;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	24000098 	.word	0x24000098

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e0:	f000 f9a0 	bl	8000a24 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fc12 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f832 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f8e6 	bl	80008bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006f0:	f000 f898 	bl	8000824 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <main+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 f8bd 	bl	800587c <setbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dutyCycle < pwmWidth)
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <main+0x68>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <main+0x6c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d20d      	bcs.n	800072a <main+0x4e>
	  {
  	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2108      	movs	r1, #8
 8000712:	480e      	ldr	r0, [pc, #56]	@ (800074c <main+0x70>)
 8000714:	f000 fff4 	bl	8001700 <HAL_GPIO_WritePin>
	    HAL_Delay(pwmWidth - dutyCycle);
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <main+0x6c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <main+0x68>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc83 	bl	8001030 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2108      	movs	r1, #8
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <main+0x70>)
 8000730:	f000 ffe6 	bl	8001700 <HAL_GPIO_WritePin>
	  HAL_Delay(dutyCycle);
 8000734:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <main+0x68>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fc79 	bl	8001030 <HAL_Delay>
	  if (dutyCycle < pwmWidth)
 800073e:	e7e0      	b.n	8000702 <main+0x26>
 8000740:	24000020 	.word	0x24000020
 8000744:	24000094 	.word	0x24000094
 8000748:	24000000 	.word	0x24000000
 800074c:	58020c00 	.word	0x58020c00

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	@ 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075a:	224c      	movs	r2, #76	@ 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f005 f98b 	bl	8005a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f005 f985 	bl	8005a7a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f000 fff9 	bl	8001768 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <SystemClock_Config+0xcc>)
 800077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077e:	4a27      	ldr	r2, [pc, #156]	@ (800081c <SystemClock_Config+0xcc>)
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000786:	4b25      	ldr	r3, [pc, #148]	@ (800081c <SystemClock_Config+0xcc>)
 8000788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <SystemClock_Config+0xd0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000798:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <SystemClock_Config+0xd0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <SystemClock_Config+0xd0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ac:	bf00      	nop
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <SystemClock_Config+0xd0>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ba:	d1f8      	bne.n	80007ae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 f803 	bl	80017dc <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007dc:	f000 f94e 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	233f      	movs	r3, #63	@ 0x3f
 80007e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f4:	2340      	movs	r3, #64	@ 0x40
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fc43 	bl	8002090 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000810:	f000 f934 	bl	8000a7c <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3770      	adds	r7, #112	@ 0x70
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58000400 	.word	0x58000400
 8000820:	58024800 	.word	0x58024800

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_USART3_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800086e:	f003 fdc7 	bl	8004400 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f900 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000880:	f004 fe5d 	bl	800553e <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f8f7 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000892:	f004 fe92 	bl	80055ba <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f8ee 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 80008a2:	f004 fe13 	bl	80054cc <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f8e6 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000098 	.word	0x24000098
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_GPIO_Init+0xcc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000988 <MX_GPIO_Init+0xcc>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e2:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <MX_GPIO_Init+0xcc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_GPIO_Init+0xcc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	4a24      	ldr	r2, [pc, #144]	@ (8000988 <MX_GPIO_Init+0xcc>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000900:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_GPIO_Init+0xcc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_GPIO_Init+0xcc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <MX_GPIO_Init+0xcc>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_GPIO_Init+0xcc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2108      	movs	r1, #8
 8000930:	4816      	ldr	r0, [pc, #88]	@ (800098c <MX_GPIO_Init+0xd0>)
 8000932:	f000 fee5 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000936:	2308      	movs	r3, #8
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	480f      	ldr	r0, [pc, #60]	@ (800098c <MX_GPIO_Init+0xd0>)
 800094e:	f000 fd27 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000952:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000958:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <MX_GPIO_Init+0xd4>)
 800096a:	f000 fd19 	bl	80013a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2028      	movs	r0, #40	@ 0x28
 8000974:	f000 fc67 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000978:	2028      	movs	r0, #40	@ 0x28
 800097a:	f000 fc7e 	bl	800127a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	58024400 	.word	0x58024400
 800098c:	58020c00 	.word	0x58020c00
 8000990:	58020800 	.word	0x58020800

08000994 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009a4:	d130      	bne.n	8000a08 <HAL_GPIO_EXTI_Callback+0x74>
  {
	//debounce logic
	uint32_t now = HAL_GetTick();
 80009a6:	f000 fb37 	bl	8001018 <HAL_GetTick>
 80009aa:	60f8      	str	r0, [r7, #12]
	if (now - last_debounce_time < 50)
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x7c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	2b31      	cmp	r3, #49	@ 0x31
 80009b6:	d926      	bls.n	8000a06 <HAL_GPIO_EXTI_Callback+0x72>
	{
	 return;
	}
	last_debounce_time = now;
 80009b8:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x7c>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6013      	str	r3, [r2, #0]

	//logic to reset UI so that we start counting from zero if more than 2000ms user didn't press a button
	if (now - last_prg_time > 2000)
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x80>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80009ca:	d902      	bls.n	80009d2 <HAL_GPIO_EXTI_Callback+0x3e>
	{
	  dutyCycle = 0;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x84>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
	}
	dutyCycle++;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x84>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x84>)
 80009dc:	701a      	strb	r2, [r3, #0]
	if (dutyCycle > pwmWidth)
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x84>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x88>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d903      	bls.n	80009f2 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		dutyCycle = pwmWidth;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x88>)
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x84>)
 80009f0:	701a      	strb	r2, [r3, #0]
	}
	last_prg_time = now;
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x80>)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6013      	str	r3, [r2, #0]

    // Send duty cycle over UART
    //char msg[32];
    //int len = snprintf(msg, sizeof(msg), "Duty: %d\r\n", dutyCycle);
    //HAL_UART_Transmit(&huart3, (uint8_t*)msg, len, HAL_MAX_DELAY);
    printf("Duty %d\r\n", dutyCycle);
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x84>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a00:	f004 ff2a 	bl	8005858 <iprintf>
 8000a04:	e000      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x74>
	 return;
 8000a06:	bf00      	nop


    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
  }
}
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2400008c 	.word	0x2400008c
 8000a14:	24000090 	.word	0x24000090
 8000a18:	24000094 	.word	0x24000094
 8000a1c:	24000000 	.word	0x24000000
 8000a20:	080066d0 	.word	0x080066d0

08000a24 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a36:	f000 fc3b 	bl	80012b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a46:	231f      	movs	r3, #31
 8000a48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a4a:	2387      	movs	r3, #135	@ 0x87
 8000a4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a56:	2301      	movs	r3, #1
 8000a58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a66:	463b      	mov	r3, r7
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fc59 	bl	8001320 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f000 fc36 	bl	80012e0 <HAL_MPU_Enable>

}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a94:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	58024400 	.word	0x58024400

08000abc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0ba      	sub	sp, #232	@ 0xe8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	22c0      	movs	r2, #192	@ 0xc0
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 ffcc 	bl	8005a7a <memset>
  if(huart->Instance==USART3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <HAL_UART_MspInit+0xc8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d146      	bne.n	8000b7a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aec:	f04f 0202 	mov.w	r2, #2
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fe50 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b0e:	f7ff ffb5 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <HAL_UART_MspInit+0xcc>)
 8000b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <HAL_UART_MspInit+0xcc>)
 8000b1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <HAL_UART_MspInit+0xcc>)
 8000b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_UART_MspInit+0xcc>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <HAL_UART_MspInit+0xcc>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_UART_MspInit+0xcc>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_UART_MspInit+0xd0>)
 8000b76:	f000 fc13 	bl	80013a0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b7a:	bf00      	nop
 8000b7c:	37e8      	adds	r7, #232	@ 0xe8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004800 	.word	0x40004800
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	58020400 	.word	0x58020400

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 fa03 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bf2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bf6:	f000 fd9c 	bl	8001732 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e00a      	b.n	8000c26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c10:	f3af 8000 	nop.w
 8000c14:	4601      	mov	r1, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	60ba      	str	r2, [r7, #8]
 8000c1c:	b2ca      	uxtb	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3301      	adds	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	dbf0      	blt.n	8000c10 <_read+0x12>
  }

  return len;
 8000c2e:	687b      	ldr	r3, [r7, #4]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e009      	b.n	8000c5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd2a 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dbf1      	blt.n	8000c4a <_write+0x12>
  }
  return len;
 8000c66:	687b      	ldr	r3, [r7, #4]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_close>:

int _close(int file)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c98:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_isatty>:

int _isatty(int file)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f004 ff06 	bl	8005b18 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	24080000 	.word	0x24080000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	2400012c 	.word	0x2400012c
 8000d40:	24000280 	.word	0x24000280

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d48:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <SystemInit+0x114>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a42      	ldr	r2, [pc, #264]	@ (8000e58 <SystemInit+0x114>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d58:	4b40      	ldr	r3, [pc, #256]	@ (8000e5c <SystemInit+0x118>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d807      	bhi.n	8000d74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d64:	4b3d      	ldr	r3, [pc, #244]	@ (8000e5c <SystemInit+0x118>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 030f 	bic.w	r3, r3, #15
 8000d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000e5c <SystemInit+0x118>)
 8000d6e:	f043 0307 	orr.w	r3, r3, #7
 8000d72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d74:	4b3a      	ldr	r3, [pc, #232]	@ (8000e60 <SystemInit+0x11c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a39      	ldr	r2, [pc, #228]	@ (8000e60 <SystemInit+0x11c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d80:	4b37      	ldr	r3, [pc, #220]	@ (8000e60 <SystemInit+0x11c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d86:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <SystemInit+0x11c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4935      	ldr	r1, [pc, #212]	@ (8000e60 <SystemInit+0x11c>)
 8000d8c:	4b35      	ldr	r3, [pc, #212]	@ (8000e64 <SystemInit+0x120>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d92:	4b32      	ldr	r3, [pc, #200]	@ (8000e5c <SystemInit+0x118>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d007      	beq.n	8000dae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e5c <SystemInit+0x118>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 030f 	bic.w	r3, r3, #15
 8000da6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e5c <SystemInit+0x118>)
 8000da8:	f043 0307 	orr.w	r3, r3, #7
 8000dac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <SystemInit+0x11c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <SystemInit+0x11c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dba:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <SystemInit+0x11c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <SystemInit+0x11c>)
 8000dc2:	4a29      	ldr	r2, [pc, #164]	@ (8000e68 <SystemInit+0x124>)
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <SystemInit+0x11c>)
 8000dc8:	4a28      	ldr	r2, [pc, #160]	@ (8000e6c <SystemInit+0x128>)
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <SystemInit+0x11c>)
 8000dce:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <SystemInit+0x12c>)
 8000dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <SystemInit+0x11c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <SystemInit+0x11c>)
 8000dda:	4a25      	ldr	r2, [pc, #148]	@ (8000e70 <SystemInit+0x12c>)
 8000ddc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dde:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <SystemInit+0x11c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <SystemInit+0x11c>)
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <SystemInit+0x12c>)
 8000de8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <SystemInit+0x11c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <SystemInit+0x11c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e60 <SystemInit+0x11c>)
 8000df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <SystemInit+0x11c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <SystemInit+0x130>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <SystemInit+0x134>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e0e:	d202      	bcs.n	8000e16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <SystemInit+0x138>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <SystemInit+0x11c>)
 8000e18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d113      	bne.n	8000e4c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <SystemInit+0x11c>)
 8000e26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <SystemInit+0x11c>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <SystemInit+0x13c>)
 8000e36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <SystemInit+0x11c>)
 8000e3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e42:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <SystemInit+0x11c>)
 8000e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	52002000 	.word	0x52002000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e68:	02020200 	.word	0x02020200
 8000e6c:	01ff0000 	.word	0x01ff0000
 8000e70:	01010280 	.word	0x01010280
 8000e74:	5c001000 	.word	0x5c001000
 8000e78:	ffff0000 	.word	0xffff0000
 8000e7c:	51008108 	.word	0x51008108
 8000e80:	52004000 	.word	0x52004000

08000e84 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e88:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <ExitRun0Mode+0x2c>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a08      	ldr	r2, [pc, #32]	@ (8000eb0 <ExitRun0Mode+0x2c>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e94:	bf00      	nop
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <ExitRun0Mode+0x2c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f9      	beq.n	8000e96 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	58024800 	.word	0x58024800

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ef0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000eb8:	f7ff ffe4 	bl	8000e84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ebc:	f7ff ff42 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f004 fe1d 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fbf7 	bl	80006dc <main>
  bx  lr
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ef4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ef8:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8000efc:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 8000f00:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8000f04:	24000280 	.word	0x24000280

08000f08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC3_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f98c 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f18:	f001 fa70 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_Init+0x68>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	4913      	ldr	r1, [pc, #76]	@ (8000f78 <HAL_Init+0x6c>)
 8000f2a:	5ccb      	ldrb	r3, [r1, r3]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
 8000f34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_Init+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <HAL_Init+0x6c>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_Init+0x70>)
 8000f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_Init+0x74>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	200f      	movs	r0, #15
 8000f58:	f000 f814 	bl	8000f84 <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e002      	b.n	8000f6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f66:	f7ff fd8f 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58024400 	.word	0x58024400
 8000f78:	080066dc 	.word	0x080066dc
 8000f7c:	24000008 	.word	0x24000008
 8000f80:	24000004 	.word	0x24000004

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_InitTick+0x60>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e021      	b.n	8000fdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_InitTick+0x64>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_InitTick+0x60>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f971 	bl	8001296 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f93b 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_InitTick+0x68>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	24000010 	.word	0x24000010
 8000fe8:	24000004 	.word	0x24000004
 8000fec:	2400000c 	.word	0x2400000c

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	24000010 	.word	0x24000010
 8001014:	24000130 	.word	0x24000130

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	24000130 	.word	0x24000130

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	24000010 	.word	0x24000010

08001078 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetREVID+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0c1b      	lsrs	r3, r3, #16
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	5c001000 	.word	0x5c001000

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x40>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x40>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	05fa0000 	.word	0x05fa0000

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	@ (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	@ (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	@ (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff40 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff90 	bl	8001184 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5f 	bl	8001130 <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff33 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa4 	bl	80011ec <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012b4:	f3bf 8f5f 	dmb	sy
}
 80012b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <HAL_MPU_Disable+0x28>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_MPU_Disable+0x28>)
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_MPU_Disable+0x2c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	e000ed90 	.word	0xe000ed90

080012e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_MPU_Enable+0x38>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_MPU_Enable+0x3c>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_MPU_Enable+0x3c>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012fe:	f3bf 8f4f 	dsb	sy
}
 8001302:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001304:	f3bf 8f6f 	isb	sy
}
 8001308:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed90 	.word	0xe000ed90
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	785a      	ldrb	r2, [r3, #1]
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <HAL_MPU_ConfigRegion+0x7c>)
 800132e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <HAL_MPU_ConfigRegion+0x7c>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	4a19      	ldr	r2, [pc, #100]	@ (800139c <HAL_MPU_ConfigRegion+0x7c>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_MPU_ConfigRegion+0x7c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7b1b      	ldrb	r3, [r3, #12]
 8001348:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7adb      	ldrb	r3, [r3, #11]
 800134e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7a9b      	ldrb	r3, [r3, #10]
 8001356:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7b5b      	ldrb	r3, [r3, #13]
 800135e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001360:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7b9b      	ldrb	r3, [r3, #14]
 8001366:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7bdb      	ldrb	r3, [r3, #15]
 800136e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7a5b      	ldrb	r3, [r3, #9]
 8001376:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7a1b      	ldrb	r3, [r3, #8]
 800137e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001380:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800138a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800138c:	6113      	str	r3, [r2, #16]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed90 	.word	0xe000ed90

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013ae:	4b89      	ldr	r3, [pc, #548]	@ (80015d4 <HAL_GPIO_Init+0x234>)
 80013b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013b2:	e194      	b.n	80016de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2101      	movs	r1, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8186 	beq.w	80016d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d005      	beq.n	80013e4 <HAL_GPIO_Init+0x44>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d130      	bne.n	8001446 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141a:	2201      	movs	r2, #1
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 0201 	and.w	r2, r3, #1
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b03      	cmp	r3, #3
 8001450:	d017      	beq.n	8001482 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d123      	bne.n	80014d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	69b9      	ldr	r1, [r7, #24]
 80014d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0203 	and.w	r2, r3, #3
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80e0 	beq.w	80016d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <HAL_GPIO_Init+0x238>)
 800151a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800151e:	4a2e      	ldr	r2, [pc, #184]	@ (80015d8 <HAL_GPIO_Init+0x238>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <HAL_GPIO_Init+0x238>)
 800152a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a29      	ldr	r2, [pc, #164]	@ (80015dc <HAL_GPIO_Init+0x23c>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a20      	ldr	r2, [pc, #128]	@ (80015e0 <HAL_GPIO_Init+0x240>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d052      	beq.n	8001608 <HAL_GPIO_Init+0x268>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_GPIO_Init+0x244>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d031      	beq.n	80015ce <HAL_GPIO_Init+0x22e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_GPIO_Init+0x248>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d02b      	beq.n	80015ca <HAL_GPIO_Init+0x22a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <HAL_GPIO_Init+0x24c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d025      	beq.n	80015c6 <HAL_GPIO_Init+0x226>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <HAL_GPIO_Init+0x250>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01f      	beq.n	80015c2 <HAL_GPIO_Init+0x222>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <HAL_GPIO_Init+0x254>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0x21e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1a      	ldr	r2, [pc, #104]	@ (80015f8 <HAL_GPIO_Init+0x258>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_GPIO_Init+0x25c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a18      	ldr	r2, [pc, #96]	@ (8001600 <HAL_GPIO_Init+0x260>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a17      	ldr	r2, [pc, #92]	@ (8001604 <HAL_GPIO_Init+0x264>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x20e>
 80015aa:	2309      	movs	r3, #9
 80015ac:	e02d      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015ae:	230a      	movs	r3, #10
 80015b0:	e02b      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015b2:	2308      	movs	r3, #8
 80015b4:	e029      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e027      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e025      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015be:	2305      	movs	r3, #5
 80015c0:	e023      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e021      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e01f      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e01d      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e01b      	b.n	800160a <HAL_GPIO_Init+0x26a>
 80015d2:	bf00      	nop
 80015d4:	58000080 	.word	0x58000080
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58000400 	.word	0x58000400
 80015e0:	58020000 	.word	0x58020000
 80015e4:	58020400 	.word	0x58020400
 80015e8:	58020800 	.word	0x58020800
 80015ec:	58020c00 	.word	0x58020c00
 80015f0:	58021000 	.word	0x58021000
 80015f4:	58021400 	.word	0x58021400
 80015f8:	58021800 	.word	0x58021800
 80015fc:	58021c00 	.word	0x58021c00
 8001600:	58022000 	.word	0x58022000
 8001604:	58022400 	.word	0x58022400
 8001608:	2300      	movs	r3, #0
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800161a:	4938      	ldr	r1, [pc, #224]	@ (80016fc <HAL_GPIO_Init+0x35c>)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3301      	adds	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f47f ae63 	bne.w	80013b4 <HAL_GPIO_Init+0x14>
  }
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3724      	adds	r7, #36	@ 0x24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58000400 	.word	0x58000400

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001740:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800174c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f91b 	bl	8000994 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_PWREx_ConfigSupply+0x70>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b04      	cmp	r3, #4
 800177a:	d00a      	beq.n	8001792 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_PWREx_ConfigSupply+0x70>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e01f      	b.n	80017ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e01d      	b.n	80017ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_PWREx_ConfigSupply+0x70>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	490f      	ldr	r1, [pc, #60]	@ (80017d8 <HAL_PWREx_ConfigSupply+0x70>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017a2:	f7ff fc39 	bl	8001018 <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017a8:	e009      	b.n	80017be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017aa:	f7ff fc35 	bl	8001018 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b8:	d901      	bls.n	80017be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e007      	b.n	80017ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_PWREx_ConfigSupply+0x70>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017ca:	d1ee      	bne.n	80017aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	58024800 	.word	0x58024800

080017dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	@ 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f000 bc48 	b.w	8002080 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8088 	beq.w	800190e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fe:	4b99      	ldr	r3, [pc, #612]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001808:	4b96      	ldr	r3, [pc, #600]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	2b10      	cmp	r3, #16
 8001812:	d007      	beq.n	8001824 <HAL_RCC_OscConfig+0x48>
 8001814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001816:	2b18      	cmp	r3, #24
 8001818:	d111      	bne.n	800183e <HAL_RCC_OscConfig+0x62>
 800181a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b8f      	ldr	r3, [pc, #572]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d06d      	beq.n	800190c <HAL_RCC_OscConfig+0x130>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d169      	bne.n	800190c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	f000 bc21 	b.w	8002080 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x7a>
 8001848:	4b86      	ldr	r3, [pc, #536]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a85      	ldr	r2, [pc, #532]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e02e      	b.n	80018b4 <HAL_RCC_OscConfig+0xd8>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x9c>
 800185e:	4b81      	ldr	r3, [pc, #516]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a80      	ldr	r2, [pc, #512]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001870:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e01d      	b.n	80018b4 <HAL_RCC_OscConfig+0xd8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0xc0>
 8001882:	4b78      	ldr	r3, [pc, #480]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b75      	ldr	r3, [pc, #468]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a74      	ldr	r2, [pc, #464]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0xd8>
 800189c:	4b71      	ldr	r3, [pc, #452]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a70      	ldr	r2, [pc, #448]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fbac 	bl	8001018 <HAL_GetTick>
 80018c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fba8 	bl	8001018 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	@ 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e3d4      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d6:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0xe8>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb98 	bl	8001018 <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fb94 	bl	8001018 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	@ 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e3c0      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018fe:	4b59      	ldr	r3, [pc, #356]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x110>
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80ca 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191c:	4b51      	ldr	r3, [pc, #324]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001924:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001926:	4b4f      	ldr	r3, [pc, #316]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_RCC_OscConfig+0x166>
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	2b18      	cmp	r3, #24
 8001936:	d156      	bne.n	80019e6 <HAL_RCC_OscConfig+0x20a>
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d151      	bne.n	80019e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001942:	4b48      	ldr	r3, [pc, #288]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_RCC_OscConfig+0x17e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e392      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800195a:	4b42      	ldr	r3, [pc, #264]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0219 	bic.w	r2, r3, #25
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	493f      	ldr	r1, [pc, #252]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fb54 	bl	8001018 <HAL_GetTick>
 8001970:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fb50 	bl	8001018 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e37c      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001986:	4b37      	ldr	r3, [pc, #220]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	f7ff fb71 	bl	8001078 <HAL_GetREVID>
 8001996:	4603      	mov	r3, r0
 8001998:	f241 0203 	movw	r2, #4099	@ 0x1003
 800199c:	4293      	cmp	r3, r2
 800199e:	d817      	bhi.n	80019d0 <HAL_RCC_OscConfig+0x1f4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b40      	cmp	r3, #64	@ 0x40
 80019a6:	d108      	bne.n	80019ba <HAL_RCC_OscConfig+0x1de>
 80019a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	e07a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	031b      	lsls	r3, r3, #12
 80019c8:	4926      	ldr	r1, [pc, #152]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ce:	e06f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	4921      	ldr	r1, [pc, #132]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	e064      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d047      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0219 	bic.w	r2, r3, #25
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	491a      	ldr	r1, [pc, #104]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb0a 	bl	8001018 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb06 	bl	8001018 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e332      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	f7ff fb27 	bl	8001078 <HAL_GetREVID>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d819      	bhi.n	8001a68 <HAL_RCC_OscConfig+0x28c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b40      	cmp	r3, #64	@ 0x40
 8001a3a:	d108      	bne.n	8001a4e <HAL_RCC_OscConfig+0x272>
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a44:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4a:	6053      	str	r3, [r2, #4]
 8001a4c:	e030      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	4901      	ldr	r1, [pc, #4]	@ (8001a64 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
 8001a62:	e025      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
 8001a64:	58024400 	.word	0x58024400
 8001a68:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	4997      	ldr	r1, [pc, #604]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e018      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b95      	ldr	r3, [pc, #596]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a94      	ldr	r2, [pc, #592]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fac5 	bl	8001018 <HAL_GetTick>
 8001a8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fac1 	bl	8001018 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e2ed      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aa4:	4b8b      	ldr	r3, [pc, #556]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a9 	beq.w	8001c10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001abe:	4b85      	ldr	r3, [pc, #532]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ac6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ac8:	4b82      	ldr	r3, [pc, #520]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x308>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b18      	cmp	r3, #24
 8001ad8:	d13a      	bne.n	8001b50 <HAL_RCC_OscConfig+0x374>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d135      	bne.n	8001b50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x320>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b80      	cmp	r3, #128	@ 0x80
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e2c1      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001afc:	f7ff fabc 	bl	8001078 <HAL_GetREVID>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d817      	bhi.n	8001b3a <HAL_RCC_OscConfig+0x35e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_OscConfig+0x348>
 8001b12:	4b70      	ldr	r3, [pc, #448]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b22:	e075      	b.n	8001c10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b24:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	069b      	lsls	r3, r3, #26
 8001b32:	4968      	ldr	r1, [pc, #416]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b38:	e06a      	b.n	8001c10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b3a:	4b66      	ldr	r3, [pc, #408]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	061b      	lsls	r3, r3, #24
 8001b48:	4962      	ldr	r1, [pc, #392]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b4e:	e05f      	b.n	8001c10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d042      	beq.n	8001bde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b58:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fa58 	bl	8001018 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fa54 	bl	8001018 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e280      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b7e:	4b55      	ldr	r3, [pc, #340]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b8a:	f7ff fa75 	bl	8001078 <HAL_GetREVID>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d817      	bhi.n	8001bc8 <HAL_RCC_OscConfig+0x3ec>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d108      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3d6>
 8001ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bae:	6053      	str	r3, [r2, #4]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0x434>
 8001bb2:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	069b      	lsls	r3, r3, #26
 8001bc0:	4944      	ldr	r1, [pc, #272]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
 8001bc6:	e023      	b.n	8001c10 <HAL_RCC_OscConfig+0x434>
 8001bc8:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	493f      	ldr	r1, [pc, #252]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e018      	b.n	8001c10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bde:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff fa15 	bl	8001018 <HAL_GetTick>
 8001bee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bf2:	f7ff fa11 	bl	8001018 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e23d      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c04:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d036      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d019      	beq.n	8001c58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c24:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c28:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f9f2 	bl	8001018 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff f9ee 	bl	8001018 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e21a      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x45c>
 8001c56:	e018      	b.n	8001c8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff f9d8 	bl	8001018 <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f9d4 	bl	8001018 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e200      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d039      	beq.n	8001d0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f9b5 	bl	8001018 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb2:	f7ff f9b1 	bl	8001018 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1dd      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4d6>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
 8001cd2:	bf00      	nop
 8001cd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd8:	4b9b      	ldr	r3, [pc, #620]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a9a      	ldr	r2, [pc, #616]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f998 	bl	8001018 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cec:	f7ff f994 	bl	8001018 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1c0      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cfe:	4b92      	ldr	r3, [pc, #584]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8081 	beq.w	8001e1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d18:	4b8c      	ldr	r3, [pc, #560]	@ (8001f4c <HAL_RCC_OscConfig+0x770>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a8b      	ldr	r2, [pc, #556]	@ (8001f4c <HAL_RCC_OscConfig+0x770>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d24:	f7ff f978 	bl	8001018 <HAL_GetTick>
 8001d28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7ff f974 	bl	8001018 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1a0      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d3e:	4b83      	ldr	r3, [pc, #524]	@ (8001f4c <HAL_RCC_OscConfig+0x770>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x584>
 8001d52:	4b7d      	ldr	r3, [pc, #500]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	4a7c      	ldr	r2, [pc, #496]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5e:	e02d      	b.n	8001dbc <HAL_RCC_OscConfig+0x5e0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5a6>
 8001d68:	4b77      	ldr	r3, [pc, #476]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a76      	ldr	r2, [pc, #472]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	4b74      	ldr	r3, [pc, #464]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a73      	ldr	r2, [pc, #460]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x5e0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5c8>
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d96:	4b6c      	ldr	r3, [pc, #432]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0x5e0>
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	4a67      	ldr	r2, [pc, #412]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db0:	4b65      	ldr	r3, [pc, #404]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db4:	4a64      	ldr	r2, [pc, #400]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d015      	beq.n	8001df0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f928 	bl	8001018 <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7ff f924 	bl	8001018 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e14e      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001de2:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ee      	beq.n	8001dcc <HAL_RCC_OscConfig+0x5f0>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f912 	bl	8001018 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f90e 	bl	8001018 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e138      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ee      	bne.n	8001df8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 812d 	beq.w	800207e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e24:	4b48      	ldr	r3, [pc, #288]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e2c:	2b18      	cmp	r3, #24
 8001e2e:	f000 80bd 	beq.w	8001fac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	f040 809e 	bne.w	8001f78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a41      	ldr	r2, [pc, #260]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f8e6 	bl	8001018 <HAL_GetTick>
 8001e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff f8e2 	bl	8001018 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e10e      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e62:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6e:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e72:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <HAL_RCC_OscConfig+0x774>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	430a      	orrs	r2, r1
 8001e82:	4931      	ldr	r1, [pc, #196]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e96:	3b01      	subs	r3, #1
 8001e98:	025b      	lsls	r3, r3, #9
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	061b      	lsls	r3, r3, #24
 8001eb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001eb8:	4923      	ldr	r1, [pc, #140]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eca:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ece:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <HAL_RCC_OscConfig+0x778>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ed6:	00d2      	lsls	r2, r2, #3
 8001ed8:	491b      	ldr	r1, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	f023 020c 	bic.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4917      	ldr	r1, [pc, #92]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	f023 0202 	bic.w	r2, r3, #2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efc:	4912      	ldr	r1, [pc, #72]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f26:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_RCC_OscConfig+0x76c>)
 8001f38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f86b 	bl	8001018 <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f44:	e011      	b.n	8001f6a <HAL_RCC_OscConfig+0x78e>
 8001f46:	bf00      	nop
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	58024800 	.word	0x58024800
 8001f50:	fffffc0c 	.word	0xfffffc0c
 8001f54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f85e 	bl	8001018 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e08a      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x77c>
 8001f76:	e082      	b.n	800207e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a42      	ldr	r2, [pc, #264]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8001f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f848 	bl	8001018 <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f844 	bl	8001018 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e070      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7b0>
 8001faa:	e068      	b.n	800207e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fac:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fb2:	4b35      	ldr	r3, [pc, #212]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d031      	beq.n	8002024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d12a      	bne.n	8002024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d122      	bne.n	8002024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d11a      	bne.n	8002024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d111      	bne.n	8002024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0e1b      	lsrs	r3, r3, #24
 8002016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e02b      	b.n	8002080 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002028:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002032:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	429a      	cmp	r2, r3
 800203c:	d01f      	beq.n	800207e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	4a11      	ldr	r2, [pc, #68]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800204a:	f7fe ffe5 	bl	8001018 <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002050:	bf00      	nop
 8002052:	f7fe ffe1 	bl	8001018 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	4293      	cmp	r3, r2
 800205c:	d0f9      	beq.n	8002052 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8002060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_RCC_OscConfig+0x8b0>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800206a:	00d2      	lsls	r2, r2, #3
 800206c:	4906      	ldr	r1, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 800206e:	4313      	orrs	r3, r2
 8002070:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002072:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <HAL_RCC_OscConfig+0x8ac>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3730      	adds	r7, #48	@ 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	58024400 	.word	0x58024400
 800208c:	ffff0007 	.word	0xffff0007

08002090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e19c      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b8a      	ldr	r3, [pc, #552]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d910      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b87      	ldr	r3, [pc, #540]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 020f 	bic.w	r2, r3, #15
 80020ba:	4985      	ldr	r1, [pc, #532]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b83      	ldr	r3, [pc, #524]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e184      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	4b7b      	ldr	r3, [pc, #492]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d908      	bls.n	8002102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020f0:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4975      	ldr	r1, [pc, #468]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	4b70      	ldr	r3, [pc, #448]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800211a:	429a      	cmp	r2, r3
 800211c:	d908      	bls.n	8002130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800211e:	4b6d      	ldr	r3, [pc, #436]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	496a      	ldr	r1, [pc, #424]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	4b64      	ldr	r3, [pc, #400]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002148:	429a      	cmp	r2, r3
 800214a:	d908      	bls.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800214c:	4b61      	ldr	r3, [pc, #388]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	495e      	ldr	r1, [pc, #376]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800215a:	4313      	orrs	r3, r2
 800215c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002176:	429a      	cmp	r2, r3
 8002178:	d908      	bls.n	800218c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800217a:	4b56      	ldr	r3, [pc, #344]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4953      	ldr	r1, [pc, #332]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002188:	4313      	orrs	r3, r2
 800218a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d908      	bls.n	80021ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f023 020f 	bic.w	r2, r3, #15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4947      	ldr	r1, [pc, #284]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d055      	beq.n	8002272 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4940      	ldr	r1, [pc, #256]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e0:	4b3c      	ldr	r3, [pc, #240]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d121      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0f6      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021f8:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d115      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0ea      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d107      	bne.n	8002220 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0de      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002220:	4b2c      	ldr	r3, [pc, #176]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d6      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002230:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f023 0207 	bic.w	r2, r3, #7
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4925      	ldr	r1, [pc, #148]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800223e:	4313      	orrs	r3, r2
 8002240:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002242:	f7fe fee9 	bl	8001018 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002248:	e00a      	b.n	8002260 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224a:	f7fe fee5 	bl	8001018 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0be      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002260:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	429a      	cmp	r2, r3
 8002270:	d1eb      	bne.n	800224a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	429a      	cmp	r2, r3
 800228c:	d208      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f023 020f 	bic.w	r2, r3, #15
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	490e      	ldr	r1, [pc, #56]	@ (80022d4 <HAL_RCC_ClockConfig+0x244>)
 800229c:	4313      	orrs	r3, r2
 800229e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d214      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	4906      	ldr	r1, [pc, #24]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <HAL_RCC_ClockConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e086      	b.n	80023de <HAL_RCC_ClockConfig+0x34e>
 80022d0:	52002000 	.word	0x52002000
 80022d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d208      	bcs.n	8002306 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022f4:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4939      	ldr	r1, [pc, #228]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002302:	4313      	orrs	r3, r2
 8002304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	4b34      	ldr	r3, [pc, #208]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800231e:	429a      	cmp	r2, r3
 8002320:	d208      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002322:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	492e      	ldr	r1, [pc, #184]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002330:	4313      	orrs	r3, r2
 8002332:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800234c:	429a      	cmp	r2, r3
 800234e:	d208      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4922      	ldr	r1, [pc, #136]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 800235e:	4313      	orrs	r3, r2
 8002360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800237a:	429a      	cmp	r2, r3
 800237c:	d208      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4917      	ldr	r1, [pc, #92]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 800238c:	4313      	orrs	r3, r2
 800238e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002390:	f000 f834 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	4912      	ldr	r1, [pc, #72]	@ (80023ec <HAL_RCC_ClockConfig+0x35c>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_RCC_ClockConfig+0x358>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <HAL_RCC_ClockConfig+0x35c>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_RCC_ClockConfig+0x360>)
 80023c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c8:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <HAL_RCC_ClockConfig+0x364>)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_RCC_ClockConfig+0x368>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fdd6 	bl	8000f84 <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	58024400 	.word	0x58024400
 80023ec:	080066dc 	.word	0x080066dc
 80023f0:	24000008 	.word	0x24000008
 80023f4:	24000004 	.word	0x24000004
 80023f8:	2400000c 	.word	0x2400000c

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	@ 0x24
 8002400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002402:	4bb3      	ldr	r3, [pc, #716]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800240a:	2b18      	cmp	r3, #24
 800240c:	f200 8155 	bhi.w	80026ba <HAL_RCC_GetSysClockFreq+0x2be>
 8002410:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	0800247d 	.word	0x0800247d
 800241c:	080026bb 	.word	0x080026bb
 8002420:	080026bb 	.word	0x080026bb
 8002424:	080026bb 	.word	0x080026bb
 8002428:	080026bb 	.word	0x080026bb
 800242c:	080026bb 	.word	0x080026bb
 8002430:	080026bb 	.word	0x080026bb
 8002434:	080026bb 	.word	0x080026bb
 8002438:	080024a3 	.word	0x080024a3
 800243c:	080026bb 	.word	0x080026bb
 8002440:	080026bb 	.word	0x080026bb
 8002444:	080026bb 	.word	0x080026bb
 8002448:	080026bb 	.word	0x080026bb
 800244c:	080026bb 	.word	0x080026bb
 8002450:	080026bb 	.word	0x080026bb
 8002454:	080026bb 	.word	0x080026bb
 8002458:	080024a9 	.word	0x080024a9
 800245c:	080026bb 	.word	0x080026bb
 8002460:	080026bb 	.word	0x080026bb
 8002464:	080026bb 	.word	0x080026bb
 8002468:	080026bb 	.word	0x080026bb
 800246c:	080026bb 	.word	0x080026bb
 8002470:	080026bb 	.word	0x080026bb
 8002474:	080026bb 	.word	0x080026bb
 8002478:	080024af 	.word	0x080024af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800247c:	4b94      	ldr	r3, [pc, #592]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002488:	4b91      	ldr	r3, [pc, #580]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	4a90      	ldr	r2, [pc, #576]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800249a:	e111      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800249c:	4b8d      	ldr	r3, [pc, #564]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800249e:	61bb      	str	r3, [r7, #24]
      break;
 80024a0:	e10e      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024a2:	4b8d      	ldr	r3, [pc, #564]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024a4:	61bb      	str	r3, [r7, #24]
      break;
 80024a6:	e10b      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024a8:	4b8c      	ldr	r3, [pc, #560]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024aa:	61bb      	str	r3, [r7, #24]
      break;
 80024ac:	e108      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024ae:	4b88      	ldr	r3, [pc, #544]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024b8:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024c4:	4b82      	ldr	r3, [pc, #520]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80024ce:	4b80      	ldr	r3, [pc, #512]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	08db      	lsrs	r3, r3, #3
 80024d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80e1 	beq.w	80026b4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	f000 8083 	beq.w	8002600 <HAL_RCC_GetSysClockFreq+0x204>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	f200 80a1 	bhi.w	8002644 <HAL_RCC_GetSysClockFreq+0x248>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x114>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d056      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800250e:	e099      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002510:	4b6f      	ldr	r3, [pc, #444]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02d      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800251c:	4b6c      	ldr	r3, [pc, #432]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	4a6b      	ldr	r2, [pc, #428]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002546:	4b62      	ldr	r3, [pc, #392]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002556:	ed97 6a02 	vldr	s12, [r7, #8]
 800255a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800255e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800256a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002576:	e087      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002582:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258a:	4b51      	ldr	r3, [pc, #324]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259a:	ed97 6a02 	vldr	s12, [r7, #8]
 800259e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025ba:	e065      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ce:	4b40      	ldr	r3, [pc, #256]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025de:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025fe:	e043      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800260e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002612:	4b2f      	ldr	r3, [pc, #188]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002622:	ed97 6a02 	vldr	s12, [r7, #8]
 8002626:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800262a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800262e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002642:	e021      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002666:	ed97 6a02 	vldr	s12, [r7, #8]
 800266a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800266e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800267a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002686:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	0a5b      	lsrs	r3, r3, #9
 800268e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002692:	3301      	adds	r3, #1
 8002694:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80026a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ac:	ee17 3a90 	vmov	r3, s15
 80026b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026b2:	e005      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
      break;
 80026b8:	e002      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026bc:	61bb      	str	r3, [r7, #24]
      break;
 80026be:	bf00      	nop
  }

  return sysclockfreq;
 80026c0:	69bb      	ldr	r3, [r7, #24]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	58024400 	.word	0x58024400
 80026d4:	03d09000 	.word	0x03d09000
 80026d8:	003d0900 	.word	0x003d0900
 80026dc:	017d7840 	.word	0x017d7840
 80026e0:	46000000 	.word	0x46000000
 80026e4:	4c742400 	.word	0x4c742400
 80026e8:	4a742400 	.word	0x4a742400
 80026ec:	4bbebc20 	.word	0x4bbebc20

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026f6:	f7ff fe81 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x50>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490f      	ldr	r1, [pc, #60]	@ (8002744 <HAL_RCC_GetHCLKFreq+0x54>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x50>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4a09      	ldr	r2, [pc, #36]	@ (8002744 <HAL_RCC_GetHCLKFreq+0x54>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <HAL_RCC_GetHCLKFreq+0x58>)
 800272c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <HAL_RCC_GetHCLKFreq+0x58>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	58024400 	.word	0x58024400
 8002744:	080066dc 	.word	0x080066dc
 8002748:	24000008 	.word	0x24000008
 800274c:	24000004 	.word	0x24000004

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002754:	f7ff ffcc 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4904      	ldr	r1, [pc, #16]	@ (8002778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	58024400 	.word	0x58024400
 8002778:	080066dc 	.word	0x080066dc

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002780:	f7ff ffb6 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4904      	ldr	r1, [pc, #16]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	58024400 	.word	0x58024400
 80027a4:	080066dc 	.word	0x080066dc

080027a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ac:	b0ca      	sub	sp, #296	@ 0x128
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80027cc:	2500      	movs	r5, #0
 80027ce:	ea54 0305 	orrs.w	r3, r4, r5
 80027d2:	d049      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80027d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027de:	d02f      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80027e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027e4:	d828      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ea:	d01a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027f0:	d822      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027fa:	d007      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027fc:	e01c      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fe:	4bb8      	ldr	r3, [pc, #736]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	4ab7      	ldr	r2, [pc, #732]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800280a:	e01a      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800280c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002810:	3308      	adds	r3, #8
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fc8f 	bl	8004138 <RCCEx_PLL2_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002820:	e00f      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002826:	3328      	adds	r3, #40	@ 0x28
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fd36 	bl	800429c <RCCEx_PLL3_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002836:	e004      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800284a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800284c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002858:	4aa1      	ldr	r2, [pc, #644]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800285a:	430b      	orrs	r3, r1
 800285c:	6513      	str	r3, [r2, #80]	@ 0x50
 800285e:	e003      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002874:	f04f 0900 	mov.w	r9, #0
 8002878:	ea58 0309 	orrs.w	r3, r8, r9
 800287c:	d047      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	2b04      	cmp	r3, #4
 8002886:	d82a      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002888:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	080028a5 	.word	0x080028a5
 8002894:	080028b3 	.word	0x080028b3
 8002898:	080028c9 	.word	0x080028c9
 800289c:	080028e7 	.word	0x080028e7
 80028a0:	080028e7 	.word	0x080028e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	4a8d      	ldr	r2, [pc, #564]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028b0:	e01a      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b6:	3308      	adds	r3, #8
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 fc3c 	bl	8004138 <RCCEx_PLL2_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028c6:	e00f      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028cc:	3328      	adds	r3, #40	@ 0x28
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fce3 	bl	800429c <RCCEx_PLL3_Config>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028dc:	e004      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028e4:	e000      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80028e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f4:	f023 0107 	bic.w	r1, r3, #7
 80028f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	4a78      	ldr	r2, [pc, #480]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002900:	430b      	orrs	r3, r1
 8002902:	6513      	str	r3, [r2, #80]	@ 0x50
 8002904:	e003      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800290a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800290e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800291a:	f04f 0b00 	mov.w	fp, #0
 800291e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002922:	d04c      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800292e:	d030      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002934:	d829      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002936:	2bc0      	cmp	r3, #192	@ 0xc0
 8002938:	d02d      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800293a:	2bc0      	cmp	r3, #192	@ 0xc0
 800293c:	d825      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800293e:	2b80      	cmp	r3, #128	@ 0x80
 8002940:	d018      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002942:	2b80      	cmp	r3, #128	@ 0x80
 8002944:	d821      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800294a:	2b40      	cmp	r3, #64	@ 0x40
 800294c:	d007      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800294e:	e01c      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002950:	4b63      	ldr	r3, [pc, #396]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	4a62      	ldr	r2, [pc, #392]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800295c:	e01c      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800295e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002962:	3308      	adds	r3, #8
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fbe6 	bl	8004138 <RCCEx_PLL2_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002972:	e011      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002978:	3328      	adds	r3, #40	@ 0x28
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fc8d 	bl	800429c <RCCEx_PLL3_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002988:	e006      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002990:	e002      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029a0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80029a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ae:	4a4c      	ldr	r2, [pc, #304]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80029ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80029d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80029d8:	460b      	mov	r3, r1
 80029da:	4313      	orrs	r3, r2
 80029dc:	d053      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80029de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80029e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029ea:	d035      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80029ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029f0:	d82e      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80029f6:	d031      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80029fc:	d828      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a02:	d01a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a08:	d822      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a12:	d007      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a14:	e01c      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a16:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	4a31      	ldr	r2, [pc, #196]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a22:	e01c      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fb83 	bl	8004138 <RCCEx_PLL2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a38:	e011      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3e:	3328      	adds	r3, #40	@ 0x28
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fc2a 	bl	800429c <RCCEx_PLL3_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a4e:	e006      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a7c:	e003      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002a92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	d056      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002aae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab2:	d038      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab8:	d831      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002aba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002abe:	d034      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ac0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ac4:	d82b      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aca:	d01d      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002acc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ad0:	d825      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002adc:	e01f      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ade:	bf00      	nop
 8002ae0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae4:	4ba2      	ldr	r3, [pc, #648]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	4aa1      	ldr	r2, [pc, #644]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af0:	e01c      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af6:	3308      	adds	r3, #8
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 fb1c 	bl	8004138 <RCCEx_PLL2_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b06:	e011      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	3328      	adds	r3, #40	@ 0x28
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fbc3 	bl	800429c <RCCEx_PLL3_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b1c:	e006      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b24:	e002      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b34:	4b8e      	ldr	r3, [pc, #568]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b44:	4a8a      	ldr	r2, [pc, #552]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b46:	430b      	orrs	r3, r1
 8002b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4a:	e003      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002b60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002b6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4313      	orrs	r3, r2
 8002b72:	d03a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7a:	2b30      	cmp	r3, #48	@ 0x30
 8002b7c:	d01f      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002b7e:	2b30      	cmp	r3, #48	@ 0x30
 8002b80:	d819      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d815      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d019      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d111      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b92:	4b77      	ldr	r3, [pc, #476]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b96:	4a76      	ldr	r2, [pc, #472]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b9e:	e011      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fac5 	bl	8004138 <RCCEx_PLL2_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002bb4:	e006      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bcc:	4b68      	ldr	r3, [pc, #416]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be0:	e003      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4313      	orrs	r3, r2
 8002c08:	d051      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c14:	d035      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c1a:	d82e      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c20:	d031      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c26:	d828      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2c:	d01a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c32:	d822      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3c:	d007      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c40:	4b4b      	ldr	r3, [pc, #300]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	4a4a      	ldr	r2, [pc, #296]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c52:	3308      	adds	r3, #8
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fa6e 	bl	8004138 <RCCEx_PLL2_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c62:	e011      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c68:	3328      	adds	r3, #40	@ 0x28
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fb15 	bl	800429c <RCCEx_PLL3_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c78:	e006      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c80:	e002      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c90:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9e:	4a34      	ldr	r2, [pc, #208]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ca4:	e003      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002cc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	d056      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd8:	d033      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002cda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cde:	d82c      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ce0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ce4:	d02f      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002ce6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cea:	d826      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cf0:	d02b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002cf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cf6:	d820      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cfc:	d012      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d02:	d81a      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d022      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d12:	3308      	adds	r3, #8
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fa0e 	bl	8004138 <RCCEx_PLL2_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d22:	e015      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d28:	3328      	adds	r3, #40	@ 0x28
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 fab5 	bl	800429c <RCCEx_PLL3_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d38:	e00a      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d40:	e006      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d42:	bf00      	nop
 8002d44:	e004      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d46:	bf00      	nop
 8002d48:	e002      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d66:	4a02      	ldr	r2, [pc, #8]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d6c:	e006      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d6e:	bf00      	nop
 8002d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	d055      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da8:	d033      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dae:	d82c      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db4:	d02f      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dba:	d826      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002dbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002dc0:	d02b      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002dc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002dc6:	d820      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dcc:	d012      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dd2:	d81a      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d022      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ddc:	d115      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de2:	3308      	adds	r3, #8
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 f9a6 	bl	8004138 <RCCEx_PLL2_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002df2:	e015      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	3328      	adds	r3, #40	@ 0x28
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fa4d 	bl	800429c <RCCEx_PLL3_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e08:	e00a      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e10:	e006      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e12:	bf00      	nop
 8002e14:	e004      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e28:	4ba3      	ldr	r3, [pc, #652]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e38:	4a9f      	ldr	r2, [pc, #636]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3e:	e003      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e62:	460b      	mov	r3, r1
 8002e64:	4313      	orrs	r3, r2
 8002e66:	d037      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e72:	d00e      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e78:	d816      	bhi.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d018      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002e7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e84:	4b8c      	ldr	r3, [pc, #560]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	4a8b      	ldr	r2, [pc, #556]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e90:	e00f      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	3308      	adds	r3, #8
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 f94c 	bl	8004138 <RCCEx_PLL2_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eba:	4b7f      	ldr	r3, [pc, #508]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a7b      	ldr	r2, [pc, #492]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ece:	e003      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002eee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	d039      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d81c      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f02:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f45 	.word	0x08002f45
 8002f0c:	08002f19 	.word	0x08002f19
 8002f10:	08002f27 	.word	0x08002f27
 8002f14:	08002f45 	.word	0x08002f45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f18:	4b67      	ldr	r3, [pc, #412]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	4a66      	ldr	r2, [pc, #408]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f24:	e00f      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f902 	bl	8004138 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f3a:	e004      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	f023 0103 	bic.w	r1, r3, #3
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5c:	4a56      	ldr	r2, [pc, #344]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f86:	460b      	mov	r3, r1
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f000 809f 	beq.w	80030cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4a      	ldr	r2, [pc, #296]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe f83d 	bl	8001018 <HAL_GetTick>
 8002f9e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe f838 	bl	8001018 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	@ 0x64
 8002fb2:	d903      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ed      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d179      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fdc:	4053      	eors	r3, r2
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe6:	4b34      	ldr	r3, [pc, #208]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	4a30      	ldr	r2, [pc, #192]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	4a2d      	ldr	r2, [pc, #180]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003008:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800300a:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003010:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800301a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301e:	d118      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fd fffa 	bl	8001018 <HAL_GetTick>
 8003024:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003028:	e00d      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fd fff5 	bl	8001018 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003034:	1ad2      	subs	r2, r2, r3
 8003036:	f241 3388 	movw	r3, #5000	@ 0x1388
 800303a:	429a      	cmp	r2, r3
 800303c:	d903      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003044:	e005      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003046:	4b1c      	ldr	r3, [pc, #112]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0eb      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003056:	2b00      	cmp	r3, #0
 8003058:	d129      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800306a:	d10e      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800306c:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800307c:	091a      	lsrs	r2, r3, #4
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003080:	4013      	ands	r3, r2
 8003082:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003084:	430b      	orrs	r3, r1
 8003086:	6113      	str	r3, [r2, #16]
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003090:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003094:	6113      	str	r3, [r2, #16]
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003098:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a6:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ac:	e00e      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80030b8:	58024400 	.word	0x58024400
 80030bc:	58024800 	.word	0x58024800
 80030c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f002 0301 	and.w	r3, r2, #1
 80030d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f000 8089 	beq.w	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f4:	2b28      	cmp	r3, #40	@ 0x28
 80030f6:	d86b      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80030f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	080031d9 	.word	0x080031d9
 8003104:	080031d1 	.word	0x080031d1
 8003108:	080031d1 	.word	0x080031d1
 800310c:	080031d1 	.word	0x080031d1
 8003110:	080031d1 	.word	0x080031d1
 8003114:	080031d1 	.word	0x080031d1
 8003118:	080031d1 	.word	0x080031d1
 800311c:	080031d1 	.word	0x080031d1
 8003120:	080031a5 	.word	0x080031a5
 8003124:	080031d1 	.word	0x080031d1
 8003128:	080031d1 	.word	0x080031d1
 800312c:	080031d1 	.word	0x080031d1
 8003130:	080031d1 	.word	0x080031d1
 8003134:	080031d1 	.word	0x080031d1
 8003138:	080031d1 	.word	0x080031d1
 800313c:	080031d1 	.word	0x080031d1
 8003140:	080031bb 	.word	0x080031bb
 8003144:	080031d1 	.word	0x080031d1
 8003148:	080031d1 	.word	0x080031d1
 800314c:	080031d1 	.word	0x080031d1
 8003150:	080031d1 	.word	0x080031d1
 8003154:	080031d1 	.word	0x080031d1
 8003158:	080031d1 	.word	0x080031d1
 800315c:	080031d1 	.word	0x080031d1
 8003160:	080031d9 	.word	0x080031d9
 8003164:	080031d1 	.word	0x080031d1
 8003168:	080031d1 	.word	0x080031d1
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031d1 	.word	0x080031d1
 8003174:	080031d1 	.word	0x080031d1
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d9 	.word	0x080031d9
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031d1 	.word	0x080031d1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080031d9 	.word	0x080031d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a8:	3308      	adds	r3, #8
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 ffc3 	bl	8004138 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031b8:	e00f      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031be:	3328      	adds	r3, #40	@ 0x28
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f86a 	bl	800429c <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031ce:	e004      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80031d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031e2:	4bbf      	ldr	r3, [pc, #764]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80031ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f0:	4abb      	ldr	r2, [pc, #748]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80031f6:	e003      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f002 0302 	and.w	r3, r2, #2
 800320c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003216:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800321a:	460b      	mov	r3, r1
 800321c:	4313      	orrs	r3, r2
 800321e:	d041      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003226:	2b05      	cmp	r3, #5
 8003228:	d824      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	0800327d 	.word	0x0800327d
 8003234:	08003249 	.word	0x08003249
 8003238:	0800325f 	.word	0x0800325f
 800323c:	0800327d 	.word	0x0800327d
 8003240:	0800327d 	.word	0x0800327d
 8003244:	0800327d 	.word	0x0800327d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324c:	3308      	adds	r3, #8
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ff71 	bl	8004138 <RCCEx_PLL2_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800325c:	e00f      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	3328      	adds	r3, #40	@ 0x28
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f001 f818 	bl	800429c <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003286:	4b96      	ldr	r3, [pc, #600]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	f023 0107 	bic.w	r1, r3, #7
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003294:	4a92      	ldr	r2, [pc, #584]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003296:	430b      	orrs	r3, r1
 8003298:	6553      	str	r3, [r2, #84]	@ 0x54
 800329a:	e003      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f002 0304 	and.w	r3, r2, #4
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d044      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d825      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80032d0:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	08003325 	.word	0x08003325
 80032dc:	080032f1 	.word	0x080032f1
 80032e0:	08003307 	.word	0x08003307
 80032e4:	08003325 	.word	0x08003325
 80032e8:	08003325 	.word	0x08003325
 80032ec:	08003325 	.word	0x08003325
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f4:	3308      	adds	r3, #8
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 ff1d 	bl	8004138 <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003304:	e00f      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	3328      	adds	r3, #40	@ 0x28
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f000 ffc4 	bl	800429c <RCCEx_PLL3_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800331a:	e004      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800332e:	4b6c      	ldr	r3, [pc, #432]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f023 0107 	bic.w	r1, r3, #7
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333e:	4a68      	ldr	r2, [pc, #416]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003340:	430b      	orrs	r3, r1
 8003342:	6593      	str	r3, [r2, #88]	@ 0x58
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f002 0320 	and.w	r3, r2, #32
 800335a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003368:	460b      	mov	r3, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	d055      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800337a:	d033      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800337c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003380:	d82c      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d826      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800338e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003392:	d02b      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003394:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003398:	d820      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800339a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339e:	d012      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033a4:	d81a      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d022      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80033aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ae:	d115      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	3308      	adds	r3, #8
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 febd 	bl	8004138 <RCCEx_PLL2_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033c4:	e015      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	3328      	adds	r3, #40	@ 0x28
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 ff64 	bl	800429c <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033da:	e00a      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033e2:	e006      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033e4:	bf00      	nop
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033e8:	bf00      	nop
 80033ea:	e002      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033ec:	bf00      	nop
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033fa:	4b39      	ldr	r3, [pc, #228]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	4a35      	ldr	r2, [pc, #212]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800340c:	430b      	orrs	r3, r1
 800340e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003430:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d058      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003442:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003446:	d033      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003448:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800344c:	d82c      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003452:	d02f      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003458:	d826      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800345a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800345e:	d02b      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003460:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003464:	d820      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800346a:	d012      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800346c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003470:	d81a      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d022      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347a:	d115      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	3308      	adds	r3, #8
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fe57 	bl	8004138 <RCCEx_PLL2_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003490:	e015      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	3328      	adds	r3, #40	@ 0x28
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fefe 	bl	800429c <RCCEx_PLL3_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034a6:	e00a      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ae:	e006      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034b0:	bf00      	nop
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034b4:	bf00      	nop
 80034b6:	e002      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034b8:	bf00      	nop
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034d6:	4a02      	ldr	r2, [pc, #8]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034d8:	430b      	orrs	r3, r1
 80034da:	6593      	str	r3, [r2, #88]	@ 0x58
 80034dc:	e006      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80034de:	bf00      	nop
 80034e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80034f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003502:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003506:	460b      	mov	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	d055      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003514:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003518:	d033      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800351a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800351e:	d82c      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003524:	d02f      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352a:	d826      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800352c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003530:	d02b      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003532:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003536:	d820      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800353c:	d012      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800353e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003542:	d81a      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354c:	d115      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	3308      	adds	r3, #8
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fdee 	bl	8004138 <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003562:	e015      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3328      	adds	r3, #40	@ 0x28
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fe95 	bl	800429c <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003578:	e00a      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003582:	bf00      	nop
 8003584:	e004      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003598:	4ba1      	ldr	r3, [pc, #644]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035a8:	4a9d      	ldr	r2, [pc, #628]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f002 0308 	and.w	r3, r2, #8
 80035c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d01e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	3328      	adds	r3, #40	@ 0x28
 80035ec:	2102      	movs	r1, #2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fe54 	bl	800429c <RCCEx_PLL3_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003600:	4b87      	ldr	r3, [pc, #540]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003604:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003610:	4a83      	ldr	r2, [pc, #524]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003612:	430b      	orrs	r3, r1
 8003614:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f002 0310 	and.w	r3, r2, #16
 8003622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003626:	2300      	movs	r3, #0
 8003628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800362c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003630:	460b      	mov	r3, r1
 8003632:	4313      	orrs	r3, r2
 8003634:	d01e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800363e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003642:	d10c      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	3328      	adds	r3, #40	@ 0x28
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fe25 	bl	800429c <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800365e:	4b70      	ldr	r3, [pc, #448]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366e:	4a6c      	ldr	r2, [pc, #432]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800368a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d03e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800369c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036a0:	d022      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80036a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036a6:	d81b      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b0:	d00b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80036b2:	e015      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	3308      	adds	r3, #8
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd3b 	bl	8004138 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036c8:	e00f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	3328      	adds	r3, #40	@ 0x28
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fde2 	bl	800429c <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036de:	e004      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80036e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10b      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003702:	4a47      	ldr	r2, [pc, #284]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6593      	str	r3, [r2, #88]	@ 0x58
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800371e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003720:	2300      	movs	r3, #0
 8003722:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003724:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003728:	460b      	mov	r3, r1
 800372a:	4313      	orrs	r3, r2
 800372c:	d03b      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800373a:	d01f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800373c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003740:	d818      	bhi.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800374c:	d007      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800374e:	e011      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	4a32      	ldr	r2, [pc, #200]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800375c:	e00f      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	3328      	adds	r3, #40	@ 0x28
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fd98 	bl	800429c <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003772:	e004      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800377c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003786:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	4a22      	ldr	r2, [pc, #136]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003798:	430b      	orrs	r3, r1
 800379a:	6553      	str	r3, [r2, #84]	@ 0x54
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80037b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80037b4:	2300      	movs	r3, #0
 80037b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80037b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d034      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d0:	d007      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80037d2:	e011      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	4a11      	ldr	r2, [pc, #68]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037e0:	e00e      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	3308      	adds	r3, #8
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fca4 	bl	8004138 <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037f6:	e003      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10d      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003816:	4a02      	ldr	r2, [pc, #8]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003818:	430b      	orrs	r3, r1
 800381a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800381c:	e006      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800381e:	bf00      	nop
 8003820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	2300      	movs	r3, #0
 800383c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800383e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003842:	460b      	mov	r3, r1
 8003844:	4313      	orrs	r3, r2
 8003846:	d00c      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	3328      	adds	r3, #40	@ 0x28
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fd23 	bl	800429c <RCCEx_PLL3_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800386e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003870:	2300      	movs	r3, #0
 8003872:	667b      	str	r3, [r7, #100]	@ 0x64
 8003874:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003878:	460b      	mov	r3, r1
 800387a:	4313      	orrs	r3, r2
 800387c:	d038      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388a:	d018      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800388c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003890:	d811      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003896:	d014      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389c:	d80b      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a6:	d106      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a8:	4bc3      	ldr	r3, [pc, #780]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	4ac2      	ldr	r2, [pc, #776]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80038b4:	e008      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038d0:	4bb9      	ldr	r3, [pc, #740]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e0:	4ab5      	ldr	r2, [pc, #724]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80038fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038fe:	2300      	movs	r3, #0
 8003900:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003902:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800390c:	4baa      	ldr	r3, [pc, #680]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003910:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	4aa7      	ldr	r2, [pc, #668]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800392c:	653b      	str	r3, [r7, #80]	@ 0x50
 800392e:	2300      	movs	r3, #0
 8003930:	657b      	str	r3, [r7, #84]	@ 0x54
 8003932:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800393c:	4b9e      	ldr	r3, [pc, #632]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800394c:	4a9a      	ldr	r2, [pc, #616]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394e:	430b      	orrs	r3, r1
 8003950:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003960:	2300      	movs	r3, #0
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003964:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800396e:	4b92      	ldr	r3, [pc, #584]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003972:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800398e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003990:	2300      	movs	r3, #0
 8003992:	647b      	str	r3, [r7, #68]	@ 0x44
 8003994:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800399e:	4b86      	ldr	r3, [pc, #536]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	4a85      	ldr	r2, [pc, #532]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039a8:	6113      	str	r3, [r2, #16]
 80039aa:	4b83      	ldr	r3, [pc, #524]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ac:	6919      	ldr	r1, [r3, #16]
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80039b6:	4a80      	ldr	r2, [pc, #512]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80039c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ca:	2300      	movs	r3, #0
 80039cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039d8:	4b77      	ldr	r3, [pc, #476]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e6:	4a74      	ldr	r2, [pc, #464]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80039f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a08:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a18:	4a67      	ldr	r2, [pc, #412]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	2100      	movs	r1, #0
 8003a28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d011      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	3308      	adds	r3, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fb78 	bl	8004138 <RCCEx_PLL2_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	2100      	movs	r1, #0
 8003a68:	6239      	str	r1, [r7, #32]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d011      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	3308      	adds	r3, #8
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fb58 	bl	8004138 <RCCEx_PLL2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	61b9      	str	r1, [r7, #24]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fb38 	bl	8004138 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6139      	str	r1, [r7, #16]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d011      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3328      	adds	r3, #40	@ 0x28
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fbca 	bl	800429c <RCCEx_PLL3_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	2100      	movs	r1, #0
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b34:	460b      	mov	r3, r1
 8003b36:	4313      	orrs	r3, r2
 8003b38:	d011      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	3328      	adds	r3, #40	@ 0x28
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fbaa 	bl	800429c <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	2100      	movs	r1, #0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b74:	460b      	mov	r3, r1
 8003b76:	4313      	orrs	r3, r2
 8003b78:	d011      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	3328      	adds	r3, #40	@ 0x28
 8003b80:	2102      	movs	r1, #2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fb8a 	bl	800429c <RCCEx_PLL3_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003b9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb8:	58024400 	.word	0x58024400

08003bbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003bc0:	f7fe fd96 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4904      	ldr	r1, [pc, #16]	@ (8003be4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	58024400 	.word	0x58024400
 8003be4:	080066dc 	.word	0x080066dc

08003be8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bf0:	4ba1      	ldr	r3, [pc, #644]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003bfa:	4b9f      	ldr	r3, [pc, #636]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	0b1b      	lsrs	r3, r3, #12
 8003c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c06:	4b9c      	ldr	r3, [pc, #624]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c12:	4b99      	ldr	r3, [pc, #612]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	08db      	lsrs	r3, r3, #3
 8003c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8111 	beq.w	8003e58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	f000 8083 	beq.w	8003d44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	f200 80a1 	bhi.w	8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d056      	beq.n	8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c52:	e099      	b.n	8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c54:	4b88      	ldr	r3, [pc, #544]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02d      	beq.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c60:	4b85      	ldr	r3, [pc, #532]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	4a84      	ldr	r2, [pc, #528]	@ (8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cba:	e087      	b.n	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cce:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cfe:	e065      	b.n	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	4b59      	ldr	r3, [pc, #356]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d42:	e043      	b.n	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	4b48      	ldr	r3, [pc, #288]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d86:	e021      	b.n	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b37      	ldr	r3, [pc, #220]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	0a5b      	lsrs	r3, r3, #9
 8003dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df2:	ee17 2a90 	vmov	r2, s15
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e20:	ee17 2a90 	vmov	r2, s15
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e28:	4b13      	ldr	r3, [pc, #76]	@ (8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	0e1b      	lsrs	r3, r3, #24
 8003e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e4e:	ee17 2a90 	vmov	r2, s15
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
}
 8003e6a:	bf00      	nop
 8003e6c:	3724      	adds	r7, #36	@ 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	03d09000 	.word	0x03d09000
 8003e80:	46000000 	.word	0x46000000
 8003e84:	4c742400 	.word	0x4c742400
 8003e88:	4a742400 	.word	0x4a742400
 8003e8c:	4bbebc20 	.word	0x4bbebc20

08003e90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	@ 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e98:	4ba1      	ldr	r3, [pc, #644]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ea2:	4b9f      	ldr	r3, [pc, #636]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	0d1b      	lsrs	r3, r3, #20
 8003ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003eae:	4b9c      	ldr	r3, [pc, #624]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003eba:	4b99      	ldr	r3, [pc, #612]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	08db      	lsrs	r3, r3, #3
 8003ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8111 	beq.w	8004100 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	f000 8083 	beq.w	8003fec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	f200 80a1 	bhi.w	8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d056      	beq.n	8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003efa:	e099      	b.n	8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003efc:	4b88      	ldr	r3, [pc, #544]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02d      	beq.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f08:	4b85      	ldr	r3, [pc, #532]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	08db      	lsrs	r3, r3, #3
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	4a84      	ldr	r2, [pc, #528]	@ (8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	4b7b      	ldr	r3, [pc, #492]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f62:	e087      	b.n	8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800412c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f76:	4b6a      	ldr	r3, [pc, #424]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fa6:	e065      	b.n	8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fba:	4b59      	ldr	r3, [pc, #356]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fea:	e043      	b.n	8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffe:	4b48      	ldr	r3, [pc, #288]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004012:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402e:	e021      	b.n	8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004042:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	ed97 6a03 	vldr	s12, [r7, #12]
 8004056:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004072:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004074:	4b2a      	ldr	r3, [pc, #168]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	0a5b      	lsrs	r3, r3, #9
 800407a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800408a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800408e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800409a:	ee17 2a90 	vmov	r2, s15
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80040a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80040c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c8:	ee17 2a90 	vmov	r2, s15
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80040d0:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f6:	ee17 2a90 	vmov	r2, s15
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040fe:	e008      	b.n	8004112 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
}
 8004112:	bf00      	nop
 8004114:	3724      	adds	r7, #36	@ 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	58024400 	.word	0x58024400
 8004124:	03d09000 	.word	0x03d09000
 8004128:	46000000 	.word	0x46000000
 800412c:	4c742400 	.word	0x4c742400
 8004130:	4a742400 	.word	0x4a742400
 8004134:	4bbebc20 	.word	0x4bbebc20

08004138 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004146:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d101      	bne.n	8004156 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e099      	b.n	800428a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004156:	4b4f      	ldr	r3, [pc, #316]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4e      	ldr	r2, [pc, #312]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800415c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004162:	f7fc ff59 	bl	8001018 <HAL_GetTick>
 8004166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004168:	e008      	b.n	800417c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800416a:	f7fc ff55 	bl	8001018 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e086      	b.n	800428a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800417c:	4b45      	ldr	r3, [pc, #276]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004188:	4b42      	ldr	r3, [pc, #264]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	493f      	ldr	r1, [pc, #252]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	628b      	str	r3, [r1, #40]	@ 0x28
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	025b      	lsls	r3, r3, #9
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041cc:	4931      	ldr	r1, [pc, #196]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041d2:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	492d      	ldr	r1, [pc, #180]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	f023 0220 	bic.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	4928      	ldr	r1, [pc, #160]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041f6:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	f023 0310 	bic.w	r3, r3, #16
 8004200:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <RCCEx_PLL2_Config+0x160>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	69d2      	ldr	r2, [r2, #28]
 800420e:	00d2      	lsls	r2, r2, #3
 8004210:	4920      	ldr	r1, [pc, #128]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004216:	4b1f      	ldr	r3, [pc, #124]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	4a1e      	ldr	r2, [pc, #120]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800421c:	f043 0310 	orr.w	r3, r3, #16
 8004220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004228:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4a19      	ldr	r2, [pc, #100]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800422e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004234:	e00f      	b.n	8004256 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800423c:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a14      	ldr	r2, [pc, #80]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004248:	e005      	b.n	8004256 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	4a11      	ldr	r2, [pc, #68]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004250:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004254:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004256:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0e      	ldr	r2, [pc, #56]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800425c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004262:	f7fc fed9 	bl	8001018 <HAL_GetTick>
 8004266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004268:	e008      	b.n	800427c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800426a:	f7fc fed5 	bl	8001018 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e006      	b.n	800428a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <RCCEx_PLL2_Config+0x15c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	58024400 	.word	0x58024400
 8004298:	ffff0007 	.word	0xffff0007

0800429c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042aa:	4b53      	ldr	r3, [pc, #332]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d101      	bne.n	80042ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e099      	b.n	80043ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042ba:	4b4f      	ldr	r3, [pc, #316]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4e      	ldr	r2, [pc, #312]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fc fea7 	bl	8001018 <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042ce:	f7fc fea3 	bl	8001018 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e086      	b.n	80043ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042e0:	4b45      	ldr	r3, [pc, #276]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042ec:	4b42      	ldr	r3, [pc, #264]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	051b      	lsls	r3, r3, #20
 80042fa:	493f      	ldr	r1, [pc, #252]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	3b01      	subs	r3, #1
 8004306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	3b01      	subs	r3, #1
 8004310:	025b      	lsls	r3, r3, #9
 8004312:	b29b      	uxth	r3, r3
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	3b01      	subs	r3, #1
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004330:	4931      	ldr	r1, [pc, #196]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004336:	4b30      	ldr	r3, [pc, #192]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	492d      	ldr	r1, [pc, #180]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004348:	4b2b      	ldr	r3, [pc, #172]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	4928      	ldr	r1, [pc, #160]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800435a:	4b27      	ldr	r3, [pc, #156]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004366:	4b24      	ldr	r3, [pc, #144]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436a:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <RCCEx_PLL3_Config+0x160>)
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	69d2      	ldr	r2, [r2, #28]
 8004372:	00d2      	lsls	r2, r2, #3
 8004374:	4920      	ldr	r1, [pc, #128]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800437a:	4b1f      	ldr	r3, [pc, #124]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800438c:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	4a19      	ldr	r2, [pc, #100]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004392:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004398:	e00f      	b.n	80043ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043a0:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043ac:	e005      	b.n	80043ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043ae:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	4a11      	ldr	r2, [pc, #68]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a0e      	ldr	r2, [pc, #56]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fc fe27 	bl	8001018 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043cc:	e008      	b.n	80043e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043ce:	f7fc fe23 	bl	8001018 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e006      	b.n	80043ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
 80043fc:	ffff0007 	.word	0xffff0007

08004400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e042      	b.n	8004498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fc fb49 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2224      	movs	r2, #36	@ 0x24
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fe1e 	bl	800508c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8b3 	bl	80045bc <UART_SetConfig>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01b      	b.n	8004498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800446e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800447e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fe9d 	bl	80051d0 <UART_CheckIdleState>
 8004496:	4603      	mov	r3, r0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	@ 0x28
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d17b      	bne.n	80045b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_Transmit+0x26>
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e074      	b.n	80045b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2221      	movs	r2, #33	@ 0x21
 80044d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044da:	f7fc fd9d 	bl	8001018 <HAL_GetTick>
 80044de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f8:	d108      	bne.n	800450c <HAL_UART_Transmit+0x6c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e003      	b.n	8004514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004514:	e030      	b.n	8004578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 feff 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03d      	b.n	80045b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3302      	adds	r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e007      	b.n	8004566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1c8      	bne.n	8004516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	2140      	movs	r1, #64	@ 0x40
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fec8 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e006      	b.n	80045b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c0:	b092      	sub	sp, #72	@ 0x48
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4bbe      	ldr	r3, [pc, #760]	@ (80048e4 <UART_SetConfig+0x328>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4ab3      	ldr	r2, [pc, #716]	@ (80048e8 <UART_SetConfig+0x32c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004624:	4313      	orrs	r3, r2
 8004626:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	4baf      	ldr	r3, [pc, #700]	@ (80048ec <UART_SetConfig+0x330>)
 8004630:	4013      	ands	r3, r2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004638:	430b      	orrs	r3, r1
 800463a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	f023 010f 	bic.w	r1, r3, #15
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4aa6      	ldr	r2, [pc, #664]	@ (80048f0 <UART_SetConfig+0x334>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d177      	bne.n	800474c <UART_SetConfig+0x190>
 800465c:	4ba5      	ldr	r3, [pc, #660]	@ (80048f4 <UART_SetConfig+0x338>)
 800465e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004660:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004664:	2b28      	cmp	r3, #40	@ 0x28
 8004666:	d86d      	bhi.n	8004744 <UART_SetConfig+0x188>
 8004668:	a201      	add	r2, pc, #4	@ (adr r2, 8004670 <UART_SetConfig+0xb4>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004715 	.word	0x08004715
 8004674:	08004745 	.word	0x08004745
 8004678:	08004745 	.word	0x08004745
 800467c:	08004745 	.word	0x08004745
 8004680:	08004745 	.word	0x08004745
 8004684:	08004745 	.word	0x08004745
 8004688:	08004745 	.word	0x08004745
 800468c:	08004745 	.word	0x08004745
 8004690:	0800471d 	.word	0x0800471d
 8004694:	08004745 	.word	0x08004745
 8004698:	08004745 	.word	0x08004745
 800469c:	08004745 	.word	0x08004745
 80046a0:	08004745 	.word	0x08004745
 80046a4:	08004745 	.word	0x08004745
 80046a8:	08004745 	.word	0x08004745
 80046ac:	08004745 	.word	0x08004745
 80046b0:	08004725 	.word	0x08004725
 80046b4:	08004745 	.word	0x08004745
 80046b8:	08004745 	.word	0x08004745
 80046bc:	08004745 	.word	0x08004745
 80046c0:	08004745 	.word	0x08004745
 80046c4:	08004745 	.word	0x08004745
 80046c8:	08004745 	.word	0x08004745
 80046cc:	08004745 	.word	0x08004745
 80046d0:	0800472d 	.word	0x0800472d
 80046d4:	08004745 	.word	0x08004745
 80046d8:	08004745 	.word	0x08004745
 80046dc:	08004745 	.word	0x08004745
 80046e0:	08004745 	.word	0x08004745
 80046e4:	08004745 	.word	0x08004745
 80046e8:	08004745 	.word	0x08004745
 80046ec:	08004745 	.word	0x08004745
 80046f0:	08004735 	.word	0x08004735
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004745 	.word	0x08004745
 80046fc:	08004745 	.word	0x08004745
 8004700:	08004745 	.word	0x08004745
 8004704:	08004745 	.word	0x08004745
 8004708:	08004745 	.word	0x08004745
 800470c:	08004745 	.word	0x08004745
 8004710:	0800473d 	.word	0x0800473d
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471a:	e222      	b.n	8004b62 <UART_SetConfig+0x5a6>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004722:	e21e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472a:	e21a      	b.n	8004b62 <UART_SetConfig+0x5a6>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004732:	e216      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004734:	2320      	movs	r3, #32
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473a:	e212      	b.n	8004b62 <UART_SetConfig+0x5a6>
 800473c:	2340      	movs	r3, #64	@ 0x40
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e20e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e20a      	b.n	8004b62 <UART_SetConfig+0x5a6>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a69      	ldr	r2, [pc, #420]	@ (80048f8 <UART_SetConfig+0x33c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d130      	bne.n	80047b8 <UART_SetConfig+0x1fc>
 8004756:	4b67      	ldr	r3, [pc, #412]	@ (80048f4 <UART_SetConfig+0x338>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	2b05      	cmp	r3, #5
 8004760:	d826      	bhi.n	80047b0 <UART_SetConfig+0x1f4>
 8004762:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <UART_SetConfig+0x1ac>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	08004781 	.word	0x08004781
 800476c:	08004789 	.word	0x08004789
 8004770:	08004791 	.word	0x08004791
 8004774:	08004799 	.word	0x08004799
 8004778:	080047a1 	.word	0x080047a1
 800477c:	080047a9 	.word	0x080047a9
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004786:	e1ec      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004788:	2304      	movs	r3, #4
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478e:	e1e8      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004790:	2308      	movs	r3, #8
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004796:	e1e4      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004798:	2310      	movs	r3, #16
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800479e:	e1e0      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80047a0:	2320      	movs	r3, #32
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a6:	e1dc      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80047a8:	2340      	movs	r3, #64	@ 0x40
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ae:	e1d8      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80047b0:	2380      	movs	r3, #128	@ 0x80
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b6:	e1d4      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a4f      	ldr	r2, [pc, #316]	@ (80048fc <UART_SetConfig+0x340>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d130      	bne.n	8004824 <UART_SetConfig+0x268>
 80047c2:	4b4c      	ldr	r3, [pc, #304]	@ (80048f4 <UART_SetConfig+0x338>)
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b05      	cmp	r3, #5
 80047cc:	d826      	bhi.n	800481c <UART_SetConfig+0x260>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <UART_SetConfig+0x218>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047ed 	.word	0x080047ed
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	080047fd 	.word	0x080047fd
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f2:	e1b6      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fa:	e1b2      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004802:	e1ae      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480a:	e1aa      	b.n	8004b62 <UART_SetConfig+0x5a6>
 800480c:	2320      	movs	r3, #32
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004812:	e1a6      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004814:	2340      	movs	r3, #64	@ 0x40
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e1a2      	b.n	8004b62 <UART_SetConfig+0x5a6>
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e19e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a35      	ldr	r2, [pc, #212]	@ (8004900 <UART_SetConfig+0x344>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d130      	bne.n	8004890 <UART_SetConfig+0x2d4>
 800482e:	4b31      	ldr	r3, [pc, #196]	@ (80048f4 <UART_SetConfig+0x338>)
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b05      	cmp	r3, #5
 8004838:	d826      	bhi.n	8004888 <UART_SetConfig+0x2cc>
 800483a:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <UART_SetConfig+0x284>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004859 	.word	0x08004859
 8004844:	08004861 	.word	0x08004861
 8004848:	08004869 	.word	0x08004869
 800484c:	08004871 	.word	0x08004871
 8004850:	08004879 	.word	0x08004879
 8004854:	08004881 	.word	0x08004881
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e180      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e17c      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e178      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e174      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004878:	2320      	movs	r3, #32
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e170      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004880:	2340      	movs	r3, #64	@ 0x40
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e16c      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488e:	e168      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1b      	ldr	r2, [pc, #108]	@ (8004904 <UART_SetConfig+0x348>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d142      	bne.n	8004920 <UART_SetConfig+0x364>
 800489a:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <UART_SetConfig+0x338>)
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d838      	bhi.n	8004918 <UART_SetConfig+0x35c>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0x2f0>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048c5 	.word	0x080048c5
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	080048d5 	.word	0x080048d5
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	08004909 	.word	0x08004909
 80048c0:	08004911 	.word	0x08004911
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ca:	e14a      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e146      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048da:	e142      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e13e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80048e4:	cfff69f3 	.word	0xcfff69f3
 80048e8:	58000c00 	.word	0x58000c00
 80048ec:	11fff4ff 	.word	0x11fff4ff
 80048f0:	40011000 	.word	0x40011000
 80048f4:	58024400 	.word	0x58024400
 80048f8:	40004400 	.word	0x40004400
 80048fc:	40004800 	.word	0x40004800
 8004900:	40004c00 	.word	0x40004c00
 8004904:	40005000 	.word	0x40005000
 8004908:	2320      	movs	r3, #32
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490e:	e128      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004910:	2340      	movs	r3, #64	@ 0x40
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004916:	e124      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491e:	e120      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4acb      	ldr	r2, [pc, #812]	@ (8004c54 <UART_SetConfig+0x698>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d176      	bne.n	8004a18 <UART_SetConfig+0x45c>
 800492a:	4bcb      	ldr	r3, [pc, #812]	@ (8004c58 <UART_SetConfig+0x69c>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004932:	2b28      	cmp	r3, #40	@ 0x28
 8004934:	d86c      	bhi.n	8004a10 <UART_SetConfig+0x454>
 8004936:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <UART_SetConfig+0x380>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	080049e1 	.word	0x080049e1
 8004940:	08004a11 	.word	0x08004a11
 8004944:	08004a11 	.word	0x08004a11
 8004948:	08004a11 	.word	0x08004a11
 800494c:	08004a11 	.word	0x08004a11
 8004950:	08004a11 	.word	0x08004a11
 8004954:	08004a11 	.word	0x08004a11
 8004958:	08004a11 	.word	0x08004a11
 800495c:	080049e9 	.word	0x080049e9
 8004960:	08004a11 	.word	0x08004a11
 8004964:	08004a11 	.word	0x08004a11
 8004968:	08004a11 	.word	0x08004a11
 800496c:	08004a11 	.word	0x08004a11
 8004970:	08004a11 	.word	0x08004a11
 8004974:	08004a11 	.word	0x08004a11
 8004978:	08004a11 	.word	0x08004a11
 800497c:	080049f1 	.word	0x080049f1
 8004980:	08004a11 	.word	0x08004a11
 8004984:	08004a11 	.word	0x08004a11
 8004988:	08004a11 	.word	0x08004a11
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004a11 	.word	0x08004a11
 8004994:	08004a11 	.word	0x08004a11
 8004998:	08004a11 	.word	0x08004a11
 800499c:	080049f9 	.word	0x080049f9
 80049a0:	08004a11 	.word	0x08004a11
 80049a4:	08004a11 	.word	0x08004a11
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	08004a11 	.word	0x08004a11
 80049b0:	08004a11 	.word	0x08004a11
 80049b4:	08004a11 	.word	0x08004a11
 80049b8:	08004a11 	.word	0x08004a11
 80049bc:	08004a01 	.word	0x08004a01
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004a11 	.word	0x08004a11
 80049c8:	08004a11 	.word	0x08004a11
 80049cc:	08004a11 	.word	0x08004a11
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a11 	.word	0x08004a11
 80049d8:	08004a11 	.word	0x08004a11
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e6:	e0bc      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80049e8:	2304      	movs	r3, #4
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ee:	e0b8      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80049f0:	2308      	movs	r3, #8
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f6:	e0b4      	b.n	8004b62 <UART_SetConfig+0x5a6>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fe:	e0b0      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a00:	2320      	movs	r3, #32
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a06:	e0ac      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a08:	2340      	movs	r3, #64	@ 0x40
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0e:	e0a8      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a10:	2380      	movs	r3, #128	@ 0x80
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e0a4      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a8f      	ldr	r2, [pc, #572]	@ (8004c5c <UART_SetConfig+0x6a0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d130      	bne.n	8004a84 <UART_SetConfig+0x4c8>
 8004a22:	4b8d      	ldr	r3, [pc, #564]	@ (8004c58 <UART_SetConfig+0x69c>)
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d826      	bhi.n	8004a7c <UART_SetConfig+0x4c0>
 8004a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <UART_SetConfig+0x478>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a4d 	.word	0x08004a4d
 8004a38:	08004a55 	.word	0x08004a55
 8004a3c:	08004a5d 	.word	0x08004a5d
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e086      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e082      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a62:	e07e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6a:	e07a      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a72:	e076      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a74:	2340      	movs	r3, #64	@ 0x40
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7a:	e072      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a82:	e06e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a75      	ldr	r2, [pc, #468]	@ (8004c60 <UART_SetConfig+0x6a4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d130      	bne.n	8004af0 <UART_SetConfig+0x534>
 8004a8e:	4b72      	ldr	r3, [pc, #456]	@ (8004c58 <UART_SetConfig+0x69c>)
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d826      	bhi.n	8004ae8 <UART_SetConfig+0x52c>
 8004a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <UART_SetConfig+0x4e4>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ab9 	.word	0x08004ab9
 8004aa4:	08004ac1 	.word	0x08004ac1
 8004aa8:	08004ac9 	.word	0x08004ac9
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ae1 	.word	0x08004ae1
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004abe:	e050      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac6:	e04c      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ace:	e048      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad6:	e044      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004ad8:	2320      	movs	r3, #32
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ade:	e040      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004ae0:	2340      	movs	r3, #64	@ 0x40
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae6:	e03c      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004ae8:	2380      	movs	r3, #128	@ 0x80
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aee:	e038      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a5b      	ldr	r2, [pc, #364]	@ (8004c64 <UART_SetConfig+0x6a8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d130      	bne.n	8004b5c <UART_SetConfig+0x5a0>
 8004afa:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <UART_SetConfig+0x69c>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d826      	bhi.n	8004b54 <UART_SetConfig+0x598>
 8004b06:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x550>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b25 	.word	0x08004b25
 8004b10:	08004b2d 	.word	0x08004b2d
 8004b14:	08004b35 	.word	0x08004b35
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e01a      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e016      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e012      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b42:	e00e      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b44:	2320      	movs	r3, #32
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4a:	e00a      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b4c:	2340      	movs	r3, #64	@ 0x40
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b52:	e006      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5a:	e002      	b.n	8004b62 <UART_SetConfig+0x5a6>
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <UART_SetConfig+0x6a8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	f040 80f8 	bne.w	8004d5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	dc46      	bgt.n	8004c04 <UART_SetConfig+0x648>
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	f2c0 8082 	blt.w	8004c80 <UART_SetConfig+0x6c4>
 8004b7c:	3b02      	subs	r3, #2
 8004b7e:	2b1e      	cmp	r3, #30
 8004b80:	d87e      	bhi.n	8004c80 <UART_SetConfig+0x6c4>
 8004b82:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <UART_SetConfig+0x5cc>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004c0b 	.word	0x08004c0b
 8004b8c:	08004c81 	.word	0x08004c81
 8004b90:	08004c13 	.word	0x08004c13
 8004b94:	08004c81 	.word	0x08004c81
 8004b98:	08004c81 	.word	0x08004c81
 8004b9c:	08004c81 	.word	0x08004c81
 8004ba0:	08004c23 	.word	0x08004c23
 8004ba4:	08004c81 	.word	0x08004c81
 8004ba8:	08004c81 	.word	0x08004c81
 8004bac:	08004c81 	.word	0x08004c81
 8004bb0:	08004c81 	.word	0x08004c81
 8004bb4:	08004c81 	.word	0x08004c81
 8004bb8:	08004c81 	.word	0x08004c81
 8004bbc:	08004c81 	.word	0x08004c81
 8004bc0:	08004c33 	.word	0x08004c33
 8004bc4:	08004c81 	.word	0x08004c81
 8004bc8:	08004c81 	.word	0x08004c81
 8004bcc:	08004c81 	.word	0x08004c81
 8004bd0:	08004c81 	.word	0x08004c81
 8004bd4:	08004c81 	.word	0x08004c81
 8004bd8:	08004c81 	.word	0x08004c81
 8004bdc:	08004c81 	.word	0x08004c81
 8004be0:	08004c81 	.word	0x08004c81
 8004be4:	08004c81 	.word	0x08004c81
 8004be8:	08004c81 	.word	0x08004c81
 8004bec:	08004c81 	.word	0x08004c81
 8004bf0:	08004c81 	.word	0x08004c81
 8004bf4:	08004c81 	.word	0x08004c81
 8004bf8:	08004c81 	.word	0x08004c81
 8004bfc:	08004c81 	.word	0x08004c81
 8004c00:	08004c73 	.word	0x08004c73
 8004c04:	2b40      	cmp	r3, #64	@ 0x40
 8004c06:	d037      	beq.n	8004c78 <UART_SetConfig+0x6bc>
 8004c08:	e03a      	b.n	8004c80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004c0a:	f7fe ffd7 	bl	8003bbc <HAL_RCCEx_GetD3PCLK1Freq>
 8004c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c10:	e03c      	b.n	8004c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe ffe6 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c20:	e034      	b.n	8004c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c22:	f107 0318 	add.w	r3, r7, #24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff f932 	bl	8003e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c30:	e02c      	b.n	8004c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <UART_SetConfig+0x69c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c3e:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <UART_SetConfig+0x69c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	08db      	lsrs	r3, r3, #3
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	4a07      	ldr	r2, [pc, #28]	@ (8004c68 <UART_SetConfig+0x6ac>)
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c50:	e01c      	b.n	8004c8c <UART_SetConfig+0x6d0>
 8004c52:	bf00      	nop
 8004c54:	40011400 	.word	0x40011400
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	40007800 	.word	0x40007800
 8004c60:	40007c00 	.word	0x40007c00
 8004c64:	58000c00 	.word	0x58000c00
 8004c68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ee4 <UART_SetConfig+0x928>)
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c70:	e00c      	b.n	8004c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c72:	4b9d      	ldr	r3, [pc, #628]	@ (8004ee8 <UART_SetConfig+0x92c>)
 8004c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c76:	e009      	b.n	8004c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c7e:	e005      	b.n	8004c8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 81de 	beq.w	8005050 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	4a94      	ldr	r2, [pc, #592]	@ (8004eec <UART_SetConfig+0x930>)
 8004c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d305      	bcc.n	8004cc4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d903      	bls.n	8004ccc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004cca:	e1c1      	b.n	8005050 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	4a84      	ldr	r2, [pc, #528]	@ (8004eec <UART_SetConfig+0x930>)
 8004cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cee:	f7fb fb47 	bl	8000380 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	020b      	lsls	r3, r1, #8
 8004d04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d08:	0202      	lsls	r2, r0, #8
 8004d0a:	6979      	ldr	r1, [r7, #20]
 8004d0c:	6849      	ldr	r1, [r1, #4]
 8004d0e:	0849      	lsrs	r1, r1, #1
 8004d10:	2000      	movs	r0, #0
 8004d12:	460c      	mov	r4, r1
 8004d14:	4605      	mov	r5, r0
 8004d16:	eb12 0804 	adds.w	r8, r2, r4
 8004d1a:	eb43 0905 	adc.w	r9, r3, r5
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	469a      	mov	sl, r3
 8004d26:	4693      	mov	fp, r2
 8004d28:	4652      	mov	r2, sl
 8004d2a:	465b      	mov	r3, fp
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	4649      	mov	r1, r9
 8004d30:	f7fb fb26 	bl	8000380 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d42:	d308      	bcc.n	8004d56 <UART_SetConfig+0x79a>
 8004d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d4a:	d204      	bcs.n	8004d56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e17c      	b.n	8005050 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d5c:	e178      	b.n	8005050 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d66:	f040 80c5 	bne.w	8004ef4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004d6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	dc48      	bgt.n	8004e04 <UART_SetConfig+0x848>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	db7b      	blt.n	8004e6e <UART_SetConfig+0x8b2>
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d879      	bhi.n	8004e6e <UART_SetConfig+0x8b2>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <UART_SetConfig+0x7c4>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004e0b 	.word	0x08004e0b
 8004d84:	08004e13 	.word	0x08004e13
 8004d88:	08004e6f 	.word	0x08004e6f
 8004d8c:	08004e6f 	.word	0x08004e6f
 8004d90:	08004e1b 	.word	0x08004e1b
 8004d94:	08004e6f 	.word	0x08004e6f
 8004d98:	08004e6f 	.word	0x08004e6f
 8004d9c:	08004e6f 	.word	0x08004e6f
 8004da0:	08004e2b 	.word	0x08004e2b
 8004da4:	08004e6f 	.word	0x08004e6f
 8004da8:	08004e6f 	.word	0x08004e6f
 8004dac:	08004e6f 	.word	0x08004e6f
 8004db0:	08004e6f 	.word	0x08004e6f
 8004db4:	08004e6f 	.word	0x08004e6f
 8004db8:	08004e6f 	.word	0x08004e6f
 8004dbc:	08004e6f 	.word	0x08004e6f
 8004dc0:	08004e3b 	.word	0x08004e3b
 8004dc4:	08004e6f 	.word	0x08004e6f
 8004dc8:	08004e6f 	.word	0x08004e6f
 8004dcc:	08004e6f 	.word	0x08004e6f
 8004dd0:	08004e6f 	.word	0x08004e6f
 8004dd4:	08004e6f 	.word	0x08004e6f
 8004dd8:	08004e6f 	.word	0x08004e6f
 8004ddc:	08004e6f 	.word	0x08004e6f
 8004de0:	08004e6f 	.word	0x08004e6f
 8004de4:	08004e6f 	.word	0x08004e6f
 8004de8:	08004e6f 	.word	0x08004e6f
 8004dec:	08004e6f 	.word	0x08004e6f
 8004df0:	08004e6f 	.word	0x08004e6f
 8004df4:	08004e6f 	.word	0x08004e6f
 8004df8:	08004e6f 	.word	0x08004e6f
 8004dfc:	08004e6f 	.word	0x08004e6f
 8004e00:	08004e61 	.word	0x08004e61
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d02e      	beq.n	8004e66 <UART_SetConfig+0x8aa>
 8004e08:	e031      	b.n	8004e6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e0a:	f7fd fca1 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e10:	e033      	b.n	8004e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e12:	f7fd fcb3 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8004e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e18:	e02f      	b.n	8004e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fee2 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e28:	e027      	b.n	8004e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e2a:	f107 0318 	add.w	r3, r7, #24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff f82e 	bl	8003e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e38:	e01f      	b.n	8004e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef0 <UART_SetConfig+0x934>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <UART_SetConfig+0x934>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	08db      	lsrs	r3, r3, #3
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	4a24      	ldr	r2, [pc, #144]	@ (8004ee4 <UART_SetConfig+0x928>)
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e58:	e00f      	b.n	8004e7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <UART_SetConfig+0x928>)
 8004e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e5e:	e00c      	b.n	8004e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e60:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <UART_SetConfig+0x92c>)
 8004e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e64:	e009      	b.n	8004e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e6c:	e005      	b.n	8004e7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80e7 	beq.w	8005050 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	4a19      	ldr	r2, [pc, #100]	@ (8004eec <UART_SetConfig+0x930>)
 8004e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e94:	005a      	lsls	r2, r3, #1
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	441a      	add	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d916      	bls.n	8004edc <UART_SetConfig+0x920>
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb4:	d212      	bcs.n	8004edc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f023 030f 	bic.w	r3, r3, #15
 8004ebe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	e0b9      	b.n	8005050 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ee2:	e0b5      	b.n	8005050 <UART_SetConfig+0xa94>
 8004ee4:	03d09000 	.word	0x03d09000
 8004ee8:	003d0900 	.word	0x003d0900
 8004eec:	080066ec 	.word	0x080066ec
 8004ef0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	dc49      	bgt.n	8004f90 <UART_SetConfig+0x9d4>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	db7c      	blt.n	8004ffa <UART_SetConfig+0xa3e>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d87a      	bhi.n	8004ffa <UART_SetConfig+0xa3e>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <UART_SetConfig+0x950>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f97 	.word	0x08004f97
 8004f10:	08004f9f 	.word	0x08004f9f
 8004f14:	08004ffb 	.word	0x08004ffb
 8004f18:	08004ffb 	.word	0x08004ffb
 8004f1c:	08004fa7 	.word	0x08004fa7
 8004f20:	08004ffb 	.word	0x08004ffb
 8004f24:	08004ffb 	.word	0x08004ffb
 8004f28:	08004ffb 	.word	0x08004ffb
 8004f2c:	08004fb7 	.word	0x08004fb7
 8004f30:	08004ffb 	.word	0x08004ffb
 8004f34:	08004ffb 	.word	0x08004ffb
 8004f38:	08004ffb 	.word	0x08004ffb
 8004f3c:	08004ffb 	.word	0x08004ffb
 8004f40:	08004ffb 	.word	0x08004ffb
 8004f44:	08004ffb 	.word	0x08004ffb
 8004f48:	08004ffb 	.word	0x08004ffb
 8004f4c:	08004fc7 	.word	0x08004fc7
 8004f50:	08004ffb 	.word	0x08004ffb
 8004f54:	08004ffb 	.word	0x08004ffb
 8004f58:	08004ffb 	.word	0x08004ffb
 8004f5c:	08004ffb 	.word	0x08004ffb
 8004f60:	08004ffb 	.word	0x08004ffb
 8004f64:	08004ffb 	.word	0x08004ffb
 8004f68:	08004ffb 	.word	0x08004ffb
 8004f6c:	08004ffb 	.word	0x08004ffb
 8004f70:	08004ffb 	.word	0x08004ffb
 8004f74:	08004ffb 	.word	0x08004ffb
 8004f78:	08004ffb 	.word	0x08004ffb
 8004f7c:	08004ffb 	.word	0x08004ffb
 8004f80:	08004ffb 	.word	0x08004ffb
 8004f84:	08004ffb 	.word	0x08004ffb
 8004f88:	08004ffb 	.word	0x08004ffb
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d02e      	beq.n	8004ff2 <UART_SetConfig+0xa36>
 8004f94:	e031      	b.n	8004ffa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f96:	f7fd fbdb 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004f9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f9c:	e033      	b.n	8005006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f9e:	f7fd fbed 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8004fa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fa4:	e02f      	b.n	8005006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fe1c 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fb4:	e027      	b.n	8005006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fb6:	f107 0318 	add.w	r3, r7, #24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe ff68 	bl	8003e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc4:	e01f      	b.n	8005006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800507c <UART_SetConfig+0xac0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800507c <UART_SetConfig+0xac0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	08db      	lsrs	r3, r3, #3
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <UART_SetConfig+0xac4>)
 8004fde:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fe4:	e00f      	b.n	8005006 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004fe6:	4b26      	ldr	r3, [pc, #152]	@ (8005080 <UART_SetConfig+0xac4>)
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fea:	e00c      	b.n	8005006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fec:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <UART_SetConfig+0xac8>)
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005004:	bf00      	nop
    }

    if (pclk != 0U)
 8005006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d021      	beq.n	8005050 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <UART_SetConfig+0xacc>)
 8005012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005016:	461a      	mov	r2, r3
 8005018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501a:	fbb3 f2f2 	udiv	r2, r3, r2
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	441a      	add	r2, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	2b0f      	cmp	r3, #15
 8005034:	d909      	bls.n	800504a <UART_SetConfig+0xa8e>
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503c:	d205      	bcs.n	800504a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800503e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005040:	b29a      	uxth	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60da      	str	r2, [r3, #12]
 8005048:	e002      	b.n	8005050 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2201      	movs	r2, #1
 8005054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2201      	movs	r2, #1
 800505c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800506c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005070:	4618      	mov	r0, r3
 8005072:	3748      	adds	r7, #72	@ 0x48
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
 8005080:	03d09000 	.word	0x03d09000
 8005084:	003d0900 	.word	0x003d0900
 8005088:	080066ec 	.word	0x080066ec

0800508c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800518a:	d10a      	bne.n	80051a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b098      	sub	sp, #96	@ 0x60
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051e0:	f7fb ff1a 	bl	8001018 <HAL_GetTick>
 80051e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d12f      	bne.n	8005254 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fc:	2200      	movs	r2, #0
 80051fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f88e 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d022      	beq.n	8005254 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005222:	653b      	str	r3, [r7, #80]	@ 0x50
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800522c:	647b      	str	r3, [r7, #68]	@ 0x44
 800522e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800523a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e6      	bne.n	800520e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e063      	b.n	800531c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d149      	bne.n	80052f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800526a:	2200      	movs	r2, #0
 800526c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f857 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d03c      	beq.n	80052f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	623b      	str	r3, [r7, #32]
   return(result);
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529a:	633b      	str	r3, [r7, #48]	@ 0x30
 800529c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e6      	bne.n	800527c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ce:	61fa      	str	r2, [r7, #28]
 80052d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	69b9      	ldr	r1, [r7, #24]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	617b      	str	r3, [r7, #20]
   return(result);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e012      	b.n	800531c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3758      	adds	r7, #88	@ 0x58
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005334:	e04f      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d04b      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fb fe6b 	bl	8001018 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <UART_WaitOnFlagUntilTimeout+0x30>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e04e      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d037      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b80      	cmp	r3, #128	@ 0x80
 800536a:	d034      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b40      	cmp	r3, #64	@ 0x40
 8005370:	d031      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b08      	cmp	r3, #8
 800537e:	d110      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2208      	movs	r2, #8
 8005386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f839 	bl	8005400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2208      	movs	r2, #8
 8005392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e029      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b0:	d111      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f81f 	bl	8005400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e00f      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d0a0      	beq.n	8005336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b095      	sub	sp, #84	@ 0x54
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800541c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005426:	643b      	str	r3, [r7, #64]	@ 0x40
 8005428:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800542c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e6      	bne.n	8005408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	61fb      	str	r3, [r7, #28]
   return(result);
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <UART_EndRxTransfer+0xc8>)
 800544e:	4013      	ands	r3, r2
 8005450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800545a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d118      	bne.n	80054a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	60bb      	str	r3, [r7, #8]
   return(result);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	647b      	str	r3, [r7, #68]	@ 0x44
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6979      	ldr	r1, [r7, #20]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	613b      	str	r3, [r7, #16]
   return(result);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054bc:	bf00      	nop
 80054be:	3754      	adds	r7, #84	@ 0x54
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	effffffe 	.word	0xeffffffe

080054cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80054de:	2302      	movs	r3, #2
 80054e0:	e027      	b.n	8005532 <HAL_UARTEx_DisableFifoMode+0x66>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2224      	movs	r2, #36	@ 0x24
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005552:	2302      	movs	r3, #2
 8005554:	e02d      	b.n	80055b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2224      	movs	r2, #36	@ 0x24
 8005562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f850 	bl	8005638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e02d      	b.n	800562e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2224      	movs	r2, #36	@ 0x24
 80055de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f812 	bl	8005638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005644:	2b00      	cmp	r3, #0
 8005646:	d108      	bne.n	800565a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005658:	e031      	b.n	80056be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800565a:	2310      	movs	r3, #16
 800565c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800565e:	2310      	movs	r3, #16
 8005660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	0e5b      	lsrs	r3, r3, #25
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	0f5b      	lsrs	r3, r3, #29
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	7b3a      	ldrb	r2, [r7, #12]
 8005686:	4911      	ldr	r1, [pc, #68]	@ (80056cc <UARTEx_SetNbDataToProcess+0x94>)
 8005688:	5c8a      	ldrb	r2, [r1, r2]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800568e:	7b3a      	ldrb	r2, [r7, #12]
 8005690:	490f      	ldr	r1, [pc, #60]	@ (80056d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005694:	fb93 f3f2 	sdiv	r3, r3, r2
 8005698:	b29a      	uxth	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	7b7a      	ldrb	r2, [r7, #13]
 80056a4:	4909      	ldr	r1, [pc, #36]	@ (80056cc <UARTEx_SetNbDataToProcess+0x94>)
 80056a6:	5c8a      	ldrb	r2, [r1, r2]
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056ac:	7b7a      	ldrb	r2, [r7, #13]
 80056ae:	4908      	ldr	r1, [pc, #32]	@ (80056d0 <UARTEx_SetNbDataToProcess+0x98>)
 80056b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	08006704 	.word	0x08006704
 80056d0:	0800670c 	.word	0x0800670c

080056d4 <std>:
 80056d4:	2300      	movs	r3, #0
 80056d6:	b510      	push	{r4, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	e9c0 3300 	strd	r3, r3, [r0]
 80056de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056e2:	6083      	str	r3, [r0, #8]
 80056e4:	8181      	strh	r1, [r0, #12]
 80056e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80056e8:	81c2      	strh	r2, [r0, #14]
 80056ea:	6183      	str	r3, [r0, #24]
 80056ec:	4619      	mov	r1, r3
 80056ee:	2208      	movs	r2, #8
 80056f0:	305c      	adds	r0, #92	@ 0x5c
 80056f2:	f000 f9c2 	bl	8005a7a <memset>
 80056f6:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <std+0x58>)
 80056f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80056fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <std+0x5c>)
 80056fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <std+0x60>)
 8005700:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <std+0x64>)
 8005704:	6323      	str	r3, [r4, #48]	@ 0x30
 8005706:	4b0d      	ldr	r3, [pc, #52]	@ (800573c <std+0x68>)
 8005708:	6224      	str	r4, [r4, #32]
 800570a:	429c      	cmp	r4, r3
 800570c:	d006      	beq.n	800571c <std+0x48>
 800570e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005712:	4294      	cmp	r4, r2
 8005714:	d002      	beq.n	800571c <std+0x48>
 8005716:	33d0      	adds	r3, #208	@ 0xd0
 8005718:	429c      	cmp	r4, r3
 800571a:	d105      	bne.n	8005728 <std+0x54>
 800571c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005724:	f000 ba22 	b.w	8005b6c <__retarget_lock_init_recursive>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	bf00      	nop
 800572c:	080059f5 	.word	0x080059f5
 8005730:	08005a17 	.word	0x08005a17
 8005734:	08005a4f 	.word	0x08005a4f
 8005738:	08005a73 	.word	0x08005a73
 800573c:	24000134 	.word	0x24000134

08005740 <stdio_exit_handler>:
 8005740:	4a02      	ldr	r2, [pc, #8]	@ (800574c <stdio_exit_handler+0xc>)
 8005742:	4903      	ldr	r1, [pc, #12]	@ (8005750 <stdio_exit_handler+0x10>)
 8005744:	4803      	ldr	r0, [pc, #12]	@ (8005754 <stdio_exit_handler+0x14>)
 8005746:	f000 b869 	b.w	800581c <_fwalk_sglue>
 800574a:	bf00      	nop
 800574c:	24000014 	.word	0x24000014
 8005750:	08006419 	.word	0x08006419
 8005754:	24000024 	.word	0x24000024

08005758 <cleanup_stdio>:
 8005758:	6841      	ldr	r1, [r0, #4]
 800575a:	4b0c      	ldr	r3, [pc, #48]	@ (800578c <cleanup_stdio+0x34>)
 800575c:	4299      	cmp	r1, r3
 800575e:	b510      	push	{r4, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	d001      	beq.n	8005768 <cleanup_stdio+0x10>
 8005764:	f000 fe58 	bl	8006418 <_fflush_r>
 8005768:	68a1      	ldr	r1, [r4, #8]
 800576a:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <cleanup_stdio+0x38>)
 800576c:	4299      	cmp	r1, r3
 800576e:	d002      	beq.n	8005776 <cleanup_stdio+0x1e>
 8005770:	4620      	mov	r0, r4
 8005772:	f000 fe51 	bl	8006418 <_fflush_r>
 8005776:	68e1      	ldr	r1, [r4, #12]
 8005778:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <cleanup_stdio+0x3c>)
 800577a:	4299      	cmp	r1, r3
 800577c:	d004      	beq.n	8005788 <cleanup_stdio+0x30>
 800577e:	4620      	mov	r0, r4
 8005780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005784:	f000 be48 	b.w	8006418 <_fflush_r>
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	24000134 	.word	0x24000134
 8005790:	2400019c 	.word	0x2400019c
 8005794:	24000204 	.word	0x24000204

08005798 <global_stdio_init.part.0>:
 8005798:	b510      	push	{r4, lr}
 800579a:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <global_stdio_init.part.0+0x30>)
 800579c:	4c0b      	ldr	r4, [pc, #44]	@ (80057cc <global_stdio_init.part.0+0x34>)
 800579e:	4a0c      	ldr	r2, [pc, #48]	@ (80057d0 <global_stdio_init.part.0+0x38>)
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	4620      	mov	r0, r4
 80057a4:	2200      	movs	r2, #0
 80057a6:	2104      	movs	r1, #4
 80057a8:	f7ff ff94 	bl	80056d4 <std>
 80057ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057b0:	2201      	movs	r2, #1
 80057b2:	2109      	movs	r1, #9
 80057b4:	f7ff ff8e 	bl	80056d4 <std>
 80057b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057bc:	2202      	movs	r2, #2
 80057be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c2:	2112      	movs	r1, #18
 80057c4:	f7ff bf86 	b.w	80056d4 <std>
 80057c8:	2400026c 	.word	0x2400026c
 80057cc:	24000134 	.word	0x24000134
 80057d0:	08005741 	.word	0x08005741

080057d4 <__sfp_lock_acquire>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__sfp_lock_acquire+0x8>)
 80057d6:	f000 b9ca 	b.w	8005b6e <__retarget_lock_acquire_recursive>
 80057da:	bf00      	nop
 80057dc:	24000275 	.word	0x24000275

080057e0 <__sfp_lock_release>:
 80057e0:	4801      	ldr	r0, [pc, #4]	@ (80057e8 <__sfp_lock_release+0x8>)
 80057e2:	f000 b9c5 	b.w	8005b70 <__retarget_lock_release_recursive>
 80057e6:	bf00      	nop
 80057e8:	24000275 	.word	0x24000275

080057ec <__sinit>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4604      	mov	r4, r0
 80057f0:	f7ff fff0 	bl	80057d4 <__sfp_lock_acquire>
 80057f4:	6a23      	ldr	r3, [r4, #32]
 80057f6:	b11b      	cbz	r3, 8005800 <__sinit+0x14>
 80057f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057fc:	f7ff bff0 	b.w	80057e0 <__sfp_lock_release>
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <__sinit+0x28>)
 8005802:	6223      	str	r3, [r4, #32]
 8005804:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <__sinit+0x2c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f5      	bne.n	80057f8 <__sinit+0xc>
 800580c:	f7ff ffc4 	bl	8005798 <global_stdio_init.part.0>
 8005810:	e7f2      	b.n	80057f8 <__sinit+0xc>
 8005812:	bf00      	nop
 8005814:	08005759 	.word	0x08005759
 8005818:	2400026c 	.word	0x2400026c

0800581c <_fwalk_sglue>:
 800581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005820:	4607      	mov	r7, r0
 8005822:	4688      	mov	r8, r1
 8005824:	4614      	mov	r4, r2
 8005826:	2600      	movs	r6, #0
 8005828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800582c:	f1b9 0901 	subs.w	r9, r9, #1
 8005830:	d505      	bpl.n	800583e <_fwalk_sglue+0x22>
 8005832:	6824      	ldr	r4, [r4, #0]
 8005834:	2c00      	cmp	r4, #0
 8005836:	d1f7      	bne.n	8005828 <_fwalk_sglue+0xc>
 8005838:	4630      	mov	r0, r6
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d907      	bls.n	8005854 <_fwalk_sglue+0x38>
 8005844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005848:	3301      	adds	r3, #1
 800584a:	d003      	beq.n	8005854 <_fwalk_sglue+0x38>
 800584c:	4629      	mov	r1, r5
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	4306      	orrs	r6, r0
 8005854:	3568      	adds	r5, #104	@ 0x68
 8005856:	e7e9      	b.n	800582c <_fwalk_sglue+0x10>

08005858 <iprintf>:
 8005858:	b40f      	push	{r0, r1, r2, r3}
 800585a:	b507      	push	{r0, r1, r2, lr}
 800585c:	4906      	ldr	r1, [pc, #24]	@ (8005878 <iprintf+0x20>)
 800585e:	ab04      	add	r3, sp, #16
 8005860:	6808      	ldr	r0, [r1, #0]
 8005862:	f853 2b04 	ldr.w	r2, [r3], #4
 8005866:	6881      	ldr	r1, [r0, #8]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	f000 faad 	bl	8005dc8 <_vfiprintf_r>
 800586e:	b003      	add	sp, #12
 8005870:	f85d eb04 	ldr.w	lr, [sp], #4
 8005874:	b004      	add	sp, #16
 8005876:	4770      	bx	lr
 8005878:	24000020 	.word	0x24000020

0800587c <setbuf>:
 800587c:	fab1 f281 	clz	r2, r1
 8005880:	0952      	lsrs	r2, r2, #5
 8005882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005886:	0052      	lsls	r2, r2, #1
 8005888:	f000 b800 	b.w	800588c <setvbuf>

0800588c <setvbuf>:
 800588c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005890:	461d      	mov	r5, r3
 8005892:	4b57      	ldr	r3, [pc, #348]	@ (80059f0 <setvbuf+0x164>)
 8005894:	681f      	ldr	r7, [r3, #0]
 8005896:	4604      	mov	r4, r0
 8005898:	460e      	mov	r6, r1
 800589a:	4690      	mov	r8, r2
 800589c:	b127      	cbz	r7, 80058a8 <setvbuf+0x1c>
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	b913      	cbnz	r3, 80058a8 <setvbuf+0x1c>
 80058a2:	4638      	mov	r0, r7
 80058a4:	f7ff ffa2 	bl	80057ec <__sinit>
 80058a8:	f1b8 0f02 	cmp.w	r8, #2
 80058ac:	d006      	beq.n	80058bc <setvbuf+0x30>
 80058ae:	f1b8 0f01 	cmp.w	r8, #1
 80058b2:	f200 809a 	bhi.w	80059ea <setvbuf+0x15e>
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	f2c0 8097 	blt.w	80059ea <setvbuf+0x15e>
 80058bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058be:	07d9      	lsls	r1, r3, #31
 80058c0:	d405      	bmi.n	80058ce <setvbuf+0x42>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	059a      	lsls	r2, r3, #22
 80058c6:	d402      	bmi.n	80058ce <setvbuf+0x42>
 80058c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058ca:	f000 f950 	bl	8005b6e <__retarget_lock_acquire_recursive>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4638      	mov	r0, r7
 80058d2:	f000 fda1 	bl	8006418 <_fflush_r>
 80058d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058d8:	b141      	cbz	r1, 80058ec <setvbuf+0x60>
 80058da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058de:	4299      	cmp	r1, r3
 80058e0:	d002      	beq.n	80058e8 <setvbuf+0x5c>
 80058e2:	4638      	mov	r0, r7
 80058e4:	f000 f946 	bl	8005b74 <_free_r>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80058ec:	2300      	movs	r3, #0
 80058ee:	61a3      	str	r3, [r4, #24]
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	d503      	bpl.n	8005900 <setvbuf+0x74>
 80058f8:	6921      	ldr	r1, [r4, #16]
 80058fa:	4638      	mov	r0, r7
 80058fc:	f000 f93a 	bl	8005b74 <_free_r>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	f1b8 0f02 	cmp.w	r8, #2
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	d061      	beq.n	80059d6 <setvbuf+0x14a>
 8005912:	ab01      	add	r3, sp, #4
 8005914:	466a      	mov	r2, sp
 8005916:	4621      	mov	r1, r4
 8005918:	4638      	mov	r0, r7
 800591a:	f000 fda5 	bl	8006468 <__swhatbuf_r>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	4318      	orrs	r0, r3
 8005922:	81a0      	strh	r0, [r4, #12]
 8005924:	bb2d      	cbnz	r5, 8005972 <setvbuf+0xe6>
 8005926:	9d00      	ldr	r5, [sp, #0]
 8005928:	4628      	mov	r0, r5
 800592a:	f000 f96d 	bl	8005c08 <malloc>
 800592e:	4606      	mov	r6, r0
 8005930:	2800      	cmp	r0, #0
 8005932:	d152      	bne.n	80059da <setvbuf+0x14e>
 8005934:	f8dd 9000 	ldr.w	r9, [sp]
 8005938:	45a9      	cmp	r9, r5
 800593a:	d140      	bne.n	80059be <setvbuf+0x132>
 800593c:	f04f 35ff 	mov.w	r5, #4294967295
 8005940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005944:	f043 0202 	orr.w	r2, r3, #2
 8005948:	81a2      	strh	r2, [r4, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	60a2      	str	r2, [r4, #8]
 800594e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	6122      	str	r2, [r4, #16]
 8005956:	2201      	movs	r2, #1
 8005958:	6162      	str	r2, [r4, #20]
 800595a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800595c:	07d6      	lsls	r6, r2, #31
 800595e:	d404      	bmi.n	800596a <setvbuf+0xde>
 8005960:	0598      	lsls	r0, r3, #22
 8005962:	d402      	bmi.n	800596a <setvbuf+0xde>
 8005964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005966:	f000 f903 	bl	8005b70 <__retarget_lock_release_recursive>
 800596a:	4628      	mov	r0, r5
 800596c:	b003      	add	sp, #12
 800596e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005972:	2e00      	cmp	r6, #0
 8005974:	d0d8      	beq.n	8005928 <setvbuf+0x9c>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	b913      	cbnz	r3, 8005980 <setvbuf+0xf4>
 800597a:	4638      	mov	r0, r7
 800597c:	f7ff ff36 	bl	80057ec <__sinit>
 8005980:	f1b8 0f01 	cmp.w	r8, #1
 8005984:	bf08      	it	eq
 8005986:	89a3      	ldrheq	r3, [r4, #12]
 8005988:	6026      	str	r6, [r4, #0]
 800598a:	bf04      	itt	eq
 800598c:	f043 0301 	orreq.w	r3, r3, #1
 8005990:	81a3      	strheq	r3, [r4, #12]
 8005992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005996:	f013 0208 	ands.w	r2, r3, #8
 800599a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800599e:	d01e      	beq.n	80059de <setvbuf+0x152>
 80059a0:	07d9      	lsls	r1, r3, #31
 80059a2:	bf41      	itttt	mi
 80059a4:	2200      	movmi	r2, #0
 80059a6:	426d      	negmi	r5, r5
 80059a8:	60a2      	strmi	r2, [r4, #8]
 80059aa:	61a5      	strmi	r5, [r4, #24]
 80059ac:	bf58      	it	pl
 80059ae:	60a5      	strpl	r5, [r4, #8]
 80059b0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059b2:	07d2      	lsls	r2, r2, #31
 80059b4:	d401      	bmi.n	80059ba <setvbuf+0x12e>
 80059b6:	059b      	lsls	r3, r3, #22
 80059b8:	d513      	bpl.n	80059e2 <setvbuf+0x156>
 80059ba:	2500      	movs	r5, #0
 80059bc:	e7d5      	b.n	800596a <setvbuf+0xde>
 80059be:	4648      	mov	r0, r9
 80059c0:	f000 f922 	bl	8005c08 <malloc>
 80059c4:	4606      	mov	r6, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d0b8      	beq.n	800593c <setvbuf+0xb0>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	464d      	mov	r5, r9
 80059d4:	e7cf      	b.n	8005976 <setvbuf+0xea>
 80059d6:	2500      	movs	r5, #0
 80059d8:	e7b2      	b.n	8005940 <setvbuf+0xb4>
 80059da:	46a9      	mov	r9, r5
 80059dc:	e7f5      	b.n	80059ca <setvbuf+0x13e>
 80059de:	60a2      	str	r2, [r4, #8]
 80059e0:	e7e6      	b.n	80059b0 <setvbuf+0x124>
 80059e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e4:	f000 f8c4 	bl	8005b70 <__retarget_lock_release_recursive>
 80059e8:	e7e7      	b.n	80059ba <setvbuf+0x12e>
 80059ea:	f04f 35ff 	mov.w	r5, #4294967295
 80059ee:	e7bc      	b.n	800596a <setvbuf+0xde>
 80059f0:	24000020 	.word	0x24000020

080059f4 <__sread>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	460c      	mov	r4, r1
 80059f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fc:	f000 f868 	bl	8005ad0 <_read_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	bfab      	itete	ge
 8005a04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a06:	89a3      	ldrhlt	r3, [r4, #12]
 8005a08:	181b      	addge	r3, r3, r0
 8005a0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a0e:	bfac      	ite	ge
 8005a10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a12:	81a3      	strhlt	r3, [r4, #12]
 8005a14:	bd10      	pop	{r4, pc}

08005a16 <__swrite>:
 8005a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	461f      	mov	r7, r3
 8005a1c:	898b      	ldrh	r3, [r1, #12]
 8005a1e:	05db      	lsls	r3, r3, #23
 8005a20:	4605      	mov	r5, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	4616      	mov	r6, r2
 8005a26:	d505      	bpl.n	8005a34 <__swrite+0x1e>
 8005a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f000 f83c 	bl	8005aac <_lseek_r>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	4632      	mov	r2, r6
 8005a42:	463b      	mov	r3, r7
 8005a44:	4628      	mov	r0, r5
 8005a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4a:	f000 b853 	b.w	8005af4 <_write_r>

08005a4e <__sseek>:
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	460c      	mov	r4, r1
 8005a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a56:	f000 f829 	bl	8005aac <_lseek_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	bf15      	itete	ne
 8005a60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a6a:	81a3      	strheq	r3, [r4, #12]
 8005a6c:	bf18      	it	ne
 8005a6e:	81a3      	strhne	r3, [r4, #12]
 8005a70:	bd10      	pop	{r4, pc}

08005a72 <__sclose>:
 8005a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a76:	f000 b809 	b.w	8005a8c <_close_r>

08005a7a <memset>:
 8005a7a:	4402      	add	r2, r0
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d100      	bne.n	8005a84 <memset+0xa>
 8005a82:	4770      	bx	lr
 8005a84:	f803 1b01 	strb.w	r1, [r3], #1
 8005a88:	e7f9      	b.n	8005a7e <memset+0x4>
	...

08005a8c <_close_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d06      	ldr	r5, [pc, #24]	@ (8005aa8 <_close_r+0x1c>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	f7fb f8ea 	bl	8000c70 <_close>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_close_r+0x1a>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_close_r+0x1a>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	24000270 	.word	0x24000270

08005aac <_lseek_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	@ (8005acc <_lseek_r+0x20>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fb f8ff 	bl	8000cbe <_lseek>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_lseek_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_lseek_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	24000270 	.word	0x24000270

08005ad0 <_read_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d07      	ldr	r5, [pc, #28]	@ (8005af0 <_read_r+0x20>)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	4611      	mov	r1, r2
 8005ada:	2200      	movs	r2, #0
 8005adc:	602a      	str	r2, [r5, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f7fb f88d 	bl	8000bfe <_read>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_read_r+0x1e>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_read_r+0x1e>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	24000270 	.word	0x24000270

08005af4 <_write_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4d07      	ldr	r5, [pc, #28]	@ (8005b14 <_write_r+0x20>)
 8005af8:	4604      	mov	r4, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	602a      	str	r2, [r5, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f7fb f898 	bl	8000c38 <_write>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_write_r+0x1e>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_write_r+0x1e>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	24000270 	.word	0x24000270

08005b18 <__errno>:
 8005b18:	4b01      	ldr	r3, [pc, #4]	@ (8005b20 <__errno+0x8>)
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	24000020 	.word	0x24000020

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4d0d      	ldr	r5, [pc, #52]	@ (8005b5c <__libc_init_array+0x38>)
 8005b28:	4c0d      	ldr	r4, [pc, #52]	@ (8005b60 <__libc_init_array+0x3c>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	2600      	movs	r6, #0
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	4d0b      	ldr	r5, [pc, #44]	@ (8005b64 <__libc_init_array+0x40>)
 8005b36:	4c0c      	ldr	r4, [pc, #48]	@ (8005b68 <__libc_init_array+0x44>)
 8005b38:	f000 fdbe 	bl	80066b8 <_init>
 8005b3c:	1b64      	subs	r4, r4, r5
 8005b3e:	10a4      	asrs	r4, r4, #2
 8005b40:	2600      	movs	r6, #0
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4c:	4798      	blx	r3
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b56:	4798      	blx	r3
 8005b58:	3601      	adds	r6, #1
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	08006750 	.word	0x08006750
 8005b60:	08006750 	.word	0x08006750
 8005b64:	08006750 	.word	0x08006750
 8005b68:	08006754 	.word	0x08006754

08005b6c <__retarget_lock_init_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__retarget_lock_acquire_recursive>:
 8005b6e:	4770      	bx	lr

08005b70 <__retarget_lock_release_recursive>:
 8005b70:	4770      	bx	lr
	...

08005b74 <_free_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d041      	beq.n	8005c00 <_free_r+0x8c>
 8005b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b80:	1f0c      	subs	r4, r1, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bfb8      	it	lt
 8005b86:	18e4      	addlt	r4, r4, r3
 8005b88:	f000 f8e8 	bl	8005d5c <__malloc_lock>
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c04 <_free_r+0x90>)
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	b933      	cbnz	r3, 8005ba0 <_free_r+0x2c>
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	4628      	mov	r0, r5
 8005b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9c:	f000 b8e4 	b.w	8005d68 <__malloc_unlock>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d908      	bls.n	8005bb6 <_free_r+0x42>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	1821      	adds	r1, r4, r0
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1809      	addeq	r1, r1, r0
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	e7ed      	b.n	8005b92 <_free_r+0x1e>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b10b      	cbz	r3, 8005bc0 <_free_r+0x4c>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x42>
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	1850      	adds	r0, r2, r1
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x6c>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	4401      	add	r1, r0
 8005bcc:	1850      	adds	r0, r2, r1
 8005bce:	4283      	cmp	r3, r0
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	d1e0      	bne.n	8005b96 <_free_r+0x22>
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	4408      	add	r0, r1
 8005bdc:	6010      	str	r0, [r2, #0]
 8005bde:	e7da      	b.n	8005b96 <_free_r+0x22>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x74>
 8005be2:	230c      	movs	r3, #12
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	e7d6      	b.n	8005b96 <_free_r+0x22>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1809      	addeq	r1, r1, r0
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	6054      	str	r4, [r2, #4]
 8005bfe:	e7ca      	b.n	8005b96 <_free_r+0x22>
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	2400027c 	.word	0x2400027c

08005c08 <malloc>:
 8005c08:	4b02      	ldr	r3, [pc, #8]	@ (8005c14 <malloc+0xc>)
 8005c0a:	4601      	mov	r1, r0
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	f000 b825 	b.w	8005c5c <_malloc_r>
 8005c12:	bf00      	nop
 8005c14:	24000020 	.word	0x24000020

08005c18 <sbrk_aligned>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c58 <sbrk_aligned+0x40>)
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	6831      	ldr	r1, [r6, #0]
 8005c20:	4605      	mov	r5, r0
 8005c22:	b911      	cbnz	r1, 8005c2a <sbrk_aligned+0x12>
 8005c24:	f000 fd38 	bl	8006698 <_sbrk_r>
 8005c28:	6030      	str	r0, [r6, #0]
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 fd33 	bl	8006698 <_sbrk_r>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d103      	bne.n	8005c3e <sbrk_aligned+0x26>
 8005c36:	f04f 34ff 	mov.w	r4, #4294967295
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	1cc4      	adds	r4, r0, #3
 8005c40:	f024 0403 	bic.w	r4, r4, #3
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d0f8      	beq.n	8005c3a <sbrk_aligned+0x22>
 8005c48:	1a21      	subs	r1, r4, r0
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 fd24 	bl	8006698 <_sbrk_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d1f2      	bne.n	8005c3a <sbrk_aligned+0x22>
 8005c54:	e7ef      	b.n	8005c36 <sbrk_aligned+0x1e>
 8005c56:	bf00      	nop
 8005c58:	24000278 	.word	0x24000278

08005c5c <_malloc_r>:
 8005c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c60:	1ccd      	adds	r5, r1, #3
 8005c62:	f025 0503 	bic.w	r5, r5, #3
 8005c66:	3508      	adds	r5, #8
 8005c68:	2d0c      	cmp	r5, #12
 8005c6a:	bf38      	it	cc
 8005c6c:	250c      	movcc	r5, #12
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	4606      	mov	r6, r0
 8005c72:	db01      	blt.n	8005c78 <_malloc_r+0x1c>
 8005c74:	42a9      	cmp	r1, r5
 8005c76:	d904      	bls.n	8005c82 <_malloc_r+0x26>
 8005c78:	230c      	movs	r3, #12
 8005c7a:	6033      	str	r3, [r6, #0]
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d58 <_malloc_r+0xfc>
 8005c86:	f000 f869 	bl	8005d5c <__malloc_lock>
 8005c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8e:	461c      	mov	r4, r3
 8005c90:	bb44      	cbnz	r4, 8005ce4 <_malloc_r+0x88>
 8005c92:	4629      	mov	r1, r5
 8005c94:	4630      	mov	r0, r6
 8005c96:	f7ff ffbf 	bl	8005c18 <sbrk_aligned>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	d158      	bne.n	8005d52 <_malloc_r+0xf6>
 8005ca0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca4:	4627      	mov	r7, r4
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	d143      	bne.n	8005d32 <_malloc_r+0xd6>
 8005caa:	2c00      	cmp	r4, #0
 8005cac:	d04b      	beq.n	8005d46 <_malloc_r+0xea>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	eb04 0903 	add.w	r9, r4, r3
 8005cb8:	f000 fcee 	bl	8006698 <_sbrk_r>
 8005cbc:	4581      	cmp	r9, r0
 8005cbe:	d142      	bne.n	8005d46 <_malloc_r+0xea>
 8005cc0:	6821      	ldr	r1, [r4, #0]
 8005cc2:	1a6d      	subs	r5, r5, r1
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ffa6 	bl	8005c18 <sbrk_aligned>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d03a      	beq.n	8005d46 <_malloc_r+0xea>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	442b      	add	r3, r5
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	bb62      	cbnz	r2, 8005d38 <_malloc_r+0xdc>
 8005cde:	f8c8 7000 	str.w	r7, [r8]
 8005ce2:	e00f      	b.n	8005d04 <_malloc_r+0xa8>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	1b52      	subs	r2, r2, r5
 8005ce8:	d420      	bmi.n	8005d2c <_malloc_r+0xd0>
 8005cea:	2a0b      	cmp	r2, #11
 8005cec:	d917      	bls.n	8005d1e <_malloc_r+0xc2>
 8005cee:	1961      	adds	r1, r4, r5
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	6025      	str	r5, [r4, #0]
 8005cf4:	bf18      	it	ne
 8005cf6:	6059      	strne	r1, [r3, #4]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	bf08      	it	eq
 8005cfc:	f8c8 1000 	streq.w	r1, [r8]
 8005d00:	5162      	str	r2, [r4, r5]
 8005d02:	604b      	str	r3, [r1, #4]
 8005d04:	4630      	mov	r0, r6
 8005d06:	f000 f82f 	bl	8005d68 <__malloc_unlock>
 8005d0a:	f104 000b 	add.w	r0, r4, #11
 8005d0e:	1d23      	adds	r3, r4, #4
 8005d10:	f020 0007 	bic.w	r0, r0, #7
 8005d14:	1ac2      	subs	r2, r0, r3
 8005d16:	bf1c      	itt	ne
 8005d18:	1a1b      	subne	r3, r3, r0
 8005d1a:	50a3      	strne	r3, [r4, r2]
 8005d1c:	e7af      	b.n	8005c7e <_malloc_r+0x22>
 8005d1e:	6862      	ldr	r2, [r4, #4]
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	bf0c      	ite	eq
 8005d24:	f8c8 2000 	streq.w	r2, [r8]
 8005d28:	605a      	strne	r2, [r3, #4]
 8005d2a:	e7eb      	b.n	8005d04 <_malloc_r+0xa8>
 8005d2c:	4623      	mov	r3, r4
 8005d2e:	6864      	ldr	r4, [r4, #4]
 8005d30:	e7ae      	b.n	8005c90 <_malloc_r+0x34>
 8005d32:	463c      	mov	r4, r7
 8005d34:	687f      	ldr	r7, [r7, #4]
 8005d36:	e7b6      	b.n	8005ca6 <_malloc_r+0x4a>
 8005d38:	461a      	mov	r2, r3
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d1fb      	bne.n	8005d38 <_malloc_r+0xdc>
 8005d40:	2300      	movs	r3, #0
 8005d42:	6053      	str	r3, [r2, #4]
 8005d44:	e7de      	b.n	8005d04 <_malloc_r+0xa8>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f000 f80c 	bl	8005d68 <__malloc_unlock>
 8005d50:	e794      	b.n	8005c7c <_malloc_r+0x20>
 8005d52:	6005      	str	r5, [r0, #0]
 8005d54:	e7d6      	b.n	8005d04 <_malloc_r+0xa8>
 8005d56:	bf00      	nop
 8005d58:	2400027c 	.word	0x2400027c

08005d5c <__malloc_lock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	@ (8005d64 <__malloc_lock+0x8>)
 8005d5e:	f7ff bf06 	b.w	8005b6e <__retarget_lock_acquire_recursive>
 8005d62:	bf00      	nop
 8005d64:	24000274 	.word	0x24000274

08005d68 <__malloc_unlock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	@ (8005d70 <__malloc_unlock+0x8>)
 8005d6a:	f7ff bf01 	b.w	8005b70 <__retarget_lock_release_recursive>
 8005d6e:	bf00      	nop
 8005d70:	24000274 	.word	0x24000274

08005d74 <__sfputc_r>:
 8005d74:	6893      	ldr	r3, [r2, #8]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	b410      	push	{r4}
 8005d7c:	6093      	str	r3, [r2, #8]
 8005d7e:	da08      	bge.n	8005d92 <__sfputc_r+0x1e>
 8005d80:	6994      	ldr	r4, [r2, #24]
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	db01      	blt.n	8005d8a <__sfputc_r+0x16>
 8005d86:	290a      	cmp	r1, #10
 8005d88:	d103      	bne.n	8005d92 <__sfputc_r+0x1e>
 8005d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d8e:	f000 bbcd 	b.w	800652c <__swbuf_r>
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	1c58      	adds	r0, r3, #1
 8005d96:	6010      	str	r0, [r2, #0]
 8005d98:	7019      	strb	r1, [r3, #0]
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <__sfputs_r>:
 8005da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da4:	4606      	mov	r6, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	4614      	mov	r4, r2
 8005daa:	18d5      	adds	r5, r2, r3
 8005dac:	42ac      	cmp	r4, r5
 8005dae:	d101      	bne.n	8005db4 <__sfputs_r+0x12>
 8005db0:	2000      	movs	r0, #0
 8005db2:	e007      	b.n	8005dc4 <__sfputs_r+0x22>
 8005db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db8:	463a      	mov	r2, r7
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff ffda 	bl	8005d74 <__sfputc_r>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d1f3      	bne.n	8005dac <__sfputs_r+0xa>
 8005dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dc8 <_vfiprintf_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	460d      	mov	r5, r1
 8005dce:	b09d      	sub	sp, #116	@ 0x74
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	4698      	mov	r8, r3
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	b118      	cbz	r0, 8005de0 <_vfiprintf_r+0x18>
 8005dd8:	6a03      	ldr	r3, [r0, #32]
 8005dda:	b90b      	cbnz	r3, 8005de0 <_vfiprintf_r+0x18>
 8005ddc:	f7ff fd06 	bl	80057ec <__sinit>
 8005de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005de2:	07d9      	lsls	r1, r3, #31
 8005de4:	d405      	bmi.n	8005df2 <_vfiprintf_r+0x2a>
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	059a      	lsls	r2, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_vfiprintf_r+0x2a>
 8005dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dee:	f7ff febe 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	071b      	lsls	r3, r3, #28
 8005df6:	d501      	bpl.n	8005dfc <_vfiprintf_r+0x34>
 8005df8:	692b      	ldr	r3, [r5, #16]
 8005dfa:	b99b      	cbnz	r3, 8005e24 <_vfiprintf_r+0x5c>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f000 fbd2 	bl	80065a8 <__swsetup_r>
 8005e04:	b170      	cbz	r0, 8005e24 <_vfiprintf_r+0x5c>
 8005e06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e08:	07dc      	lsls	r4, r3, #31
 8005e0a:	d504      	bpl.n	8005e16 <_vfiprintf_r+0x4e>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	b01d      	add	sp, #116	@ 0x74
 8005e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	0598      	lsls	r0, r3, #22
 8005e1a:	d4f7      	bmi.n	8005e0c <_vfiprintf_r+0x44>
 8005e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e1e:	f7ff fea7 	bl	8005b70 <__retarget_lock_release_recursive>
 8005e22:	e7f3      	b.n	8005e0c <_vfiprintf_r+0x44>
 8005e24:	2300      	movs	r3, #0
 8005e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e28:	2320      	movs	r3, #32
 8005e2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e32:	2330      	movs	r3, #48	@ 0x30
 8005e34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fe4 <_vfiprintf_r+0x21c>
 8005e38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e3c:	f04f 0901 	mov.w	r9, #1
 8005e40:	4623      	mov	r3, r4
 8005e42:	469a      	mov	sl, r3
 8005e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e48:	b10a      	cbz	r2, 8005e4e <_vfiprintf_r+0x86>
 8005e4a:	2a25      	cmp	r2, #37	@ 0x25
 8005e4c:	d1f9      	bne.n	8005e42 <_vfiprintf_r+0x7a>
 8005e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e52:	d00b      	beq.n	8005e6c <_vfiprintf_r+0xa4>
 8005e54:	465b      	mov	r3, fp
 8005e56:	4622      	mov	r2, r4
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7ff ffa1 	bl	8005da2 <__sfputs_r>
 8005e60:	3001      	adds	r0, #1
 8005e62:	f000 80a7 	beq.w	8005fb4 <_vfiprintf_r+0x1ec>
 8005e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e68:	445a      	add	r2, fp
 8005e6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 809f 	beq.w	8005fb4 <_vfiprintf_r+0x1ec>
 8005e76:	2300      	movs	r3, #0
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e80:	f10a 0a01 	add.w	sl, sl, #1
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	9307      	str	r3, [sp, #28]
 8005e88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e8e:	4654      	mov	r4, sl
 8005e90:	2205      	movs	r2, #5
 8005e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e96:	4853      	ldr	r0, [pc, #332]	@ (8005fe4 <_vfiprintf_r+0x21c>)
 8005e98:	f7fa fa22 	bl	80002e0 <memchr>
 8005e9c:	9a04      	ldr	r2, [sp, #16]
 8005e9e:	b9d8      	cbnz	r0, 8005ed8 <_vfiprintf_r+0x110>
 8005ea0:	06d1      	lsls	r1, r2, #27
 8005ea2:	bf44      	itt	mi
 8005ea4:	2320      	movmi	r3, #32
 8005ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eaa:	0713      	lsls	r3, r2, #28
 8005eac:	bf44      	itt	mi
 8005eae:	232b      	movmi	r3, #43	@ 0x2b
 8005eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eba:	d015      	beq.n	8005ee8 <_vfiprintf_r+0x120>
 8005ebc:	9a07      	ldr	r2, [sp, #28]
 8005ebe:	4654      	mov	r4, sl
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f04f 0c0a 	mov.w	ip, #10
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ecc:	3b30      	subs	r3, #48	@ 0x30
 8005ece:	2b09      	cmp	r3, #9
 8005ed0:	d94b      	bls.n	8005f6a <_vfiprintf_r+0x1a2>
 8005ed2:	b1b0      	cbz	r0, 8005f02 <_vfiprintf_r+0x13a>
 8005ed4:	9207      	str	r2, [sp, #28]
 8005ed6:	e014      	b.n	8005f02 <_vfiprintf_r+0x13a>
 8005ed8:	eba0 0308 	sub.w	r3, r0, r8
 8005edc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	46a2      	mov	sl, r4
 8005ee6:	e7d2      	b.n	8005e8e <_vfiprintf_r+0xc6>
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	1d19      	adds	r1, r3, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	9103      	str	r1, [sp, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfbb      	ittet	lt
 8005ef4:	425b      	neglt	r3, r3
 8005ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8005efa:	9307      	strge	r3, [sp, #28]
 8005efc:	9307      	strlt	r3, [sp, #28]
 8005efe:	bfb8      	it	lt
 8005f00:	9204      	strlt	r2, [sp, #16]
 8005f02:	7823      	ldrb	r3, [r4, #0]
 8005f04:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f06:	d10a      	bne.n	8005f1e <_vfiprintf_r+0x156>
 8005f08:	7863      	ldrb	r3, [r4, #1]
 8005f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f0c:	d132      	bne.n	8005f74 <_vfiprintf_r+0x1ac>
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	9203      	str	r2, [sp, #12]
 8005f16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f1a:	3402      	adds	r4, #2
 8005f1c:	9305      	str	r3, [sp, #20]
 8005f1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ff4 <_vfiprintf_r+0x22c>
 8005f22:	7821      	ldrb	r1, [r4, #0]
 8005f24:	2203      	movs	r2, #3
 8005f26:	4650      	mov	r0, sl
 8005f28:	f7fa f9da 	bl	80002e0 <memchr>
 8005f2c:	b138      	cbz	r0, 8005f3e <_vfiprintf_r+0x176>
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	eba0 000a 	sub.w	r0, r0, sl
 8005f34:	2240      	movs	r2, #64	@ 0x40
 8005f36:	4082      	lsls	r2, r0
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	3401      	adds	r4, #1
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f42:	4829      	ldr	r0, [pc, #164]	@ (8005fe8 <_vfiprintf_r+0x220>)
 8005f44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f48:	2206      	movs	r2, #6
 8005f4a:	f7fa f9c9 	bl	80002e0 <memchr>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d03f      	beq.n	8005fd2 <_vfiprintf_r+0x20a>
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <_vfiprintf_r+0x224>)
 8005f54:	bb1b      	cbnz	r3, 8005f9e <_vfiprintf_r+0x1d6>
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	3307      	adds	r3, #7
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	3308      	adds	r3, #8
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f64:	443b      	add	r3, r7
 8005f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f68:	e76a      	b.n	8005e40 <_vfiprintf_r+0x78>
 8005f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6e:	460c      	mov	r4, r1
 8005f70:	2001      	movs	r0, #1
 8005f72:	e7a8      	b.n	8005ec6 <_vfiprintf_r+0xfe>
 8005f74:	2300      	movs	r3, #0
 8005f76:	3401      	adds	r4, #1
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f04f 0c0a 	mov.w	ip, #10
 8005f80:	4620      	mov	r0, r4
 8005f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f86:	3a30      	subs	r2, #48	@ 0x30
 8005f88:	2a09      	cmp	r2, #9
 8005f8a:	d903      	bls.n	8005f94 <_vfiprintf_r+0x1cc>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0c6      	beq.n	8005f1e <_vfiprintf_r+0x156>
 8005f90:	9105      	str	r1, [sp, #20]
 8005f92:	e7c4      	b.n	8005f1e <_vfiprintf_r+0x156>
 8005f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f98:	4604      	mov	r4, r0
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e7f0      	b.n	8005f80 <_vfiprintf_r+0x1b8>
 8005f9e:	ab03      	add	r3, sp, #12
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	462a      	mov	r2, r5
 8005fa4:	4b12      	ldr	r3, [pc, #72]	@ (8005ff0 <_vfiprintf_r+0x228>)
 8005fa6:	a904      	add	r1, sp, #16
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f3af 8000 	nop.w
 8005fae:	4607      	mov	r7, r0
 8005fb0:	1c78      	adds	r0, r7, #1
 8005fb2:	d1d6      	bne.n	8005f62 <_vfiprintf_r+0x19a>
 8005fb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fb6:	07d9      	lsls	r1, r3, #31
 8005fb8:	d405      	bmi.n	8005fc6 <_vfiprintf_r+0x1fe>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	059a      	lsls	r2, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_vfiprintf_r+0x1fe>
 8005fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fc2:	f7ff fdd5 	bl	8005b70 <__retarget_lock_release_recursive>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	065b      	lsls	r3, r3, #25
 8005fca:	f53f af1f 	bmi.w	8005e0c <_vfiprintf_r+0x44>
 8005fce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fd0:	e71e      	b.n	8005e10 <_vfiprintf_r+0x48>
 8005fd2:	ab03      	add	r3, sp, #12
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <_vfiprintf_r+0x228>)
 8005fda:	a904      	add	r1, sp, #16
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 f879 	bl	80060d4 <_printf_i>
 8005fe2:	e7e4      	b.n	8005fae <_vfiprintf_r+0x1e6>
 8005fe4:	08006714 	.word	0x08006714
 8005fe8:	0800671e 	.word	0x0800671e
 8005fec:	00000000 	.word	0x00000000
 8005ff0:	08005da3 	.word	0x08005da3
 8005ff4:	0800671a 	.word	0x0800671a

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006008:	4293      	cmp	r3, r2
 800600a:	bfb8      	it	lt
 800600c:	4613      	movlt	r3, r2
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006014:	4607      	mov	r7, r0
 8006016:	460c      	mov	r4, r1
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc26      	bgt.n	800608e <_printf_common+0x96>
 8006040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	3b00      	subs	r3, #0
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d42b      	bmi.n	80060a8 <_printf_common+0xb0>
 8006050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006054:	4641      	mov	r1, r8
 8006056:	4638      	mov	r0, r7
 8006058:	47c8      	blx	r9
 800605a:	3001      	adds	r0, #1
 800605c:	d01e      	beq.n	800609c <_printf_common+0xa4>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf02      	ittt	eq
 800606a:	68e5      	ldreq	r5, [r4, #12]
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	1aed      	subeq	r5, r5, r3
 8006070:	68a3      	ldr	r3, [r4, #8]
 8006072:	bf0c      	ite	eq
 8006074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006078:	2500      	movne	r5, #0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfc4      	itt	gt
 800607e:	1a9b      	subgt	r3, r3, r2
 8006080:	18ed      	addgt	r5, r5, r3
 8006082:	2600      	movs	r6, #0
 8006084:	341a      	adds	r4, #26
 8006086:	42b5      	cmp	r5, r6
 8006088:	d11a      	bne.n	80060c0 <_printf_common+0xc8>
 800608a:	2000      	movs	r0, #0
 800608c:	e008      	b.n	80060a0 <_printf_common+0xa8>
 800608e:	2301      	movs	r3, #1
 8006090:	4652      	mov	r2, sl
 8006092:	4641      	mov	r1, r8
 8006094:	4638      	mov	r0, r7
 8006096:	47c8      	blx	r9
 8006098:	3001      	adds	r0, #1
 800609a:	d103      	bne.n	80060a4 <_printf_common+0xac>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	3501      	adds	r5, #1
 80060a6:	e7c6      	b.n	8006036 <_printf_common+0x3e>
 80060a8:	18e1      	adds	r1, r4, r3
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	2030      	movs	r0, #48	@ 0x30
 80060ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060b2:	4422      	add	r2, r4
 80060b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060bc:	3302      	adds	r3, #2
 80060be:	e7c7      	b.n	8006050 <_printf_common+0x58>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4622      	mov	r2, r4
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0e6      	beq.n	800609c <_printf_common+0xa4>
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7d9      	b.n	8006086 <_printf_common+0x8e>
	...

080060d4 <_printf_i>:
 80060d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	7e0f      	ldrb	r7, [r1, #24]
 80060da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060dc:	2f78      	cmp	r7, #120	@ 0x78
 80060de:	4691      	mov	r9, r2
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	469a      	mov	sl, r3
 80060e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ea:	d807      	bhi.n	80060fc <_printf_i+0x28>
 80060ec:	2f62      	cmp	r7, #98	@ 0x62
 80060ee:	d80a      	bhi.n	8006106 <_printf_i+0x32>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	f000 80d1 	beq.w	8006298 <_printf_i+0x1c4>
 80060f6:	2f58      	cmp	r7, #88	@ 0x58
 80060f8:	f000 80b8 	beq.w	800626c <_printf_i+0x198>
 80060fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006100:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006104:	e03a      	b.n	800617c <_printf_i+0xa8>
 8006106:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800610a:	2b15      	cmp	r3, #21
 800610c:	d8f6      	bhi.n	80060fc <_printf_i+0x28>
 800610e:	a101      	add	r1, pc, #4	@ (adr r1, 8006114 <_printf_i+0x40>)
 8006110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006114:	0800616d 	.word	0x0800616d
 8006118:	08006181 	.word	0x08006181
 800611c:	080060fd 	.word	0x080060fd
 8006120:	080060fd 	.word	0x080060fd
 8006124:	080060fd 	.word	0x080060fd
 8006128:	080060fd 	.word	0x080060fd
 800612c:	08006181 	.word	0x08006181
 8006130:	080060fd 	.word	0x080060fd
 8006134:	080060fd 	.word	0x080060fd
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080060fd 	.word	0x080060fd
 8006140:	0800627f 	.word	0x0800627f
 8006144:	080061ab 	.word	0x080061ab
 8006148:	08006239 	.word	0x08006239
 800614c:	080060fd 	.word	0x080060fd
 8006150:	080060fd 	.word	0x080060fd
 8006154:	080062a1 	.word	0x080062a1
 8006158:	080060fd 	.word	0x080060fd
 800615c:	080061ab 	.word	0x080061ab
 8006160:	080060fd 	.word	0x080060fd
 8006164:	080060fd 	.word	0x080060fd
 8006168:	08006241 	.word	0x08006241
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6032      	str	r2, [r6, #0]
 8006174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006178:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800617c:	2301      	movs	r3, #1
 800617e:	e09c      	b.n	80062ba <_printf_i+0x1e6>
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6031      	str	r1, [r6, #0]
 8006188:	0606      	lsls	r6, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xbc>
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	e003      	b.n	8006198 <_printf_i+0xc4>
 8006190:	0645      	lsls	r5, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xb8>
 8006194:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006198:	2d00      	cmp	r5, #0
 800619a:	da03      	bge.n	80061a4 <_printf_i+0xd0>
 800619c:	232d      	movs	r3, #45	@ 0x2d
 800619e:	426d      	negs	r5, r5
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a4:	4858      	ldr	r0, [pc, #352]	@ (8006308 <_printf_i+0x234>)
 80061a6:	230a      	movs	r3, #10
 80061a8:	e011      	b.n	80061ce <_printf_i+0xfa>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	0608      	lsls	r0, r1, #24
 80061b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b4:	d402      	bmi.n	80061bc <_printf_i+0xe8>
 80061b6:	0649      	lsls	r1, r1, #25
 80061b8:	bf48      	it	mi
 80061ba:	b2ad      	uxthmi	r5, r5
 80061bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061be:	4852      	ldr	r0, [pc, #328]	@ (8006308 <_printf_i+0x234>)
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	bf14      	ite	ne
 80061c4:	230a      	movne	r3, #10
 80061c6:	2308      	moveq	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ce:	6866      	ldr	r6, [r4, #4]
 80061d0:	60a6      	str	r6, [r4, #8]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	db05      	blt.n	80061e2 <_printf_i+0x10e>
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	432e      	orrs	r6, r5
 80061da:	f021 0104 	bic.w	r1, r1, #4
 80061de:	6021      	str	r1, [r4, #0]
 80061e0:	d04b      	beq.n	800627a <_printf_i+0x1a6>
 80061e2:	4616      	mov	r6, r2
 80061e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e8:	fb03 5711 	mls	r7, r3, r1, r5
 80061ec:	5dc7      	ldrb	r7, [r0, r7]
 80061ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f2:	462f      	mov	r7, r5
 80061f4:	42bb      	cmp	r3, r7
 80061f6:	460d      	mov	r5, r1
 80061f8:	d9f4      	bls.n	80061e4 <_printf_i+0x110>
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d10b      	bne.n	8006216 <_printf_i+0x142>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	07df      	lsls	r7, r3, #31
 8006202:	d508      	bpl.n	8006216 <_printf_i+0x142>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	6861      	ldr	r1, [r4, #4]
 8006208:	4299      	cmp	r1, r3
 800620a:	bfde      	ittt	le
 800620c:	2330      	movle	r3, #48	@ 0x30
 800620e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006212:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006216:	1b92      	subs	r2, r2, r6
 8006218:	6122      	str	r2, [r4, #16]
 800621a:	f8cd a000 	str.w	sl, [sp]
 800621e:	464b      	mov	r3, r9
 8006220:	aa03      	add	r2, sp, #12
 8006222:	4621      	mov	r1, r4
 8006224:	4640      	mov	r0, r8
 8006226:	f7ff fee7 	bl	8005ff8 <_printf_common>
 800622a:	3001      	adds	r0, #1
 800622c:	d14a      	bne.n	80062c4 <_printf_i+0x1f0>
 800622e:	f04f 30ff 	mov.w	r0, #4294967295
 8006232:	b004      	add	sp, #16
 8006234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f043 0320 	orr.w	r3, r3, #32
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	4832      	ldr	r0, [pc, #200]	@ (800630c <_printf_i+0x238>)
 8006242:	2778      	movs	r7, #120	@ 0x78
 8006244:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	6831      	ldr	r1, [r6, #0]
 800624c:	061f      	lsls	r7, r3, #24
 800624e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006252:	d402      	bmi.n	800625a <_printf_i+0x186>
 8006254:	065f      	lsls	r7, r3, #25
 8006256:	bf48      	it	mi
 8006258:	b2ad      	uxthmi	r5, r5
 800625a:	6031      	str	r1, [r6, #0]
 800625c:	07d9      	lsls	r1, r3, #31
 800625e:	bf44      	itt	mi
 8006260:	f043 0320 	orrmi.w	r3, r3, #32
 8006264:	6023      	strmi	r3, [r4, #0]
 8006266:	b11d      	cbz	r5, 8006270 <_printf_i+0x19c>
 8006268:	2310      	movs	r3, #16
 800626a:	e7ad      	b.n	80061c8 <_printf_i+0xf4>
 800626c:	4826      	ldr	r0, [pc, #152]	@ (8006308 <_printf_i+0x234>)
 800626e:	e7e9      	b.n	8006244 <_printf_i+0x170>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	f023 0320 	bic.w	r3, r3, #32
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	e7f6      	b.n	8006268 <_printf_i+0x194>
 800627a:	4616      	mov	r6, r2
 800627c:	e7bd      	b.n	80061fa <_printf_i+0x126>
 800627e:	6833      	ldr	r3, [r6, #0]
 8006280:	6825      	ldr	r5, [r4, #0]
 8006282:	6961      	ldr	r1, [r4, #20]
 8006284:	1d18      	adds	r0, r3, #4
 8006286:	6030      	str	r0, [r6, #0]
 8006288:	062e      	lsls	r6, r5, #24
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	d501      	bpl.n	8006292 <_printf_i+0x1be>
 800628e:	6019      	str	r1, [r3, #0]
 8006290:	e002      	b.n	8006298 <_printf_i+0x1c4>
 8006292:	0668      	lsls	r0, r5, #25
 8006294:	d5fb      	bpl.n	800628e <_printf_i+0x1ba>
 8006296:	8019      	strh	r1, [r3, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	4616      	mov	r6, r2
 800629e:	e7bc      	b.n	800621a <_printf_i+0x146>
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	6032      	str	r2, [r6, #0]
 80062a6:	681e      	ldr	r6, [r3, #0]
 80062a8:	6862      	ldr	r2, [r4, #4]
 80062aa:	2100      	movs	r1, #0
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7fa f817 	bl	80002e0 <memchr>
 80062b2:	b108      	cbz	r0, 80062b8 <_printf_i+0x1e4>
 80062b4:	1b80      	subs	r0, r0, r6
 80062b6:	6060      	str	r0, [r4, #4]
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	2300      	movs	r3, #0
 80062be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c2:	e7aa      	b.n	800621a <_printf_i+0x146>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	4632      	mov	r2, r6
 80062c8:	4649      	mov	r1, r9
 80062ca:	4640      	mov	r0, r8
 80062cc:	47d0      	blx	sl
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0ad      	beq.n	800622e <_printf_i+0x15a>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	079b      	lsls	r3, r3, #30
 80062d6:	d413      	bmi.n	8006300 <_printf_i+0x22c>
 80062d8:	68e0      	ldr	r0, [r4, #12]
 80062da:	9b03      	ldr	r3, [sp, #12]
 80062dc:	4298      	cmp	r0, r3
 80062de:	bfb8      	it	lt
 80062e0:	4618      	movlt	r0, r3
 80062e2:	e7a6      	b.n	8006232 <_printf_i+0x15e>
 80062e4:	2301      	movs	r3, #1
 80062e6:	4632      	mov	r2, r6
 80062e8:	4649      	mov	r1, r9
 80062ea:	4640      	mov	r0, r8
 80062ec:	47d0      	blx	sl
 80062ee:	3001      	adds	r0, #1
 80062f0:	d09d      	beq.n	800622e <_printf_i+0x15a>
 80062f2:	3501      	adds	r5, #1
 80062f4:	68e3      	ldr	r3, [r4, #12]
 80062f6:	9903      	ldr	r1, [sp, #12]
 80062f8:	1a5b      	subs	r3, r3, r1
 80062fa:	42ab      	cmp	r3, r5
 80062fc:	dcf2      	bgt.n	80062e4 <_printf_i+0x210>
 80062fe:	e7eb      	b.n	80062d8 <_printf_i+0x204>
 8006300:	2500      	movs	r5, #0
 8006302:	f104 0619 	add.w	r6, r4, #25
 8006306:	e7f5      	b.n	80062f4 <_printf_i+0x220>
 8006308:	08006725 	.word	0x08006725
 800630c:	08006736 	.word	0x08006736

08006310 <__sflush_r>:
 8006310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	0716      	lsls	r6, r2, #28
 800631a:	4605      	mov	r5, r0
 800631c:	460c      	mov	r4, r1
 800631e:	d454      	bmi.n	80063ca <__sflush_r+0xba>
 8006320:	684b      	ldr	r3, [r1, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	dc02      	bgt.n	800632c <__sflush_r+0x1c>
 8006326:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	dd48      	ble.n	80063be <__sflush_r+0xae>
 800632c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800632e:	2e00      	cmp	r6, #0
 8006330:	d045      	beq.n	80063be <__sflush_r+0xae>
 8006332:	2300      	movs	r3, #0
 8006334:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006338:	682f      	ldr	r7, [r5, #0]
 800633a:	6a21      	ldr	r1, [r4, #32]
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	d030      	beq.n	80063a2 <__sflush_r+0x92>
 8006340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	0759      	lsls	r1, r3, #29
 8006346:	d505      	bpl.n	8006354 <__sflush_r+0x44>
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800634e:	b10b      	cbz	r3, 8006354 <__sflush_r+0x44>
 8006350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006352:	1ad2      	subs	r2, r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006358:	6a21      	ldr	r1, [r4, #32]
 800635a:	4628      	mov	r0, r5
 800635c:	47b0      	blx	r6
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	d106      	bne.n	8006372 <__sflush_r+0x62>
 8006364:	6829      	ldr	r1, [r5, #0]
 8006366:	291d      	cmp	r1, #29
 8006368:	d82b      	bhi.n	80063c2 <__sflush_r+0xb2>
 800636a:	4a2a      	ldr	r2, [pc, #168]	@ (8006414 <__sflush_r+0x104>)
 800636c:	40ca      	lsrs	r2, r1
 800636e:	07d6      	lsls	r6, r2, #31
 8006370:	d527      	bpl.n	80063c2 <__sflush_r+0xb2>
 8006372:	2200      	movs	r2, #0
 8006374:	6062      	str	r2, [r4, #4]
 8006376:	04d9      	lsls	r1, r3, #19
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	6022      	str	r2, [r4, #0]
 800637c:	d504      	bpl.n	8006388 <__sflush_r+0x78>
 800637e:	1c42      	adds	r2, r0, #1
 8006380:	d101      	bne.n	8006386 <__sflush_r+0x76>
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	b903      	cbnz	r3, 8006388 <__sflush_r+0x78>
 8006386:	6560      	str	r0, [r4, #84]	@ 0x54
 8006388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800638a:	602f      	str	r7, [r5, #0]
 800638c:	b1b9      	cbz	r1, 80063be <__sflush_r+0xae>
 800638e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006392:	4299      	cmp	r1, r3
 8006394:	d002      	beq.n	800639c <__sflush_r+0x8c>
 8006396:	4628      	mov	r0, r5
 8006398:	f7ff fbec 	bl	8005b74 <_free_r>
 800639c:	2300      	movs	r3, #0
 800639e:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a0:	e00d      	b.n	80063be <__sflush_r+0xae>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b0      	blx	r6
 80063a8:	4602      	mov	r2, r0
 80063aa:	1c50      	adds	r0, r2, #1
 80063ac:	d1c9      	bne.n	8006342 <__sflush_r+0x32>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0c6      	beq.n	8006342 <__sflush_r+0x32>
 80063b4:	2b1d      	cmp	r3, #29
 80063b6:	d001      	beq.n	80063bc <__sflush_r+0xac>
 80063b8:	2b16      	cmp	r3, #22
 80063ba:	d11e      	bne.n	80063fa <__sflush_r+0xea>
 80063bc:	602f      	str	r7, [r5, #0]
 80063be:	2000      	movs	r0, #0
 80063c0:	e022      	b.n	8006408 <__sflush_r+0xf8>
 80063c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	e01b      	b.n	8006402 <__sflush_r+0xf2>
 80063ca:	690f      	ldr	r7, [r1, #16]
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	d0f6      	beq.n	80063be <__sflush_r+0xae>
 80063d0:	0793      	lsls	r3, r2, #30
 80063d2:	680e      	ldr	r6, [r1, #0]
 80063d4:	bf08      	it	eq
 80063d6:	694b      	ldreq	r3, [r1, #20]
 80063d8:	600f      	str	r7, [r1, #0]
 80063da:	bf18      	it	ne
 80063dc:	2300      	movne	r3, #0
 80063de:	eba6 0807 	sub.w	r8, r6, r7
 80063e2:	608b      	str	r3, [r1, #8]
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	dde9      	ble.n	80063be <__sflush_r+0xae>
 80063ea:	6a21      	ldr	r1, [r4, #32]
 80063ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063ee:	4643      	mov	r3, r8
 80063f0:	463a      	mov	r2, r7
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b0      	blx	r6
 80063f6:	2800      	cmp	r0, #0
 80063f8:	dc08      	bgt.n	800640c <__sflush_r+0xfc>
 80063fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	4407      	add	r7, r0
 800640e:	eba8 0800 	sub.w	r8, r8, r0
 8006412:	e7e7      	b.n	80063e4 <__sflush_r+0xd4>
 8006414:	20400001 	.word	0x20400001

08006418 <_fflush_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b913      	cbnz	r3, 8006428 <_fflush_r+0x10>
 8006422:	2500      	movs	r5, #0
 8006424:	4628      	mov	r0, r5
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	b118      	cbz	r0, 8006432 <_fflush_r+0x1a>
 800642a:	6a03      	ldr	r3, [r0, #32]
 800642c:	b90b      	cbnz	r3, 8006432 <_fflush_r+0x1a>
 800642e:	f7ff f9dd 	bl	80057ec <__sinit>
 8006432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f3      	beq.n	8006422 <_fflush_r+0xa>
 800643a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800643c:	07d0      	lsls	r0, r2, #31
 800643e:	d404      	bmi.n	800644a <_fflush_r+0x32>
 8006440:	0599      	lsls	r1, r3, #22
 8006442:	d402      	bmi.n	800644a <_fflush_r+0x32>
 8006444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006446:	f7ff fb92 	bl	8005b6e <__retarget_lock_acquire_recursive>
 800644a:	4628      	mov	r0, r5
 800644c:	4621      	mov	r1, r4
 800644e:	f7ff ff5f 	bl	8006310 <__sflush_r>
 8006452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006454:	07da      	lsls	r2, r3, #31
 8006456:	4605      	mov	r5, r0
 8006458:	d4e4      	bmi.n	8006424 <_fflush_r+0xc>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	d4e1      	bmi.n	8006424 <_fflush_r+0xc>
 8006460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006462:	f7ff fb85 	bl	8005b70 <__retarget_lock_release_recursive>
 8006466:	e7dd      	b.n	8006424 <_fflush_r+0xc>

08006468 <__swhatbuf_r>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	460c      	mov	r4, r1
 800646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006470:	2900      	cmp	r1, #0
 8006472:	b096      	sub	sp, #88	@ 0x58
 8006474:	4615      	mov	r5, r2
 8006476:	461e      	mov	r6, r3
 8006478:	da0d      	bge.n	8006496 <__swhatbuf_r+0x2e>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	bf14      	ite	ne
 8006486:	2340      	movne	r3, #64	@ 0x40
 8006488:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800648c:	2000      	movs	r0, #0
 800648e:	6031      	str	r1, [r6, #0]
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	b016      	add	sp, #88	@ 0x58
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	466a      	mov	r2, sp
 8006498:	f000 f8dc 	bl	8006654 <_fstat_r>
 800649c:	2800      	cmp	r0, #0
 800649e:	dbec      	blt.n	800647a <__swhatbuf_r+0x12>
 80064a0:	9901      	ldr	r1, [sp, #4]
 80064a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064aa:	4259      	negs	r1, r3
 80064ac:	4159      	adcs	r1, r3
 80064ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064b2:	e7eb      	b.n	800648c <__swhatbuf_r+0x24>

080064b4 <__smakebuf_r>:
 80064b4:	898b      	ldrh	r3, [r1, #12]
 80064b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b8:	079d      	lsls	r5, r3, #30
 80064ba:	4606      	mov	r6, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	d507      	bpl.n	80064d0 <__smakebuf_r+0x1c>
 80064c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	6123      	str	r3, [r4, #16]
 80064c8:	2301      	movs	r3, #1
 80064ca:	6163      	str	r3, [r4, #20]
 80064cc:	b003      	add	sp, #12
 80064ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d0:	ab01      	add	r3, sp, #4
 80064d2:	466a      	mov	r2, sp
 80064d4:	f7ff ffc8 	bl	8006468 <__swhatbuf_r>
 80064d8:	9f00      	ldr	r7, [sp, #0]
 80064da:	4605      	mov	r5, r0
 80064dc:	4639      	mov	r1, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff fbbc 	bl	8005c5c <_malloc_r>
 80064e4:	b948      	cbnz	r0, 80064fa <__smakebuf_r+0x46>
 80064e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ea:	059a      	lsls	r2, r3, #22
 80064ec:	d4ee      	bmi.n	80064cc <__smakebuf_r+0x18>
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	f043 0302 	orr.w	r3, r3, #2
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	e7e2      	b.n	80064c0 <__smakebuf_r+0xc>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	6020      	str	r0, [r4, #0]
 80064fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800650a:	b15b      	cbz	r3, 8006524 <__smakebuf_r+0x70>
 800650c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006510:	4630      	mov	r0, r6
 8006512:	f000 f8b1 	bl	8006678 <_isatty_r>
 8006516:	b128      	cbz	r0, 8006524 <__smakebuf_r+0x70>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	431d      	orrs	r5, r3
 8006528:	81a5      	strh	r5, [r4, #12]
 800652a:	e7cf      	b.n	80064cc <__smakebuf_r+0x18>

0800652c <__swbuf_r>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	460e      	mov	r6, r1
 8006530:	4614      	mov	r4, r2
 8006532:	4605      	mov	r5, r0
 8006534:	b118      	cbz	r0, 800653e <__swbuf_r+0x12>
 8006536:	6a03      	ldr	r3, [r0, #32]
 8006538:	b90b      	cbnz	r3, 800653e <__swbuf_r+0x12>
 800653a:	f7ff f957 	bl	80057ec <__sinit>
 800653e:	69a3      	ldr	r3, [r4, #24]
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	071a      	lsls	r2, r3, #28
 8006546:	d501      	bpl.n	800654c <__swbuf_r+0x20>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	b943      	cbnz	r3, 800655e <__swbuf_r+0x32>
 800654c:	4621      	mov	r1, r4
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f82a 	bl	80065a8 <__swsetup_r>
 8006554:	b118      	cbz	r0, 800655e <__swbuf_r+0x32>
 8006556:	f04f 37ff 	mov.w	r7, #4294967295
 800655a:	4638      	mov	r0, r7
 800655c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	1a98      	subs	r0, r3, r2
 8006564:	6963      	ldr	r3, [r4, #20]
 8006566:	b2f6      	uxtb	r6, r6
 8006568:	4283      	cmp	r3, r0
 800656a:	4637      	mov	r7, r6
 800656c:	dc05      	bgt.n	800657a <__swbuf_r+0x4e>
 800656e:	4621      	mov	r1, r4
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff ff51 	bl	8006418 <_fflush_r>
 8006576:	2800      	cmp	r0, #0
 8006578:	d1ed      	bne.n	8006556 <__swbuf_r+0x2a>
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	3b01      	subs	r3, #1
 800657e:	60a3      	str	r3, [r4, #8]
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	6022      	str	r2, [r4, #0]
 8006586:	701e      	strb	r6, [r3, #0]
 8006588:	6962      	ldr	r2, [r4, #20]
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	429a      	cmp	r2, r3
 800658e:	d004      	beq.n	800659a <__swbuf_r+0x6e>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	07db      	lsls	r3, r3, #31
 8006594:	d5e1      	bpl.n	800655a <__swbuf_r+0x2e>
 8006596:	2e0a      	cmp	r6, #10
 8006598:	d1df      	bne.n	800655a <__swbuf_r+0x2e>
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f7ff ff3b 	bl	8006418 <_fflush_r>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0d9      	beq.n	800655a <__swbuf_r+0x2e>
 80065a6:	e7d6      	b.n	8006556 <__swbuf_r+0x2a>

080065a8 <__swsetup_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4b29      	ldr	r3, [pc, #164]	@ (8006650 <__swsetup_r+0xa8>)
 80065ac:	4605      	mov	r5, r0
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	460c      	mov	r4, r1
 80065b2:	b118      	cbz	r0, 80065bc <__swsetup_r+0x14>
 80065b4:	6a03      	ldr	r3, [r0, #32]
 80065b6:	b90b      	cbnz	r3, 80065bc <__swsetup_r+0x14>
 80065b8:	f7ff f918 	bl	80057ec <__sinit>
 80065bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c0:	0719      	lsls	r1, r3, #28
 80065c2:	d422      	bmi.n	800660a <__swsetup_r+0x62>
 80065c4:	06da      	lsls	r2, r3, #27
 80065c6:	d407      	bmi.n	80065d8 <__swsetup_r+0x30>
 80065c8:	2209      	movs	r2, #9
 80065ca:	602a      	str	r2, [r5, #0]
 80065cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d0:	81a3      	strh	r3, [r4, #12]
 80065d2:	f04f 30ff 	mov.w	r0, #4294967295
 80065d6:	e033      	b.n	8006640 <__swsetup_r+0x98>
 80065d8:	0758      	lsls	r0, r3, #29
 80065da:	d512      	bpl.n	8006602 <__swsetup_r+0x5a>
 80065dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065de:	b141      	cbz	r1, 80065f2 <__swsetup_r+0x4a>
 80065e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <__swsetup_r+0x46>
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff fac3 	bl	8005b74 <_free_r>
 80065ee:	2300      	movs	r3, #0
 80065f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	2300      	movs	r3, #0
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f043 0308 	orr.w	r3, r3, #8
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	6923      	ldr	r3, [r4, #16]
 800660c:	b94b      	cbnz	r3, 8006622 <__swsetup_r+0x7a>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006618:	d003      	beq.n	8006622 <__swsetup_r+0x7a>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f7ff ff49 	bl	80064b4 <__smakebuf_r>
 8006622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006626:	f013 0201 	ands.w	r2, r3, #1
 800662a:	d00a      	beq.n	8006642 <__swsetup_r+0x9a>
 800662c:	2200      	movs	r2, #0
 800662e:	60a2      	str	r2, [r4, #8]
 8006630:	6962      	ldr	r2, [r4, #20]
 8006632:	4252      	negs	r2, r2
 8006634:	61a2      	str	r2, [r4, #24]
 8006636:	6922      	ldr	r2, [r4, #16]
 8006638:	b942      	cbnz	r2, 800664c <__swsetup_r+0xa4>
 800663a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800663e:	d1c5      	bne.n	80065cc <__swsetup_r+0x24>
 8006640:	bd38      	pop	{r3, r4, r5, pc}
 8006642:	0799      	lsls	r1, r3, #30
 8006644:	bf58      	it	pl
 8006646:	6962      	ldrpl	r2, [r4, #20]
 8006648:	60a2      	str	r2, [r4, #8]
 800664a:	e7f4      	b.n	8006636 <__swsetup_r+0x8e>
 800664c:	2000      	movs	r0, #0
 800664e:	e7f7      	b.n	8006640 <__swsetup_r+0x98>
 8006650:	24000020 	.word	0x24000020

08006654 <_fstat_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	@ (8006674 <_fstat_r+0x20>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	f7fa fb11 	bl	8000c88 <_fstat>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d102      	bne.n	8006670 <_fstat_r+0x1c>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b103      	cbz	r3, 8006670 <_fstat_r+0x1c>
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	bf00      	nop
 8006674:	24000270 	.word	0x24000270

08006678 <_isatty_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d06      	ldr	r5, [pc, #24]	@ (8006694 <_isatty_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fa fb10 	bl	8000ca8 <_isatty>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_isatty_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_isatty_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	24000270 	.word	0x24000270

08006698 <_sbrk_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	@ (80066b4 <_sbrk_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f7fa fb18 	bl	8000cd8 <_sbrk>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_sbrk_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_sbrk_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	24000270 	.word	0x24000270

080066b8 <_init>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr

080066c4 <_fini>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr
